include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidLib"
include "LibCOOC_h"
include "LibCOUI_h"
include "LibCOMU_h"

include "LibCOMI_h"

//--------------------------------------------------------------------------------------------------
// Library: Mission (COOP)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCOMI_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libCOOC_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
}

// Variable Initialization
bool libCOMI_InitVariables_completed = false;

void libCOMI_InitVariables () {
    int init_i;
    int init_j;

    if (libCOMI_InitVariables_completed) {
        return;
    }

    libCOMI_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_ScreenMode[init_i] = c_uiModeConsole;
    }
    libCOMI_gv_cM_CoopAIPlayer_NextAttackWave = TimerCreate();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_Commander[init_i] = "None";
    }
    libCOMI_gv_cM_CoopAIPlayer_CommanderShared = "None";
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_IsAlive[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves[init_i] = AIWaveTargetPlayer(libCOOC_gf_HumanPlayers());
    }
    libCOMI_gv_cM_CoopAI_MissionType = "SiegeMission";
    libCOMI_gv_cM_CoopAI_AttackForce_Transports = UnitGroupEmpty();
    libCOMI_gv_cM_CoopAI_AIDetection_AttackWave = UnitGroupEmpty();
    libCOMI_gv_cM_CoopAI_Players = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[init_i].lv_cachedDifficulty = 6;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_AttackGroup[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_CoopAI_WavePingShowAll = true;
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cMC_CoopAI_MaxWaveCount; init_j += 1) {
            libCOMI_gv_cM_CoopAI_WaveShowPing[init_i][init_j] = true;
        }
    }
    libCOMI_gv_cM_CoopAI_DontPingUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_APlayer[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_AWave[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_BPlayer[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_BWave[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_PingGroups[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_PingGroupPing[init_i] = c_invalidPingId;
    }
    libCOMI_gv_cM_CoopAI_DontPingPlayers = PlayerGroupEmpty();
    libCOMI_gv_candyChargeCmd = AbilityCommand("MutatorBuyCandy", 0);
    libCOMI_gv_supplicantWarpTrainActualUnitCost = UnitTypeGetCost("Supplicant", c_unitCostMinerals);
    libCOMI_gv_supplicantWarpTrainActualCommand = AbilityCommand("WarpGateTrainSupplicantTrue", 11);
    libCOMI_gv_cM_AlarakLightningStrikes_SacrificeCmd = AbilityCommand("AscendantSacrifice", 0);
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOMI_gv_cM_Alarak_EmpowerSlaves[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOMI_gv_cM_Alarak_EmpowerWorshipers[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_Fenix_HeroGroup = UnitGroupEmpty();
    libCOMI_gv_cM_Fenix_DummyGroup = UnitGroupEmpty();
    libCOMI_gv_cM_Fenix_SuitSwapCooldown = 15.0;
    libCOMI_gv_cM_Fenix_OfflineHealthRegen = 2.0;
    libCOMI_gv_cM_Fenix_OfflineShieldRegen = 2.0;
    libCOMI_gv_cM_Fenix_OfflineEnergyRegen = 1.67;
    libCOMI_gv_cM_Fenix_OfflineVitalRegenMultiplier = 1.2;
    for (init_i = 0; init_i <= libCOMI_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimerSet[init_i] = 5.0;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[init_i] = RegionGetCenter(RegionEntireMap());
    }
    libCOMI_gv_kerriganPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("PsiStrikeBlink", "Energy");
    libCOMI_gv_cM_LaserDrillUnitGroup = UnitGroupEmpty();
    libCOMI_gv_cM_NovaUnitName_CountCurrentPosition = RandomInt(1, 143);
    libCOMI_gv_cM_NovaUnitName_CountStep = RandomInt(1, 7);
    libCOMI_gv_cM_NovaGriffinTransportUnitGroup = UnitGroupEmpty();
    libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir = UnitGroupEmpty();
    libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround = UnitGroupEmpty();
    libCOMI_gv_NovaPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("NovaPsiStrike", "Energy");
    libCOMI_gv_cM_Stukov_HordeGroup = UnitGroupEmpty();
    libCOMI_gv_cM_Stukov_HordeCurrentWave = UnitGroupEmpty();
    libCOMI_gv_cM_Stukov_BunkerGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SoACasterGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SoATargetingDirectionGroup[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_SoATimeFreezeTimer = TimerCreate();
    libCOMI_gv_cM_SoASuperChronoTimer = TimerCreate();
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_EndMissionResult[init_i] = c_gameOverDefeat;
    }
    libCOMI_gv_cM_MaxSpawn = 9;
    libCOMI_gv_cM_CreepGroup = UnitGroupEmpty();
    libCOMI_gv_cM_CreepTimer = TimerCreate();
    libCOMI_gv_cM_SpawnTime = 180;
    libCOMI_gv_zS_ReviveCooldownTimeKerrigan = 60.0;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_HeroDeathCount[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_GlobalCasterUnitGroup[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_RevealersEnabled = true;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SharedVisionPlayers[init_i] = PlayerGroupEmpty();
    }
    libCOMI_gv_cM_NeedPylonEnabled = true;
    libCOMI_gv_cM_NeedPylonFoodRequired = 1;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOMI_gv_playerColor[init_i] = 15;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libCOMI_gv_cM_FenixVOTransmissionFirstPlay[init_i] = true;
    }
    libCOMI_gv_cM_FenixVOTransmissionTimer = TimerCreate();
    libCOMI_gv_cM_VOResourceReqSendButton = c_invalidDialogControlId;
    libCOMI_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    libCOMI_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn = true;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_VisionShareUnits[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_VisionShareEnabled = true;
    libCOMI_gv_cM_DropPod_TP_Units = UnitGroupEmpty();
    libCOMI_gv_cM_UpgradeTextTag = c_textTagNone;
    libCOMI_gv_cM_DrillTextTagInitial = c_textTagNone;
    libCOMI_gv_cM_DrillTextTagCreated = c_textTagNone;
    libCOMI_gv_cM_DrillTextTagDamaged = c_textTagNone;
    libCOMI_gv_cM_CybCoreTextTag = c_textTagNone;
    libCOMI_gv_cM_SolarForgeTextTag = c_textTagNone;
    libCOMI_gv_cM_FullScreenUpperContainer = c_invalidDialogControlId;
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: CM_AIIncludes
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/AI"
include "TriggerLibs/BaseAI"
include "TriggerLibs/Computer"
include "TriggerLibs/CampaignAI"
include "TriggerLibs/SharedAI"

void libCOMI_InitCustomScript () {
}

// Presets
string libCOMI_ge_ObjectiveTimerThresholds_Ident (int lp_val) {
         if (lp_val == libCOMI_ge_ObjectiveTimerThresholds_Yellow) { return "Yellow"; }
    else if (lp_val == libCOMI_ge_ObjectiveTimerThresholds_Red) { return "Red"; }
    return null;
}

// Functions
int libCOMI_gf_PingTypeFromObjectiveType (bool lp_objectiveType) {
    // Implementation
    if ((lp_objectiveType == true)) {
        return libCOMI_ge_ObjectivePingType_Primary;
    }

    return libCOMI_ge_ObjectivePingType_Secondary;
}

trigger auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger = null;
point auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation;

void libCOMI_gf_AttentionGrabbingObjectivePing (point lp_pingLocation) {
    auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation = lp_pingLocation;

    if (auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger == null) {
        auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger = TriggerCreate("auto_libCOMI_gf_AttentionGrabbingObjectivePing_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger, false, false);
}

bool auto_libCOMI_gf_AttentionGrabbingObjectivePing_TriggerFunc (bool testConds, bool runActions) {
    point lp_pingLocation = auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation;

    int autoE898793D_ae;
    int autoE898793D_ai;

    // Variable Declarations
    int lv_scaleIter;
    fixed lv_pingScale;
    int lv_spiningShrinkingPing;

    // Variable Initialization
    lv_spiningShrinkingPing = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_pingLocation, 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    lv_spiningShrinkingPing = PingLastCreated();
    PingSetScale(lv_spiningShrinkingPing, 3.0);
    autoE898793D_ae = 20;
    autoE898793D_ai = -1;
    lv_scaleIter = 40;
    for ( ; ( (autoE898793D_ai >= 0 && lv_scaleIter <= autoE898793D_ae) || (autoE898793D_ai <= 0 && lv_scaleIter >= autoE898793D_ae) ) ; lv_scaleIter += autoE898793D_ai ) {
        lv_pingScale = (lv_scaleIter * 0.1);
        PingSetScale(lv_spiningShrinkingPing, lv_pingScale);
        PingSetRotation(lv_spiningShrinkingPing, (360 - (ModF(lv_scaleIter, 10.0) * 36)));
        Wait(0.1, c_timeReal);
    }
    libCOMI_gf_DestroyPingCoop(lv_spiningShrinkingPing);
    return true;
}

void libCOMI_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    // Deprecated
    libCOMI_gf_CreateObjectivePingAC(libCOMI_gf_PingTypeFromObjectiveType(lp_objectiveType), lp_position, lp_tooltip);
}

void libCOMI_gf_CreateObjectivePingAC (int lp_objectiveType, point lp_position, text lp_tooltip) {
    int auto7500AD90_val;

    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;
    fixed lv_angle;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    auto7500AD90_val = lp_objectiveType;
    if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_Primary) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 1.0;
        lv_model = "PingObjective";
        lv_angle = 270.0;
    }
    else if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_Secondary) {
        lv_color = Color(100.00, 100.00, 0.00);
        lv_scale = 0.4;
        lv_model = "PingTriangle";
        lv_angle = 90.0;
    }
    else if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_POI) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 0.4;
        lv_model = "PingSimple";
        lv_angle = 90.0;
    }
    else {
    }
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_position, lv_angle, lv_model, lv_color, 0.0);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(libCOMI_gt_VoidPingSound, true, false);
}

trigger auto_libCOMI_gf_PingMinimapCampaign_Trigger = null;
playergroup auto_libCOMI_gf_PingMinimapCampaign_lp_players;
point auto_libCOMI_gf_PingMinimapCampaign_lp_pos;
fixed auto_libCOMI_gf_PingMinimapCampaign_lp_dur;
color auto_libCOMI_gf_PingMinimapCampaign_lp_color;

void libCOMI_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color) {
    auto_libCOMI_gf_PingMinimapCampaign_lp_players = lp_players;
    auto_libCOMI_gf_PingMinimapCampaign_lp_pos = lp_pos;
    auto_libCOMI_gf_PingMinimapCampaign_lp_dur = lp_dur;
    auto_libCOMI_gf_PingMinimapCampaign_lp_color = lp_color;

    if (auto_libCOMI_gf_PingMinimapCampaign_Trigger == null) {
        auto_libCOMI_gf_PingMinimapCampaign_Trigger = TriggerCreate("auto_libCOMI_gf_PingMinimapCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_PingMinimapCampaign_Trigger, false, false);
}

bool auto_libCOMI_gf_PingMinimapCampaign_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libCOMI_gf_PingMinimapCampaign_lp_players;
    point lp_pos = auto_libCOMI_gf_PingMinimapCampaign_lp_pos;
    fixed lp_dur = auto_libCOMI_gf_PingMinimapCampaign_lp_dur;
    color lp_color = auto_libCOMI_gf_PingMinimapCampaign_lp_color;

    string autoC47256CC_val;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(lp_players, lp_pos, 270.0, "PingAlert", lp_color, lp_dur);
    PlayerGroupLoopBegin(lp_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        autoC47256CC_val = PlayerRace(PlayerGroupLoopCurrent());
        if (autoC47256CC_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), lp_players, 100.0, 0.0);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    Wait(lp_dur, c_timeGame);
    libCOMI_gf_DestroyPingCoop(PingLastCreated());
    return true;
}

void libCOMI_gf_DestroyPingCoop (int lp_ping) {
    // Implementation
    PingDestroy(lp_ping);
}

void libCOMI_gf_CreatePingFacingAngleCoop (playergroup lp_players, point lp_position, fixed lp_angle, string lp_model, color lp_color, fixed lp_duration) {
    // Implementation
    libNtve_gf_CreatePingFacingAngle(lp_players, lp_model, lp_position, lp_color, lp_duration, lp_angle);
    if (((libCOMU_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMU_gf_MutatorIsEnabled("UberDarkness") == true))) {
        PingSetUsePlayerVision(PingLastCreated(), true);
    }

}

void libCOMI_gf_CreatePingWithPointFacingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, int lp_playerId) {
    // Implementation
    PingCreateWithPlayerId(lp_players, lp_model, lp_position, lp_color, lp_duration, lp_playerId);
    if (((libCOMU_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMU_gf_MutatorIsEnabled("UberDarkness") == true))) {
        PingSetUsePlayerVision(PingLastCreated(), true);
    }

}

void libCOMI_gf_CreatePingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration) {
    // Implementation
    libCOMI_gf_CreatePingWithPointFacingCoop(lp_players, lp_model, lp_position, lp_color, lp_duration, 0);
}

void libCOMI_gf_ShowHidePingCoop (int lp_ping, bool lp_visible) {
    // Implementation
    PingSetVisible(lp_ping, lp_visible);
}

void libCOMI_gf_CM_MissionAutoSave (text lp_description) {
    // Variable Declarations
    text lv_name;

    // Variable Initialization
    lv_name = StringToText("");

    // Implementation
    libCOMI_gv_cM_MissionAutoSaveIndex += 1;
    TextExpressionSetToken("Param/Expression/lib_COMI_87B2D44D", "A", libCOOC_gf_CC_CampaignMapName(libCOOC_gf_CC_CurrentMap(), 1));
    lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_87B2D44D");
    GameSaveCreate(lv_name, lp_description, "", true);
    Wait(1.0, c_timeGame);
    libCOMI_gv_cM_MissionAutoSaveDone = true;
}

void libCOMI_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    if ((libCOOC_gf_CC_CurrentMap() == null)) {
        return ;
    }

    libCOMI_gv_cM_MissionAutoSaveDone = false;
    libCOMI_gf_CM_MissionAutoSave(lp_description);
}

bool libCOMI_gf_PlayerInCinematicModeCampaign () {
    playergroup auto26F8757F_g;
    int auto26F8757F_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    auto26F8757F_g = PlayerGroupAll(); 
    auto26F8757F_p = 1;
    for ( ; auto26F8757F_p <= PlayerGroupCount(auto26F8757F_g) ; auto26F8757F_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto26F8757F_g, auto26F8757F_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto26F8757F_g, auto26F8757F_p);
        if ((PlayerType(lv_indexPlayer) == c_playerTypeUser) && (libNtve_gf_PlayerInCinematicMode(lv_indexPlayer) == false)) {
            return false;
        }

    }
    return true;
}

string libCOMI_gf_CM_SoundDataTableName () {
    // Implementation
    return (libCOMI_gv_pMC_SoundDataTableIdentifier + IntToString(libCOMI_gv_cM_SoundDataTableIndex));
}

void libCOMI_gf_PlaySoundCinematic (soundlink lp_soundLink, playergroup lp_players, fixed lp_volume, fixed lp_offset) {
    playergroup autoEDCAAF8F_g;
    int autoEDCAAF8F_p;

    // Variable Declarations
    bool lv_playerInCinematic;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoEDCAAF8F_g = lp_players; 
    autoEDCAAF8F_p = 1;
    for ( ; autoEDCAAF8F_p <= PlayerGroupCount(autoEDCAAF8F_g) ; autoEDCAAF8F_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(autoEDCAAF8F_g, autoEDCAAF8F_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoEDCAAF8F_g, autoEDCAAF8F_p);
        if ((libNtve_gf_PlayerInCinematicMode(lv_playerIndex) == true)) {
            lv_playerInCinematic = true;
            break;
        }

    }
    if ((lv_playerInCinematic == false)) {
        return ;
    }

    SoundPlay(lp_soundLink, lp_players, lp_volume, lp_offset);
    libCOMI_gv_cM_SoundDataTableIndex += 1;
    DataTableSetSound(true, libCOMI_gf_CM_SoundDataTableName(), SoundLastPlayed());
}

void libCOMI_gf_StopCinematicSounds () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    while ((libCOMI_gv_cM_SoundDataTableIndex > 0)) {
        SoundStop(DataTableGetSound(true, libCOMI_gf_CM_SoundDataTableName()), true);
        libCOMI_gv_cM_SoundDataTableIndex -= 1;
    }
}

void libCOMI_gf_SetScreenModeCoop (int lp_mode, fixed lp_duration, int lp_player) {
    // Implementation
    if ((libCOMI_gv_cM_ScreenMode[lp_player] == c_uiModeConsole) && (lp_mode != c_uiModeConsole)) {
        libCOUI_gf_CU_GPVisibilityAutoUpdate(false, lp_player, lp_duration);
    }
    else if ((libCOMI_gv_cM_ScreenMode[lp_player] != c_uiModeConsole) && (lp_mode == c_uiModeConsole)) {
        libCOUI_gf_CU_GPVisibilityAutoUpdate(true, lp_player, lp_duration);
    }
    UISetMode(PlayerGroupSingle(lp_player), lp_mode, lp_duration);
    libCOMI_gv_cM_ScreenMode[lp_player] = lp_mode;
}

void libCOMI_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions) {
    // Implementation
    if ((lp_onOff == true)) {
        libCOMI_gv_cM_InCinematic = true;
    }
    else {
        libCOMI_gv_cM_InCinematic = false;
    }
    if ((lp_waitOptions == false)) {
        libCOMI_gf_CM_CinematicModeNoWait(lp_onOff, lp_duration);
    }
    else {
        libCOMI_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    }
}

trigger auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger = null;
bool auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff;
fixed auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration;

void libCOMI_gf_CM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration) {
    auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff = lp_onOff;
    auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration = lp_duration;

    if (auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger == null) {
        auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CinematicModeNoWait_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CinematicModeNoWait_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onOff = auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff;
    fixed lp_duration = auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration;

    // Implementation
    libCOMI_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    return true;
}

void libCOMI_gf_CM_CinematicModeInternal (bool lp_onOff, fixed lp_duration) {
    playergroup auto7BC2F114_g;
    int auto7BC2F114_p;
    playergroup autoA04AE8FB_g;
    int autoA04AE8FB_p;
    playergroup auto311CBA6C_g;
    int auto311CBA6C_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization
    lv_indexPlayer = 1;

    // Implementation
    if ((lp_onOff == true)) {
        auto7BC2F114_g = libCOOC_gf_HumanPlayers(); 
        auto7BC2F114_p = 1;
        for ( ; auto7BC2F114_p <= PlayerGroupCount(auto7BC2F114_g) ; auto7BC2F114_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto7BC2F114_g, auto7BC2F114_p)) ) {
            lv_indexPlayer = PlayerGroupPlayer(auto7BC2F114_g, auto7BC2F114_p);
            libCOUI_gf_CU_GPVisibilityAutoUpdate(false, lv_indexPlayer, lp_duration);
        }
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, lp_duration);
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

        libCOMI_gf_CM_CinematicModeActivate();
        libNtve_gf_GlobalCinematicSetting(true);
        auto311CBA6C_g = libCOOC_gf_HumanPlayers(); 
        auto311CBA6C_p = 1;
        for ( ; auto311CBA6C_p <= PlayerGroupCount(auto311CBA6C_g) ; auto311CBA6C_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto311CBA6C_g, auto311CBA6C_p)) ) {
            lv_indexPlayer = PlayerGroupPlayer(auto311CBA6C_g, auto311CBA6C_p);
            PlayerScoreValueEnableAll(lv_indexPlayer, true);
        }
    }
    else {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lp_duration);
        libNtve_gf_GlobalCinematicSetting(false);
        autoA04AE8FB_g = libCOOC_gf_HumanPlayers(); 
        autoA04AE8FB_p = 1;
        for ( ; autoA04AE8FB_p <= PlayerGroupCount(autoA04AE8FB_g) ; autoA04AE8FB_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoA04AE8FB_g, autoA04AE8FB_p)) ) {
            lv_indexPlayer = PlayerGroupPlayer(autoA04AE8FB_g, autoA04AE8FB_p);
            libCOUI_gf_CU_GPVisibilityAutoUpdate(true, lv_indexPlayer, lp_duration);
        }
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

    }
}

void libCOMI_gf_CM_CinematicModeActivate () {
    playergroup autoB3D6D2ED_g;
    int autoB3D6D2ED_p;
    playergroup auto375744B4_g;
    int auto375744B4_p;
    playergroup auto162A8743_g;
    int auto162A8743_p;
    playergroup auto54EA3DBC_g;
    int auto54EA3DBC_p;

    // Variable Declarations
    playergroup lv_validPlayers;
    int lv_pickedPlayer;

    // Variable Initialization
    lv_validPlayers = PlayerGroupEmpty();

    // Implementation
    lv_validPlayers = PlayerGroupAll();
    autoB3D6D2ED_g = lv_validPlayers; 
    autoB3D6D2ED_p = 1;
    for ( ; autoB3D6D2ED_p <= PlayerGroupCount(autoB3D6D2ED_g) ; autoB3D6D2ED_p += BoolToInt(lv_pickedPlayer == PlayerGroupPlayer(autoB3D6D2ED_g, autoB3D6D2ED_p)) ) {
        lv_pickedPlayer = PlayerGroupPlayer(autoB3D6D2ED_g, autoB3D6D2ED_p);
        if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == true)) {
            PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
        }

    }
    if ((PlayerGroupCount(lv_validPlayers) == 0)) {
        return ;
    }

    UISetHotkeyAllowed(lv_validPlayers, c_hotkeyCameraFollow, false);
    libNtve_gf__CineModeTurnOnOffForPlayerGroup(lv_validPlayers, true);
    libNtve_gf__CineModeHideUI(lv_validPlayers);
    CinematicMode(lv_validPlayers, true, 0.0);
    UISetCursorVisible(lv_validPlayers, false);
    libNtve_gf_ShowHidePlacementModels(false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Cinematic, lv_validPlayers, MaxF(0.0, 1.5));
    auto375744B4_g = lv_validPlayers; 
    auto375744B4_p = 1;
    for ( ; auto375744B4_p <= PlayerGroupCount(auto375744B4_g) ; auto375744B4_p += BoolToInt(lv_pickedPlayer == PlayerGroupPlayer(auto375744B4_g, auto375744B4_p)) ) {
        lv_pickedPlayer = PlayerGroupPlayer(auto375744B4_g, auto375744B4_p);
        UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeLetterboxed, 0.0);
    }
    auto162A8743_g = lv_validPlayers; 
    auto162A8743_p = 1;
    for ( ; auto162A8743_p <= PlayerGroupCount(auto162A8743_g) ; auto162A8743_p += BoolToInt(lv_pickedPlayer == PlayerGroupPlayer(auto162A8743_g, auto162A8743_p)) ) {
        lv_pickedPlayer = PlayerGroupPlayer(auto162A8743_g, auto162A8743_p);
        PlayerPauseAllCharges(lv_pickedPlayer, true);
        PlayerPauseAllCooldowns(lv_pickedPlayer, true);
    }
    auto54EA3DBC_g = lv_validPlayers; 
    auto54EA3DBC_p = 1;
    for ( ; auto54EA3DBC_p <= PlayerGroupCount(auto54EA3DBC_g) ; auto54EA3DBC_p += BoolToInt(lv_pickedPlayer == PlayerGroupPlayer(auto54EA3DBC_g, auto54EA3DBC_p)) ) {
        lv_pickedPlayer = PlayerGroupPlayer(auto54EA3DBC_g, auto54EA3DBC_p);
        PlayerScoreValueEnableAll(lv_pickedPlayer, false);
    }
    UIFlyerHelperOverride(lv_validPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    TriggerSendEvent("CinematicModeOn");
}

bool libCOMI_gf_AISuspectDetectionDanger (int lp_player) {
    // Implementation
    return AIDefaultSuspectDetectionDanger(lp_player);
}

void libCOMI_gf_CM_CoopAIPersonalitySet (string lp_personality) {
    playergroup auto3EEF2065_g;
    int auto3EEF2065_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_CommanderShared = lp_personality;
    auto3EEF2065_g = libCOOC_gf_HumanPlayers(); 
    auto3EEF2065_p = 1;
    for ( ; auto3EEF2065_p <= PlayerGroupCount(auto3EEF2065_g) ; auto3EEF2065_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto3EEF2065_g, auto3EEF2065_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto3EEF2065_g, auto3EEF2065_p);
        libCOOC_gf_CC_ScoreValueSet(lv_indexPlayer, "EnemyPersonality", libCOMI_gf_CM_CoopAIPersonalityUniqueIndex(lp_personality));
    }
}

string libCOMI_gf_CM_CoopAIPersonality () {
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_CommanderShared;
}

timer libCOMI_gf_CM_CoopAI_Get_NextAttackWaveTimer (int lp_player) {
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_NextAttackWave;
}

void libCOMI_gf_CM_CoopAI_Set_EnemyPlayer (int lp_aIPlayer, int lp_targetPlayer) {
    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_Enemy[lp_aIPlayer] = lp_targetPlayer;
}

int libCOMI_gf_CM_CoopAI_Get_EnemyPlayer (int lp_aIPlayer) {
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_Enemy[lp_aIPlayer];
}

int libCOMI_gf_CM_CoopAI_WaveProp_Get_Retreat (int lp_player, wave lp_wave) {
    int auto9BA0C33D_ae;
    int auto9BA0C33D_ai;

    // Variable Declarations
    int lv_waveIter;

    // Variable Initialization

    // Implementation
    auto9BA0C33D_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
    auto9BA0C33D_ai = 1;
    lv_waveIter = 0;
    for ( ; ( (auto9BA0C33D_ai >= 0 && lv_waveIter <= auto9BA0C33D_ae) || (auto9BA0C33D_ai <= 0 && lv_waveIter >= auto9BA0C33D_ae) ) ; lv_waveIter += auto9BA0C33D_ai ) {
        if ((libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lp_player][lv_waveIter] == lp_wave)) {
            return libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat[lp_player][lv_waveIter];
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_0F200D4F"), true);
    return 0;
}

void libCOMI_gf_CM_CoopAI_Set_TargetOfAttackWaves (int lp_aIPlayer, wavetarget lp_waveTarget) {
    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves[lp_aIPlayer] = lp_waveTarget;
}

wavetarget libCOMI_gf_CM_CoopAI_Get_TargetOfAttackWaves (int lp_aIPlayer) {
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves[lp_aIPlayer];
}

bool libCOMI_gf_CM_CoopAI_IsSpikeWave (int lp_player) {
    // Implementation
    if ((libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count[lp_player] > 2) && (libCOMI_gv_cM_CoopAIPlayer_WaveResourceDeficit[lp_player] <= 0.0)) {
        return true;
    }
    else {
        return false;
    }
}

int libCOMI_gf_CM_CoopAIPersonalityUniqueIndex (string lp_personality) {
    // Implementation
    return UserDataGetInt("CoopAICommanders", lp_personality, "UniqueIndex", 1);
}

void libCOMI_gf_SetCoopAIWaveTarget (int lp_aI, wavetarget lp_waveTarget) {
    // Implementation
    libCOMI_gf_CM_CoopAI_Set_TargetOfAttackWaves(lp_aI, lp_waveTarget);
}

void libCOMI_gf_AddAttackWaveUnitType (int lp_count, string lp_unitType) {
    // Implementation
    AIAttackWaveAddUnits(-1, lp_count, lp_unitType);
}

bool libCOMI_gf_CM_CoopAI_AttackWaveContainsPingworthyUnits (unitgroup lp_attackWave) {
    unitgroup autoF655485E_g;
    int autoF655485E_u;

    // Variable Declarations
    unit lv_unitGroupIter;

    // Variable Initialization

    // Implementation
    autoF655485E_g = lp_attackWave;
    autoF655485E_u = 1;
    for ( ; autoF655485E_u <= UnitGroupCount(autoF655485E_g, c_unitCountAll) ; autoF655485E_u += BoolToInt(lv_unitGroupIter == UnitGroupUnit(autoF655485E_g, autoF655485E_u)) ) {
        lv_unitGroupIter = UnitGroupUnit(autoF655485E_g, autoF655485E_u);
        if (((UnitGetType(lv_unitGroupIter) == "Medivac") || (UnitGetType(lv_unitGroupIter) == "Raven") || (UnitGetType(lv_unitGroupIter) == "ScienceVessel") || (UnitGetType(lv_unitGroupIter) == "Observer") || (UnitGetType(lv_unitGroupIter) == "WarpPrismPhasing") || (UnitGetType(lv_unitGroupIter) == "WarpPrism") || (UnitGetType(lv_unitGroupIter) == "Overlord") || (UnitGetType(lv_unitGroupIter) == "Overseer") || (UnitGetType(lv_unitGroupIter) == "Changeling") || (UnitGetType(lv_unitGroupIter) == "ChangelingZealot") || (UnitGetType(lv_unitGroupIter) == "ChangelingMarineShield") || (UnitGetType(lv_unitGroupIter) == "ChangelingMarine") || (UnitGetType(lv_unitGroupIter) == "ChangelingZergling") || (UnitGetType(lv_unitGroupIter) == "ChangelingZerglingWings"))) {
            continue;
        }
        else {
            return true;
        }
    }
    return false;
}

void libCOMI_gf_StartCoopAI (int lp_player, int lp_aIPlayerEnemy) {
    unitgroup auto29712051_g;
    int auto29712051_u;
    string autoD30B3B6A_val;
    string auto0732882D_val;
    int auto09D1216F_val;
    int auto45D97997_val;
    int auto4590F938_val;

    // Variable Declarations
    string lv_aIPlayerRace;
    unitgroup lv_playerPreplacedUnits;
    unit lv_indexUnit;
    string lv_unitRace;

    // Variable Initialization
    lv_playerPreplacedUnits = UnitGroupEmpty();

    // Implementation
    if ((PlayerType(lp_aIPlayerEnemy) == c_playerTypeNone)) {
        libCOMI_gf_CM_CoopAI_Set_EnemyPlayer(lp_player, PlayerGroupPlayer(libCOOC_gf_HumanPlayers(), 1));
    }
    else {
        libCOMI_gf_CM_CoopAI_Set_EnemyPlayer(lp_player, lp_aIPlayerEnemy);
    }
    lv_playerPreplacedUnits = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto29712051_g = lv_playerPreplacedUnits;
    auto29712051_u = 1;
    for ( ; auto29712051_u <= UnitGroupCount(auto29712051_g, c_unitCountAll) ; auto29712051_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto29712051_g, auto29712051_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto29712051_g, auto29712051_u);
        lv_unitRace = libCOMI_gf_GetUnitRace(lv_indexUnit);
        if (((libCOMU_gf_CT_UnitSpawnedByMutator(lv_indexUnit) == true) || ((lv_unitRace != "Prot") && (lv_unitRace != "Terr") && (lv_unitRace != "Zerg")))) {
            UnitGroupRemove(lv_playerPreplacedUnits, lv_indexUnit);
        }

    }
    if ((UnitGroupCount(lv_playerPreplacedUnits, c_unitCountAlive) >= 1)) {
        lv_aIPlayerRace = libCOMI_gf_GetUnitRace(UnitGroupClosestToPoint(lv_playerPreplacedUnits, PlayerStartLocation(lp_player)));
    }
    else {
        lv_aIPlayerRace = (CatalogFieldValueGet(c_gameCatalogUnit, UserDataGetUnit("CoopAICommanderTiers", UserDataGetUserInstance("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_CommanderShared, "UnitTiers", 1), "PhaseUnits", 1), "Race", lp_player));
    }
    PlayerSetRace(lp_player, lv_aIPlayerRace);
    AICampaignStart(lp_player);
    VisRevealArea(lp_player, RegionEntireMap(), 0.1, false);
    libCOMI_gf_SetCoopAIWaveTarget(lp_player, AIWaveTargetPlayer(PlayerGroupSingle(libCOMI_gf_CM_CoopAI_Get_EnemyPlayer(lp_player))));
    PlayerGroupAdd(libCOMI_gv_cM_CoopAI_Players, lp_player);
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player] = PlayerStartLocation(lp_player);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIManager, true);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIDetectionManager, true);
    autoD30B3B6A_val = lv_aIPlayerRace;
    if (autoD30B3B6A_val == "Prot") {
        InitProtCounters(lp_player);
    }
    else if (autoD30B3B6A_val == "Terr") {
        InitTerrCounters(lp_player);
        AISetNukeConstants(lp_player);
        AIReqAddSpecialMaker(c_TU_Nuke, c_TB_GhostAcademy, "ArmSiloWithNuke", 0);
    }
    else if (autoD30B3B6A_val == "Zerg") {
        InitZergCounters(lp_player);
        AILimitStockLarva(lp_player, c_ZU_Larva);
        AIReqCountAsBuiltObject(lp_player, c_ZU_Larva);
        AISetCreepBuilding(lp_player, c_ZB_CreepTumor, "ZergBuildingNotOnCreep");
        AISetDefaultArmyUnit(lp_player, c_ZU_Zergling);
        AISetDefaultTownHall(lp_player, c_ZB_Hatchery);
        AIReqAddSpecialMaker( c_ZB_CreepTumorBurrowed, c_ZB_CreepTumor, "BurrowCreepTumorDown", 0);
        AIReqAddSpecialMaker( c_ZB_CreepTumorBurrowed, c_ZU_Queen, c_AB_QueenBuild, 0);
    }
    else {
    }
    AIAddAirDangerCampaignUnits(lp_player);
    if ((libCOMI_gv_cM_CoopAIPlayer_CommanderShared == "None")) {
        auto0732882D_val = lv_aIPlayerRace;
        if (auto0732882D_val == "Prot") {
            auto09D1216F_val = RandomInt(0, 5);
            if (auto09D1216F_val == 0) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildTechy";
            }
            else if (auto09D1216F_val == 1) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildSkytossTempest";
            }
            else if (auto09D1216F_val == 2) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildSkytossCarrier";
            }
            else if (auto09D1216F_val == 3) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildRoboReaver";
            }
            else if (auto09D1216F_val == 4) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildRoboColossus";
            }
            else {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildGateway";
            }
        }
        else if (auto0732882D_val == "Terr") {
            auto45D97997_val = RandomInt(0, 3);
            if (auto45D97997_val == 0) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "TerranBuildBioMechStar";
            }
            else if (auto45D97997_val == 1) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "TerranBuildMechStarport";
            }
            else if (auto45D97997_val == 2) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "TerranBuildShadowTech";
            }
            else {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "TerranBuildSkyTerran";
            }
        }
        else if (auto0732882D_val == "Zerg") {
            auto4590F938_val = RandomInt(0, 2);
            if (auto4590F938_val == 0) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ZergBuildSwarmy";
            }
            else if (auto4590F938_val == 1) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ZergBuildMutaLing";
            }
            else {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ZergBuildGround";
            }
        }
        else {
        }
        libCOMI_gf_CM_CoopAIPersonalitySet(libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player]);
    }
    else {
        libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = libCOMI_gf_CM_CoopAIPersonality();
    }
    libCOMI_gf_CM_CoopAI_SetupStartingTech(lp_player);
}

void libCOMI_gf_StartCoopAIwithSpecificPersonality (int lp_player, int lp_aIEnemy, string lp_personalityUserData) {
    // Implementation
    libCOMI_gf_CM_CoopAIPersonalitySet(lp_personalityUserData);
    libCOMI_gf_StartCoopAI(lp_player, lp_aIEnemy);
}

void libCOMI_gf_CM_StartCoopMissionMechanic (int lp_player, string lp_aICommander) {
    // Variable Declarations
    string lv_aIPlayerRace;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = lp_aICommander;
    lv_aIPlayerRace = (CatalogFieldValueGet(c_gameCatalogUnit, UserDataGetUnit("CoopAICommanderTiers", UserDataGetUserInstance("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "UnitTiers", 1), "PhaseUnits", 1), "Race", lp_player));
    PlayerSetRace(lp_player, lv_aIPlayerRace);
    PlayerSetDifficulty(lp_player, libCOMI_gf_GetMissionDifficulty());
    PlayerGroupAdd(libCOMI_gv_cM_CoopAI_Players, lp_player);
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player] = PlayerStartLocation(lp_player);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIManager, true);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIDetectionManager, true);
    AIAddDetectionDangerCampaignUnits(lp_player);
    AIAddAirDangerCampaignUnits(lp_player);
    libCOMI_gf_CM_CoopAI_SetupStartingTech(lp_player);
}

void libCOMI_gf_StartCoopMissionMechanicAI (int lp_player, string lp_aICommander) {
    // Implementation
    libCOMI_gf_CM_StartCoopMissionMechanic(lp_player, lp_aICommander);
}

void libCOMI_gf_SetCoopAIEnemy (int lp_coopAIPlayer, int lp_humanTargetPlayer) {
    // Implementation
    libCOMI_gf_CM_CoopAI_Set_EnemyPlayer(lp_coopAIPlayer, lp_humanTargetPlayer);
}

void libCOMI_gf_SetCoopAIGatherPoint (int lp_player, point lp_gatherPoint) {
    // Implementation
    AIAttackWaveSetGatherPoint(lp_player, lp_gatherPoint);
}

fixed libCOMI_gf_CM_CoopAI_GetResourceAmount (int lp_resourceSize, int lp_difficulty) {
    int autoE7DE9BF5_val;

    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;

    // Variable Initialization

    // Implementation
    autoE7DE9BF5_val = lp_resourceSize;
    if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest) {
        lv_waveInstance = "SiegeMissionWave01";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller) {
        lv_waveInstance = "SiegeMissionWave02";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__3Small) {
        lv_waveInstance = "SiegeMissionWave03";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__4Medium) {
        lv_waveInstance = "SiegeMissionWave04";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__5Large) {
        lv_waveInstance = "SiegeMissionWave05";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__6Larger) {
        lv_waveInstance = "SiegeMissionWave06";
    }
    else {
        lv_waveInstance = "SiegeMissionWave07";
    }
    lv_resourcesFromUserData = UserDataGetFixed("CoopAIAttackWaves", lv_waveInstance, "resourceSize", libCOOC_gf_CC_DifficultyIndex(lp_difficulty));
    return lv_resourcesFromUserData;
}

string libCOMI_gf_CM_CoopAI_GetTechLevel (int lp_player, int lp_techLevel) {
    int auto8DE95FA5_val;
    int auto4F71B072_ae;
    int auto4F71B072_ai;

    // Variable Declarations
    string lv_commanderUnitTier;
    int lv_tierIndex;

    // Variable Initialization

    // Implementation
    auto8DE95FA5_val = lp_techLevel;
    if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__1Early) {
        lv_tierIndex = 1;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid) {
        lv_tierIndex = 2;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__3Mid) {
        lv_tierIndex = 3;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__4LateMid) {
        lv_tierIndex = 4;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__5Late) {
        lv_tierIndex = 5;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets_TechLevel06) {
        lv_tierIndex = 6;
    }
    else {
        lv_tierIndex = 7;
    }
    lv_commanderUnitTier = UserDataGetUserInstance("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "UnitTiers", lv_tierIndex);
    if ((lv_commanderUnitTier == null)) {
        auto4F71B072_ae = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        auto4F71B072_ai = -1;
        lv_tierIndex = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
        for ( ; ( (auto4F71B072_ai >= 0 && lv_tierIndex <= auto4F71B072_ae) || (auto4F71B072_ai <= 0 && lv_tierIndex >= auto4F71B072_ae) ) ; lv_tierIndex += auto4F71B072_ai ) {
            lv_commanderUnitTier = UserDataGetUserInstance("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "UnitTiers", (lv_tierIndex + 1));
            if ((lv_commanderUnitTier != null)) {
                break;
            }

        }
    }

    return lv_commanderUnitTier;
}

void libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel (int lp_player, bool lp_instantAttackGroup, int lp_resourceSize, int lp_techLevel) {
    unitgroup auto3FD1E1FF_g;
    int auto3FD1E1FF_u;

    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;
    int lv_difficulty;
    string lv_commanderUnitTier;
    int lv_tierIndex;
    unit lv_setUnitEnergy;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_resourcesFromUserData = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, lv_difficulty);
    lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_player, lp_techLevel);
    libCOMI_gf_CM_CoopAI_CreateAttackWave2(lp_player, lp_instantAttackGroup, lv_resourcesFromUserData, lv_commanderUnitTier);
    if ((lp_instantAttackGroup == true)) {
        libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = libCOMI_gf_CreateDropAttack(lp_player, libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player]);
        auto3FD1E1FF_g = libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player];
        auto3FD1E1FF_u = 1;
        for ( ; auto3FD1E1FF_u <= UnitGroupCount(auto3FD1E1FF_g, c_unitCountAll) ; auto3FD1E1FF_u += BoolToInt(lv_setUnitEnergy == UnitGroupUnit(auto3FD1E1FF_g, auto3FD1E1FF_u)) ) {
            lv_setUnitEnergy = UnitGroupUnit(auto3FD1E1FF_g, auto3FD1E1FF_u);
            UnitSetPropertyFixed(lv_setUnitEnergy, c_unitPropEnergyPercent, 100.0);
        }
        AIAttackWaveUseGroup(lp_player, libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player]);
        libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = UnitGroupEmpty();
    }

}

unitgroup libCOMI_gf_CreateCoopAIAttackGroup2 (int lp_player, int lp_resourceSize, int lp_techLevel) {
    unitgroup autoECDA3CCB_g;
    int autoECDA3CCB_u;

    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;
    int lv_difficulty;
    string lv_commanderUnitTier;
    int lv_tierIndex;
    unitgroup lv_attackGroup;
    unitgroup lv_returnUnitGroup;
    unit lv_returnGroupIter;

    // Variable Initialization
    lv_difficulty = 2;
    lv_attackGroup = UnitGroupEmpty();
    lv_returnUnitGroup = UnitGroupEmpty();

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_resourcesFromUserData = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, lv_difficulty);
    lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_player, lp_techLevel);
    libCOMI_gf_CM_CoopAI_CreateAttackWave2(lp_player, true, lv_resourcesFromUserData, lv_commanderUnitTier);
    lv_attackGroup = libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player];
    libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_returnUnitGroup, libCOMI_gf_CreateDropAttack(lp_player, lv_attackGroup, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player]));
    autoECDA3CCB_g = lv_returnUnitGroup;
    autoECDA3CCB_u = 1;
    for ( ; autoECDA3CCB_u <= UnitGroupCount(autoECDA3CCB_g, c_unitCountAll) ; autoECDA3CCB_u += BoolToInt(lv_returnGroupIter == UnitGroupUnit(autoECDA3CCB_g, autoECDA3CCB_u)) ) {
        lv_returnGroupIter = UnitGroupUnit(autoECDA3CCB_g, autoECDA3CCB_u);
        UnitSetPropertyFixed(lv_returnGroupIter, c_unitPropEnergyPercent, 100.0);
    }
    return lv_returnUnitGroup;
}

trigger auto_libCOMI_gf_CreateCommanderDropAttack_Trigger = null;
int auto_libCOMI_gf_CreateCommanderDropAttack_lp_player;
int auto_libCOMI_gf_CreateCommanderDropAttack_lp_resourceSize;
int auto_libCOMI_gf_CreateCommanderDropAttack_lp_techLevel;
point auto_libCOMI_gf_CreateCommanderDropAttack_lp_dropPoint;
point auto_libCOMI_gf_CreateCommanderDropAttack_lp_attackPoint;

void libCOMI_gf_CreateCommanderDropAttack (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_attackPoint) {
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_player = lp_player;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_resourceSize = lp_resourceSize;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_techLevel = lp_techLevel;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_dropPoint = lp_dropPoint;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_attackPoint = lp_attackPoint;

    if (auto_libCOMI_gf_CreateCommanderDropAttack_Trigger == null) {
        auto_libCOMI_gf_CreateCommanderDropAttack_Trigger = TriggerCreate("auto_libCOMI_gf_CreateCommanderDropAttack_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CreateCommanderDropAttack_Trigger, false, false);
}

bool auto_libCOMI_gf_CreateCommanderDropAttack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CreateCommanderDropAttack_lp_player;
    int lp_resourceSize = auto_libCOMI_gf_CreateCommanderDropAttack_lp_resourceSize;
    int lp_techLevel = auto_libCOMI_gf_CreateCommanderDropAttack_lp_techLevel;
    point lp_dropPoint = auto_libCOMI_gf_CreateCommanderDropAttack_lp_dropPoint;
    point lp_attackPoint = auto_libCOMI_gf_CreateCommanderDropAttack_lp_attackPoint;

    // Variable Declarations
    unitgroup lv_attackGroup;
    int lv_dropPodRacePreset;
    unit lv_dropGroupUnitIter;
    int lv_dropGroupIter;
    unitgroup lv_dropGroup;
    unit lv_pylon;
    revealer lv_pylonRevealer;
    unit lv_superWarpGate;
    const fixed lv_c_PowerSourceRadius = 6.5;
    unitgroup lv_airGroup;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lp_player, lp_resourceSize, lp_techLevel, lp_dropPoint);
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_attackGroup = libCOMI_gf_CreateDropAttack(lp_player, lv_attackGroup, lp_dropPoint);
    Wait(1.0, c_timeAI);
    AIAttackWaveSetTargetPoint(lp_player, lp_attackPoint);
    AIAttackWaveSetGatherPoint(lp_player, lp_dropPoint);
    AIAttackWaveUseGroup(lp_player, lv_attackGroup);
    AIAttackWaveSend(lp_player, 0, false);
    return true;
}

unitgroup libCOMI_gf_CreateCommanderAttackGroupatPoint (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    unitgroup auto10AFDE47_g;
    int auto10AFDE47_u;

    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;
    int lv_difficulty;
    string lv_commanderUnitTier;
    int lv_tierIndex;
    unitgroup lv_attackGroup;
    unitgroup lv_returnUnitGroup;
    unit lv_returnGroupIter;

    // Variable Initialization
    lv_difficulty = 2;
    lv_attackGroup = UnitGroupEmpty();
    lv_returnUnitGroup = UnitGroupEmpty();

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_resourcesFromUserData = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, lv_difficulty);
    lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_player, lp_techLevel);
    libCOMI_gf_CM_CoopAI_CreateAttackWave2(lp_player, true, lv_resourcesFromUserData, lv_commanderUnitTier);
    lv_attackGroup = libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player];
    libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_returnUnitGroup, libCOMI_gf_CreateDropAttack(lp_player, lv_attackGroup, lp_spawnLocation));
    auto10AFDE47_g = lv_returnUnitGroup;
    auto10AFDE47_u = 1;
    for ( ; auto10AFDE47_u <= UnitGroupCount(auto10AFDE47_g, c_unitCountAll) ; auto10AFDE47_u += BoolToInt(lv_returnGroupIter == UnitGroupUnit(auto10AFDE47_g, auto10AFDE47_u)) ) {
        lv_returnGroupIter = UnitGroupUnit(auto10AFDE47_g, auto10AFDE47_u);
        UnitSetPropertyFixed(lv_returnGroupIter, c_unitPropEnergyPercent, 100.0);
    }
    return lv_returnUnitGroup;
}

unitgroup libCOMI_gf_CreateDropAttack (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation) {
    unitgroup autoC8986529_g;
    int autoC8986529_u;
    string auto1FD48043_val;

    // Variable Declarations
    unitgroup lv_attackGroupLocal;
    int lv_dropPodRacePreset;
    unit lv_dropGroupUnitIter;
    int lv_dropGroupIter;
    unitgroup lv_dropGroup;
    unit lv_pylon;
    revealer lv_pylonRevealer;
    unit lv_superWarpGate;
    const fixed lv_c_PowerSourceRadius = 6.5;
    unitgroup lv_airGroup;
    unitgroup lv_attackUnitsZerg;
    unitgroup lv_attackUnitsProtoss;
    unitgroup lv_attackUnitsTerran;
    unit lv_attackUnit;
    unitgroup lv_returnGroup;
    int lv_dropGroupSize;

    // Variable Initialization
    lv_attackGroupLocal = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();
    lv_attackUnitsZerg = UnitGroupEmpty();
    lv_attackUnitsProtoss = UnitGroupEmpty();
    lv_attackUnitsTerran = UnitGroupEmpty();
    lv_returnGroup = UnitGroupEmpty();

    // Implementation
    lv_dropGroupSize = UnitGroupCount(lp_attackGroup, c_unitCountAlive);
    autoC8986529_g = lp_attackGroup;
    autoC8986529_u = 1;
    for ( ; autoC8986529_u <= UnitGroupCount(autoC8986529_g, c_unitCountAll) ; autoC8986529_u += BoolToInt(lv_attackUnit == UnitGroupUnit(autoC8986529_g, autoC8986529_u)) ) {
        lv_attackUnit = UnitGroupUnit(autoC8986529_g, autoC8986529_u);
        auto1FD48043_val = libCOMI_gf_GetUnitRace(lv_attackUnit);
        if (auto1FD48043_val == "Terr") {
            UnitGroupAdd(lv_attackUnitsTerran, lv_attackUnit);
        }
        else if (auto1FD48043_val == "Zerg") {
            UnitGroupAdd(lv_attackUnitsZerg, lv_attackUnit);
        }
        else if (auto1FD48043_val == "Prot") {
            UnitGroupAdd(lv_attackUnitsProtoss, lv_attackUnit);
        }
        else {
        }
    }
    if ((UnitGroupCount(lv_attackUnitsTerran, c_unitCountAlive) > 0)) {
        lv_attackUnitsTerran = libCOMI_gf_CM_CoopAI_CreateDropAttack_Terran(lp_player, lv_attackUnitsTerran, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_attackUnitsProtoss, c_unitCountAlive) > 0)) {
        lv_attackUnitsProtoss = libCOMI_gf_CM_CoopAI_CreateDropAttack_Protoss(lp_player, lv_attackUnitsProtoss, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_attackUnitsZerg, c_unitCountAlive) > 0)) {
        lv_attackUnitsZerg = libCOMI_gf_CM_CoopAI_CreateDropAttack_Zerg(lp_player, lv_attackUnitsZerg, lp_dropLocation);
    }

    UnitGroupAddUnitGroup(lv_returnGroup, lv_attackUnitsProtoss);
    UnitGroupAddUnitGroup(lv_returnGroup, lv_attackUnitsTerran);
    UnitGroupAddUnitGroup(lv_returnGroup, lv_attackUnitsZerg);
    if ((lv_dropGroupSize != UnitGroupCount(lv_returnGroup, c_unitCountAlive))) {
    }

    return lv_returnGroup;
}

unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Terran (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation) {
    unitgroup auto4359500B_g;
    int auto4359500B_u;
    unitgroup auto5C85C125_g;
    int auto5C85C125_u;
    int auto5BC7054E_ae;
    int auto5BC7054E_ai;
    fixed auto9E33C5DC_at;

    // Variable Declarations
    unit lv_dropGroupUnitIter;
    int lv_dropGroupIter;
    unitgroup lv_dropGroup;
    unitgroup lv_airGroup;

    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    auto4359500B_g = lp_attackGroup;
    auto4359500B_u = 1;
    for ( ; auto4359500B_u <= UnitGroupCount(auto4359500B_g, c_unitCountAll) ; auto4359500B_u += BoolToInt(lv_dropGroupUnitIter == UnitGroupUnit(auto4359500B_g, auto4359500B_u)) ) {
        lv_dropGroupUnitIter = UnitGroupUnit(auto4359500B_g, auto4359500B_u);
        if ((UnitFilterMatch(lv_dropGroupUnitIter, 1, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            UnitGroupRemove(lp_attackGroup, lv_dropGroupUnitIter);
            UnitGroupAdd(lv_airGroup, lv_dropGroupUnitIter);
        }

    }
    auto5C85C125_g = lv_airGroup;
    auto5C85C125_u = 1;
    for ( ; auto5C85C125_u <= UnitGroupCount(auto5C85C125_g, c_unitCountAll) ; auto5C85C125_u += BoolToInt(lv_dropGroupUnitIter == UnitGroupUnit(auto5C85C125_g, auto5C85C125_u)) ) {
        lv_dropGroupUnitIter = UnitGroupUnit(auto5C85C125_g, auto5C85C125_u);
        UnitSetPosition(lv_dropGroupUnitIter, lp_dropLocation, false);
        UnitSetHeight(lv_dropGroupUnitIter, 16.0, 0.0);
        UnitSetHeight(lv_dropGroupUnitIter, UnitTypeGetProperty(UnitGetType(lv_dropGroupUnitIter), c_unitPropHeight), 3.0);
    }
    auto5BC7054E_ae = UnitGroupCount(lp_attackGroup, c_unitCountAlive);
    auto5BC7054E_ai = 1;
    lv_dropGroupIter = 1;
    for ( ; ( (auto5BC7054E_ai >= 0 && lv_dropGroupIter <= auto5BC7054E_ae) || (auto5BC7054E_ai <= 0 && lv_dropGroupIter >= auto5BC7054E_ae) ) ; lv_dropGroupIter += auto5BC7054E_ai ) {
        lv_dropGroupUnitIter = UnitGroupUnit(lp_attackGroup, lv_dropGroupIter);
        UnitGroupAdd(lv_dropGroup, lv_dropGroupUnitIter);
        if (((UnitGroupCount(lv_dropGroup, c_unitCountAlive) >= 4) || (lv_dropGroupIter >= UnitGroupCount(lp_attackGroup, c_unitCountAlive)))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropGroup, false, lp_player);
            lv_dropGroup = UnitGroupEmpty();
        }

    }
    UnitGroupAddUnitGroup(lp_attackGroup, lv_airGroup);
    auto9E33C5DC_at = 0;
    while (!((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) && auto9E33C5DC_at <= 10.0) {
        Wait(0.2, c_timeAI);
        auto9E33C5DC_at = auto9E33C5DC_at + 0.2;
    }
    return lp_attackGroup;
}

unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Zerg (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation) {
    unitgroup auto833705E2_g;
    int auto833705E2_u;
    unitgroup auto060D894F_g;
    int auto060D894F_u;
    fixed autoFFDE2D15_at;

    // Variable Declarations
    unit lv_indexAirUnit;
    unit lv_indexGroundUnit;
    actor lv_nydus;
    bool lv_playBirthAnim;
    unitgroup lv_groundUnits;
    unitgroup lv_airUnits;
    unitgroup lv_dropGroup;
    fixed lv_dropSupply;

    // Variable Initialization
    lv_groundUnits = UnitGroupEmpty();
    lv_airUnits = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_airUnits, UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter((1 << c_targetFilterAir), 0, 0, 0), 0));
    auto833705E2_g = lv_airUnits;
    auto833705E2_u = 1;
    for ( ; auto833705E2_u <= UnitGroupCount(auto833705E2_g, c_unitCountAll) ; auto833705E2_u += BoolToInt(lv_indexAirUnit == UnitGroupUnit(auto833705E2_g, auto833705E2_u)) ) {
        lv_indexAirUnit = UnitGroupUnit(auto833705E2_g, auto833705E2_u);
        UnitSetPosition(lv_indexAirUnit, lp_dropLocation, false);
        UnitSetHeight(lv_indexAirUnit, 16.0, 0.0);
        UnitSetHeight(lv_indexAirUnit, UnitTypeGetProperty(UnitGetType(lv_indexAirUnit), c_unitPropHeight), 3.0);
    }
    UnitGroupAddUnitGroup(lv_groundUnits, UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter(0, 0, (1 << c_targetFilterAir), 0), 0));
    auto060D894F_g = lv_groundUnits;
    auto060D894F_u = 1;
    for ( ; auto060D894F_u <= UnitGroupCount(auto060D894F_g, c_unitCountAll) ; auto060D894F_u += BoolToInt(lv_indexGroundUnit == UnitGroupUnit(auto060D894F_g, auto060D894F_u)) ) {
        lv_indexGroundUnit = UnitGroupUnit(auto060D894F_g, auto060D894F_u);
        UnitGroupAdd(lv_dropGroup, lv_indexGroundUnit);
        lv_dropSupply += MaxF(0.5, UnitTypeGetProperty(UnitGetType(lv_indexGroundUnit), c_unitPropSuppliesUsed));
        if (((lv_dropSupply >= 8.0) || (UnitGroupCount(lv_dropGroup, c_unitCountAlive) >= 10))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropGroup, false, lp_player);
            lv_dropGroup = UnitGroupEmpty();
            lv_dropSupply = 0.0;
        }

    }
    if ((UnitGroupCount(lv_dropGroup, c_unitCountAlive) > 0)) {
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropGroup, false, lp_player);
    }

    autoFFDE2D15_at = 0;
    while (!((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) && autoFFDE2D15_at <= 10.0) {
        Wait(0.2, c_timeAI);
        autoFFDE2D15_at = autoFFDE2D15_at + 0.2;
    }
    return lp_attackGroup;
}

unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Protoss (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation) {
    unitgroup autoAA4C4434_g;
    int autoAA4C4434_u;

    // Variable Declarations
    unit lv_warpInIter;
    point lv_origin;

    // Variable Initialization

    // Implementation
    lv_origin = UnitGroupCenterOfGroup(lp_dropGroup);
    autoAA4C4434_g = lp_dropGroup;
    autoAA4C4434_u = 1;
    for ( ; autoAA4C4434_u <= UnitGroupCount(autoAA4C4434_g, c_unitCountAll) ; autoAA4C4434_u += BoolToInt(lv_warpInIter == UnitGroupUnit(autoAA4C4434_g, autoAA4C4434_u)) ) {
        lv_warpInIter = UnitGroupUnit(autoAA4C4434_g, autoAA4C4434_u);
        libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(lv_warpInIter);
        UnitSetPosition(lv_warpInIter, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_warpInIter)), DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_warpInIter))), false);
    }
    Wait(2.0, c_timeAI);
    return lp_dropGroup;
}

trigger auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger = null;
unit auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_lp_unit;

void libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2 (unit lp_unit) {
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_lp_unit = lp_unit;

    if (auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_lp_unit;

    // Implementation
    UnitAbilityEnable(lp_unit, "attack", false);
    UnitAbilityEnable(lp_unit, "move", false);
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetOpacity(1.0, 2.0));
    UnitBehaviorAdd(lp_unit, "ProtossGenericWarpInOut", lp_unit, 1);
    Wait(2.0, c_timeAI);
    UnitBehaviorRemove(lp_unit, "ProtossGenericWarpInOut", 1);
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetOpacity(1.0, 0.0));
    UnitAbilityEnable(lp_unit, "attack", true);
    UnitAbilityEnable(lp_unit, "move", true);
    return true;
}

trigger auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger = null;
unit auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_pylon;
unit auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_superWarpGate;

void libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup (unit lp_pylon, unit lp_superWarpGate) {
    auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_pylon = lp_pylon;
    auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_superWarpGate = lp_superWarpGate;

    if (auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pylon = auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_pylon;
    unit lp_superWarpGate = auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_superWarpGate;

    // Implementation
    Wait(15.0, c_timeAI);
    UnitRemove(lp_pylon);
    UnitRemove(lp_superWarpGate);
    return true;
}

void libCOMI_gf_DropPodWarpInUnitGroup (unitgroup lp_dropPodUnits, point lp_dropLocation) {
    unitgroup auto55FF56CC_g;
    int auto55FF56CC_u;
    string autoD14807CD_val;
    playergroup autoC08EEF33_g;
    int autoC08EEF33_p;
    playergroup auto18A3184F_g;
    int auto18A3184F_p;
    unitgroup autoC809B237_g;
    int autoC809B237_u;

    // Variable Declarations
    unitgroup lv_dropGroupZerg;
    unitgroup lv_dropGroupProtoss;
    unitgroup lv_dropGroupTerran;
    unit lv_dropUnit;
    playergroup lv_attackingPlayers;
    int lv_attackPlayerIter;
    bool lv_dropComplete;

    // Variable Initialization
    lv_dropGroupZerg = UnitGroupEmpty();
    lv_dropGroupProtoss = UnitGroupEmpty();
    lv_dropGroupTerran = UnitGroupEmpty();
    lv_attackingPlayers = PlayerGroupEmpty();

    // Implementation
    auto55FF56CC_g = lp_dropPodUnits;
    auto55FF56CC_u = 1;
    for ( ; auto55FF56CC_u <= UnitGroupCount(auto55FF56CC_g, c_unitCountAll) ; auto55FF56CC_u += BoolToInt(lv_dropUnit == UnitGroupUnit(auto55FF56CC_g, auto55FF56CC_u)) ) {
        lv_dropUnit = UnitGroupUnit(auto55FF56CC_g, auto55FF56CC_u);
        PlayerGroupAdd(lv_attackingPlayers, UnitGetOwner(lv_dropUnit));
        autoD14807CD_val = libCOMI_gf_GetUnitRace(lv_dropUnit);
        if (autoD14807CD_val == "Terr") {
            UnitGroupAdd(lv_dropGroupTerran, lv_dropUnit);
        }
        else if (autoD14807CD_val == "Zerg") {
            UnitGroupAdd(lv_dropGroupZerg, lv_dropUnit);
        }
        else if (autoD14807CD_val == "Prot") {
            UnitGroupAdd(lv_dropGroupProtoss, lv_dropUnit);
        }
        else {
        }
    }
    if ((UnitGroupCount(lv_dropGroupTerran, c_unitCountAlive) > 0)) {
        autoC08EEF33_g = lv_attackingPlayers; 
        autoC08EEF33_p = 1;
        for ( ; autoC08EEF33_p <= PlayerGroupCount(autoC08EEF33_g) ; autoC08EEF33_p += BoolToInt(lv_attackPlayerIter == PlayerGroupPlayer(autoC08EEF33_g, autoC08EEF33_p)) ) {
            lv_attackPlayerIter = PlayerGroupPlayer(autoC08EEF33_g, autoC08EEF33_p);
            libCOMI_gf_CM_CoopAI_AttackForce_DropTerran(lv_attackPlayerIter, UnitGroupFilterPlayer(lv_dropGroupTerran, lv_attackPlayerIter, 0), lp_dropLocation);
        }
    }

    if ((UnitGroupCount(lv_dropGroupProtoss, c_unitCountAlive) > 0)) {
        libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss(lv_dropGroupProtoss, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_dropGroupZerg, c_unitCountAlive) > 0)) {
        auto18A3184F_g = lv_attackingPlayers; 
        auto18A3184F_p = 1;
        for ( ; auto18A3184F_p <= PlayerGroupCount(auto18A3184F_g) ; auto18A3184F_p += BoolToInt(lv_attackPlayerIter == PlayerGroupPlayer(auto18A3184F_g, auto18A3184F_p)) ) {
            lv_attackPlayerIter = PlayerGroupPlayer(auto18A3184F_g, auto18A3184F_p);
            libCOMI_gf_CM_CoopAI_AttackForce_DropZerg(lv_attackPlayerIter, UnitGroupFilterPlayer(lv_dropGroupZerg, lv_attackPlayerIter, 0), lp_dropLocation);
        }
    }

    while (true) {
        lv_dropComplete = true;
        autoC809B237_g = lp_dropPodUnits;
        autoC809B237_u = 1;
        for ( ; autoC809B237_u <= UnitGroupCount(autoC809B237_g, c_unitCountAll) ; autoC809B237_u += BoolToInt(lv_dropUnit == UnitGroupUnit(autoC809B237_g, autoC809B237_u)) ) {
            lv_dropUnit = UnitGroupUnit(autoC809B237_g, autoC809B237_u);
            if ((((UnitGroupHasUnit(lv_dropGroupProtoss, lv_dropUnit) == true) && (UnitAbilityCheck(lv_dropUnit, "move", true) == false)) || (((UnitGroupHasUnit(lv_dropGroupTerran, lv_dropUnit) == true) || (UnitGroupHasUnit(lv_dropGroupZerg, lv_dropUnit) == true)) && (libNtve_gf_UnitIsPaused(lv_dropUnit) == true)))) {
                lv_dropComplete = false;
                break;
            }

        }
        if ((lv_dropComplete == true)) {
            return ;
        }

        Wait(0.25, c_timeGame);
    }
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_player;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropGroup;
point auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropLocation;

void libCOMI_gf_CM_CoopAI_AttackForce_DropTerran (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropGroup = lp_dropGroup;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropLocation = lp_dropLocation;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_player;
    unitgroup lp_dropGroup = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropGroup;
    point lp_dropLocation = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropLocation;

    unitgroup autoB1B09026_g;
    int autoB1B09026_u;
    unitgroup autoB34456F6_g;
    int autoB34456F6_u;
    int autoF00F7A8C_ae;
    int autoF00F7A8C_ai;
    unitgroup auto507559CB_g;
    int auto507559CB_u;

    // Variable Declarations
    unit lv_dropUnit;
    int lv_dropGroupIter;
    unitgroup lv_dropPodGroup;
    unitgroup lv_airGroup;

    // Variable Initialization
    lv_dropPodGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    autoB1B09026_g = lp_dropGroup;
    autoB1B09026_u = 1;
    for ( ; autoB1B09026_u <= UnitGroupCount(autoB1B09026_g, c_unitCountAll) ; autoB1B09026_u += BoolToInt(lv_dropUnit == UnitGroupUnit(autoB1B09026_g, autoB1B09026_u)) ) {
        lv_dropUnit = UnitGroupUnit(autoB1B09026_g, autoB1B09026_u);
        if ((UnitFilterMatch(lv_dropUnit, 1, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            UnitGroupRemove(lp_dropGroup, lv_dropUnit);
            UnitGroupAdd(lv_airGroup, lv_dropUnit);
        }

    }
    autoB34456F6_g = lv_airGroup;
    autoB34456F6_u = 1;
    for ( ; autoB34456F6_u <= UnitGroupCount(autoB34456F6_g, c_unitCountAll) ; autoB34456F6_u += BoolToInt(lv_dropUnit == UnitGroupUnit(autoB34456F6_g, autoB34456F6_u)) ) {
        lv_dropUnit = UnitGroupUnit(autoB34456F6_g, autoB34456F6_u);
        UnitSetPosition(lv_dropUnit, RegionRandomPoint(RegionCircle(lp_dropLocation, 6.0)), false);
        UnitSetHeight(lv_dropUnit, 16.0, 0.0);
        UnitSetHeight(lv_dropUnit, UnitTypeGetProperty(UnitGetType(lv_dropUnit), c_unitPropHeight), 3.0);
        UnitAbilityEnable(lv_dropUnit, "move", false);
    }
    autoF00F7A8C_ae = UnitGroupCount(lp_dropGroup, c_unitCountAlive);
    autoF00F7A8C_ai = 1;
    lv_dropGroupIter = 1;
    for ( ; ( (autoF00F7A8C_ai >= 0 && lv_dropGroupIter <= autoF00F7A8C_ae) || (autoF00F7A8C_ai <= 0 && lv_dropGroupIter >= autoF00F7A8C_ae) ) ; lv_dropGroupIter += autoF00F7A8C_ai ) {
        lv_dropUnit = UnitGroupUnit(lp_dropGroup, lv_dropGroupIter);
        UnitGroupAdd(lv_dropPodGroup, lv_dropUnit);
        if (((UnitGroupCount(lv_dropPodGroup, c_unitCountAlive) >= 4) || (lv_dropGroupIter >= UnitGroupCount(lp_dropGroup, c_unitCountAlive)))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointWithOffsetPolar(lp_dropLocation, RandomFixed(0.0, 5.0), libNtve_gf_RandomAngle()), lv_dropPodGroup, false, lp_player);
            lv_dropPodGroup = UnitGroupEmpty();
        }

    }
    Wait(3.0, c_timeGame);
    auto507559CB_g = lv_airGroup;
    auto507559CB_u = 1;
    for ( ; auto507559CB_u <= UnitGroupCount(auto507559CB_g, c_unitCountAll) ; auto507559CB_u += BoolToInt(lv_dropUnit == UnitGroupUnit(auto507559CB_g, auto507559CB_u)) ) {
        lv_dropUnit = UnitGroupUnit(auto507559CB_g, auto507559CB_u);
        UnitAbilityEnable(lv_dropUnit, "move", true);
    }
    return true;
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_player;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropGroup;
point auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropLocation;

void libCOMI_gf_CM_CoopAI_AttackForce_DropZerg (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropGroup = lp_dropGroup;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropLocation = lp_dropLocation;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_player;
    unitgroup lp_dropGroup = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropGroup;
    point lp_dropLocation = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropLocation;

    unitgroup auto95A2E9D9_g;
    int auto95A2E9D9_u;
    unitgroup auto2020D8C7_g;
    int auto2020D8C7_u;
    unitgroup autoB4130F5B_g;
    int autoB4130F5B_u;

    // Variable Declarations
    unit lv_airUnitIter;
    unit lv_dropUnit;
    unitgroup lv_groundUnits;
    unitgroup lv_airGroup;
    unitgroup lv_dropPodGroup;
    fixed lv_dropPodSupply;

    // Variable Initialization
    lv_groundUnits = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();
    lv_dropPodGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_airGroup, UnitGroupFilter(null, c_playerAny, lp_dropGroup, UnitFilter((1 << c_targetFilterAir), 0, 0, 0), 0));
    auto95A2E9D9_g = lv_airGroup;
    auto95A2E9D9_u = 1;
    for ( ; auto95A2E9D9_u <= UnitGroupCount(auto95A2E9D9_g, c_unitCountAll) ; auto95A2E9D9_u += BoolToInt(lv_airUnitIter == UnitGroupUnit(auto95A2E9D9_g, auto95A2E9D9_u)) ) {
        lv_airUnitIter = UnitGroupUnit(auto95A2E9D9_g, auto95A2E9D9_u);
        UnitSetPosition(lv_airUnitIter, RegionRandomPoint(RegionCircle(lp_dropLocation, 6.0)), false);
        UnitSetHeight(lv_airUnitIter, 16.0, 0.0);
        UnitSetHeight(lv_airUnitIter, UnitTypeGetProperty(UnitGetType(lv_airUnitIter), c_unitPropHeight), 3.0);
        UnitAbilityEnable(lv_airUnitIter, "move", false);
    }
    UnitGroupAddUnitGroup(lv_groundUnits, UnitGroupFilter(null, c_playerAny, lp_dropGroup, UnitFilter(0, 0, (1 << c_targetFilterAir), 0), 0));
    auto2020D8C7_g = lv_groundUnits;
    auto2020D8C7_u = 1;
    for ( ; auto2020D8C7_u <= UnitGroupCount(auto2020D8C7_g, c_unitCountAll) ; auto2020D8C7_u += BoolToInt(lv_dropUnit == UnitGroupUnit(auto2020D8C7_g, auto2020D8C7_u)) ) {
        lv_dropUnit = UnitGroupUnit(auto2020D8C7_g, auto2020D8C7_u);
        UnitGroupAdd(lv_dropPodGroup, lv_dropUnit);
        lv_dropPodSupply += MaxF(0.5, UnitTypeGetProperty(UnitGetType(lv_dropUnit), c_unitPropSuppliesUsed));
        if (((lv_dropPodSupply >= 8.0) || (UnitGroupCount(lv_dropPodGroup, c_unitCountAlive) >= 10))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, PointWithOffsetPolar(lp_dropLocation, RandomFixed(0.0, 5.0), libNtve_gf_RandomAngle()), lv_dropPodGroup, false, lp_player);
            lv_dropPodGroup = UnitGroupEmpty();
            lv_dropPodSupply = 0.0;
        }

    }
    if ((UnitGroupCount(lv_dropPodGroup, c_unitCountAlive) > 0)) {
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, PointWithOffsetPolar(lp_dropLocation, RandomFixed(0.0, 5.0), libNtve_gf_RandomAngle()), lv_dropPodGroup, false, lp_player);
    }

    Wait(3.0, c_timeGame);
    autoB4130F5B_g = lv_airGroup;
    autoB4130F5B_u = 1;
    for ( ; autoB4130F5B_u <= UnitGroupCount(autoB4130F5B_g, c_unitCountAll) ; autoB4130F5B_u += BoolToInt(lv_dropUnit == UnitGroupUnit(autoB4130F5B_g, autoB4130F5B_u)) ) {
        lv_dropUnit = UnitGroupUnit(autoB4130F5B_g, autoB4130F5B_u);
        UnitAbilityEnable(lv_dropUnit, "move", true);
    }
    return true;
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger = null;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropGroup;
point auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropLocation;

void libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss (unitgroup lp_dropGroup, point lp_dropLocation) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropGroup = lp_dropGroup;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropLocation = lp_dropLocation;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_dropGroup = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropGroup;
    point lp_dropLocation = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropLocation;

    unitgroup auto38195713_g;
    int auto38195713_u;

    // Variable Declarations
    unit lv_dropUnit;
    point lv_origin;

    // Variable Initialization

    // Implementation
    lv_origin = UnitGroupCenterOfGroup(lp_dropGroup);
    auto38195713_g = lp_dropGroup;
    auto38195713_u = 1;
    for ( ; auto38195713_u <= UnitGroupCount(auto38195713_g, c_unitCountAll) ; auto38195713_u += BoolToInt(lv_dropUnit == UnitGroupUnit(auto38195713_g, auto38195713_u)) ) {
        lv_dropUnit = UnitGroupUnit(auto38195713_g, auto38195713_u);
        libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(lv_dropUnit);
        UnitSetPosition(lv_dropUnit, PointWithOffsetPolar(lp_dropLocation, DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_dropUnit)), AngleBetweenPoints(lv_origin, UnitGetPosition(lv_dropUnit))), false);
    }
    return true;
}

void libCOMI_gf_CM_CoopAI_SetupAttackForce (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    int autoD7B02B25_ae;
    int autoD7B02B25_ai;

    // Variable Declarations
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    string lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    unit[3] lv_transportCurrent;
    unitgroup lv_transportGroup;
    string lv_transportType;
    unit lv_unitCreated;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();
    lv_transportGroup = UnitGroupEmpty();

    // Implementation
    PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
    PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
    autoD7B02B25_ae = PlayerGroupCount(lv_attackingPlayers);
    autoD7B02B25_ai = 1;
    lv_playerIter = 1;
    for ( ; ( (autoD7B02B25_ai >= 0 && lv_playerIter <= autoD7B02B25_ae) || (autoD7B02B25_ai <= 0 && lv_playerIter >= autoD7B02B25_ae) ) ; lv_playerIter += autoD7B02B25_ai ) {
        lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
        lv_resourcesForPlayer[lv_playerIter] = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player));
        lv_totalResourceAmount += lv_resourcesForPlayer[lv_playerIter];
    }
    if ((lp_playerA == c_playerAny) && (lp_playerB == c_playerAny)) {
        return ;
    }
    else if ((lp_playerA == c_playerAny)) {
        lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerB, lp_techLevel);
    }
    else if ((lp_playerB == c_playerAny)) {
        lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerA, lp_techLevel);
    }
    else if ((libCOMI_gv_cM_CoopAIPlayer_Commander[lp_playerA] == libCOMI_gv_cM_CoopAIPlayer_Commander[lp_playerB])) {
        lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerA, lp_techLevel);
    }
    else if (true) {
        if ((RandomInt(0, 1) == 1)) {
            lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerA, lp_techLevel);
        }
        else {
            lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerB, lp_techLevel);
        }
    }
    if ((lp_playerA == lp_playerB)) {
        lv_totalResourceAmount = (lv_totalResourceAmount * 2.0);
    }

    if ((lv_commanderUnitTier == null)) {
        breakpoint;
    }

    libCOMI_gf_CM_CoopAI_SetupCoopAttackForceDataTable(lv_attackingPlayers, lv_totalResourceAmount, lv_commanderUnitTier);
}

void libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    // Deprecated
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lp_playerA, lp_playerB, lp_resourceSize, lp_techLevel, lp_spawnLocation, true);
}

void libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2 (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, bool lp_dropWarpin) {
    int auto2AA98C2E_ae;
    int auto2AA98C2E_ai;
    int autoE237A2DD_ae;
    int autoE237A2DD_ai;
    string auto514B4646_val;

    // Variable Declarations
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    string lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();

    // Implementation
    PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
    PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
    libCOMI_gf_CM_CoopAI_SetupAttackForce(lp_playerA, lp_playerB, lp_resourceSize, lp_techLevel, lp_spawnLocation);
    auto2AA98C2E_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    auto2AA98C2E_ai = 1;
    lv_unitTypeIter = 1;
    for ( ; ( (auto2AA98C2E_ai >= 0 && lv_unitTypeIter <= auto2AA98C2E_ae) || (auto2AA98C2E_ai <= 0 && lv_unitTypeIter >= auto2AA98C2E_ae) ) ; lv_unitTypeIter += auto2AA98C2E_ai ) {
        lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
        lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
        while ((lv_unitCount > 0)) {
            autoE237A2DD_ae = PlayerGroupCount(lv_attackingPlayers);
            autoE237A2DD_ai = 1;
            lv_playerIter = 1;
            for ( ; ( (autoE237A2DD_ai >= 0 && lv_playerIter <= autoE237A2DD_ae) || (autoE237A2DD_ai <= 0 && lv_playerIter >= autoE237A2DD_ae) ) ; lv_playerIter += autoE237A2DD_ai ) {
                if ((lv_unitCount > 0)) {
                    lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                    if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                        UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, lp_spawnLocation, libNtve_gf_RandomAngle());
                        auto514B4646_val = lv_unitTypeToCreate;
                        if (auto514B4646_val == "Scourge") {
                            if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                            }
                            else {
                                libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                            }
                        }
                        else {
                        }
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        UnitGroupAdd(lv_attackForce, UnitLastCreated());
                        lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                        lv_unitCount -= 1;
                    }

                }

            }
        }
    }
    libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
    DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
    if ((lp_dropWarpin == true)) {
        libCOMI_gf_DropPodWarpInUnitGroup(lv_attackForce, lp_spawnLocation);
    }

}

void libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, string lp_transportType) {
    int autoEDB32825_ae;
    int autoEDB32825_ai;
    int auto4161A881_ae;
    int auto4161A881_ai;
    string auto43B5D7F2_val;

    // Variable Declarations
    playergroup lv_attackingPlayers;
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    int lv_unitTypeIter;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    unit[3] lv_transportCurrent;
    string lv_transportType;
    unit lv_unitCreated;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();

    // Implementation
    PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
    PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
    libCOMI_gf_CM_CoopAI_SetupAttackForce(lp_playerA, lp_playerB, lp_resourceSize, lp_techLevel, lp_spawnLocation);
    libCOMI_gv_cM_CoopAI_AttackForce_Transports = UnitGroupEmpty();
    autoEDB32825_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    autoEDB32825_ai = 1;
    lv_unitTypeIter = 1;
    for ( ; ( (autoEDB32825_ai >= 0 && lv_unitTypeIter <= autoEDB32825_ae) || (autoEDB32825_ai <= 0 && lv_unitTypeIter >= autoEDB32825_ae) ) ; lv_unitTypeIter += autoEDB32825_ai ) {
        lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
        lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
        while ((lv_unitCount > 0)) {
            auto4161A881_ae = PlayerGroupCount(lv_attackingPlayers);
            auto4161A881_ai = 1;
            lv_playerIter = 1;
            for ( ; ( (auto4161A881_ai >= 0 && lv_playerIter <= auto4161A881_ae) || (auto4161A881_ai <= 0 && lv_playerIter >= auto4161A881_ae) ) ; lv_playerIter += auto4161A881_ai ) {
                if ((lv_unitCount > 0)) {
                    lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                    if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                        if ((libCOMI_gf_UnitMoverExists(lv_unitTypeToCreate, "Fly") == false)) {
                            if (((lv_transportCurrent[lv_playerIter] == null) || ((UnitCargoValue(lv_transportCurrent[lv_playerIter], c_unitCargoSpaceFree) * 0.75) < (CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitTypeToCreate, "CargoSize", lv_player) + 1)))) {
                                UnitCreate(1, lp_transportType, c_unitCreateIgnorePlacement, lv_player, lp_spawnLocation, PointGetFacing(lp_spawnLocation));
                                lv_transportCurrent[lv_playerIter] = UnitLastCreated();
                                UnitGroupAdd(lv_attackForce, lv_transportCurrent[lv_playerIter]);
                                UnitGroupAdd(libCOMI_gv_cM_CoopAI_AttackForce_Transports, lv_transportCurrent[lv_playerIter]);
                            }

                            UnitCargoCreate(lv_transportCurrent[lv_playerIter], lv_unitTypeToCreate, 1);
                            lv_unitCreated = UnitCargoLastCreated();
                        }
                        else {
                            UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, lp_spawnLocation, libNtve_gf_RandomAngle());
                            auto43B5D7F2_val = lv_unitTypeToCreate;
                            if (auto43B5D7F2_val == "Scourge") {
                                if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                                }
                                else {
                                    libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                                }
                            }
                            else {
                            }
                            lv_unitCreated = UnitLastCreated();
                        }
                        UnitSetPropertyFixed(lv_unitCreated, c_unitPropEnergyPercent, 100.0);
                        UnitGroupAdd(lv_attackForce, lv_unitCreated);
                        lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                        lv_unitCount -= 1;
                    }

                }

            }
        }
    }
    libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
    DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
}

string libCOMI_gf_CM_CoopAI_AttackForce_ForceName () {
    // Implementation
    return ("CoopAI_AttackForce");
}

unitgroup libCOMI_gf_LastCreatedCoopAttackForce () {
    // Variable Declarations
    unitgroup lv_attackForce;

    // Variable Initialization
    lv_attackForce = UnitGroupEmpty();

    // Implementation
    lv_attackForce = DataTableGetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName());
    return lv_attackForce;
}

unitgroup libCOMI_gf_LastCreatedCoopAttackForceTransports () {
    // Implementation
    return libCOMI_gv_cM_CoopAI_AttackForce_Transports;
}

void libCOMI_gf_SendAttackWaveusingCoopAttackForce (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait) {
    unitgroup autoD41D4580_g;
    int autoD41D4580_u;
    playergroup autoA3F04005_g;
    int autoA3F04005_p;

    // Variable Declarations
    unit lv_attackForceIter;
    playergroup lv_attackingPlayers;
    int lv_playerIter;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();

    // Implementation
    autoD41D4580_g = lp_attackForce;
    autoD41D4580_u = 1;
    for ( ; autoD41D4580_u <= UnitGroupCount(autoD41D4580_g, c_unitCountAll) ; autoD41D4580_u += BoolToInt(lv_attackForceIter == UnitGroupUnit(autoD41D4580_g, autoD41D4580_u)) ) {
        lv_attackForceIter = UnitGroupUnit(autoD41D4580_g, autoD41D4580_u);
        PlayerGroupAdd(lv_attackingPlayers, UnitGetOwner(lv_attackForceIter));
    }
    autoA3F04005_g = lv_attackingPlayers; 
    autoA3F04005_p = 1;
    for ( ; autoA3F04005_p <= PlayerGroupCount(autoA3F04005_g) ; autoA3F04005_p += BoolToInt(lv_playerIter == PlayerGroupPlayer(autoA3F04005_g, autoA3F04005_p)) ) {
        lv_playerIter = PlayerGroupPlayer(autoA3F04005_g, autoA3F04005_p);
        libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack(lv_playerIter, UnitGroupFilterPlayer(lp_attackForce, lv_playerIter, 0), lp_time, lp_waitDontWait);
    }
    libCOMI_gf_CM_CoopAI_AttackForce_ClearWaypointList();
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_player;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_attackingUnits;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_time;
bool auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_waitDontWait;

void libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack (int lp_player, unitgroup lp_attackingUnits, int lp_time, bool lp_waitDontWait) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_attackingUnits = lp_attackingUnits;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_time = lp_time;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_waitDontWait = lp_waitDontWait;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_player;
    unitgroup lp_attackingUnits = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_attackingUnits;
    int lp_time = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_time;
    bool lp_waitDontWait = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_waitDontWait;

    int autoF3D226E7_ae;
    int autoF3D226E7_ai;
    unitgroup autoDBAFA17A_g;
    int autoDBAFA17A_u;

    // Variable Declarations
    unit lv_attackingUnitIter;
    int lv_wayPointIter;

    // Variable Initialization

    // Implementation
    AIAttackWaveSetGatherPoint(lp_player, UnitGroupCenterOfGroup(lp_attackingUnits));
    autoF3D226E7_ae = libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal();
    autoF3D226E7_ai = 1;
    lv_wayPointIter = 1;
    for ( ; ( (autoF3D226E7_ai >= 0 && lv_wayPointIter <= autoF3D226E7_ae) || (autoF3D226E7_ai <= 0 && lv_wayPointIter >= autoF3D226E7_ae) ) ; lv_wayPointIter += autoF3D226E7_ai ) {
        if ((libCOMI_gf_CM_CoopAI_AttackForce_GetUseTransport(lv_wayPointIter) == false)) {
            AIAttackWaveAddWaypoint(lp_player, libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint(lv_wayPointIter), false);
        }
        else {
            AIAttackWaveAddWaypoint(lp_player, libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint(lv_wayPointIter), true);
        }
    }
    autoDBAFA17A_g = lp_attackingUnits;
    autoDBAFA17A_u = 1;
    for ( ; autoDBAFA17A_u <= UnitGroupCount(autoDBAFA17A_g, c_unitCountAll) ; autoDBAFA17A_u += BoolToInt(lv_attackingUnitIter == UnitGroupUnit(autoDBAFA17A_g, autoDBAFA17A_u)) ) {
        lv_attackingUnitIter = UnitGroupUnit(autoDBAFA17A_g, autoDBAFA17A_u);
        AIAttackWaveUseUnit(lp_player, lv_attackingUnitIter);
    }
    AIAttackWaveSend(lp_player, lp_time, lp_waitDontWait);
    return true;
}

void libCOMI_gf_AddAttackForceWaypoint (point lp_waypoint, bool lp_useTransport) {
    // Variable Declarations
    int lv_waypointIndex;

    // Variable Initialization

    // Implementation
    lv_waypointIndex = (libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal() + 1);
    libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal(lv_waypointIndex);
    libCOMI_gf_CM_CoopAI_AttackForce_SetWaypoint(lp_waypoint, lv_waypointIndex);
    if ((lp_useTransport == false)) {
        DataTableSetBool(true, libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName(lv_waypointIndex), false);
    }
    else {
        DataTableSetBool(true, libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName(lv_waypointIndex), true);
    }
}

void libCOMI_gf_CM_CoopAI_AttackForce_ClearWaypointList () {
    // Implementation
    libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal(0);
}

point libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint (int lp_pARAM_AAAAAAAAAA) {
    // Implementation
    return DataTableGetPoint(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointName(lp_pARAM_AAAAAAAAAA));
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetWaypoint (point lp_waypoint, int lp_index) {
    // Implementation
    DataTableSetPoint(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointName(lp_index), lp_waypoint);
}

string libCOMI_gf_CM_CoopAI_AttackForce_WaypointName (int lp_index) {
    // Implementation
    return ("CoopAI_AttackForce_Waypoint" + IntToString(lp_index));
}

string libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName (int lp_waypointIndex) {
    // Implementation
    return ("CoopAI_AttackForce_Waypoint_ForceTransport" + IntToString(lp_waypointIndex));
}

bool libCOMI_gf_CM_CoopAI_AttackForce_GetUseTransport (int lp_waypointIndex) {
    // Implementation
    return DataTableGetBool(true, libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName(lp_waypointIndex));
}

string libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName () {
    // Implementation
    return ("CoopAI_AttackForce_WaypointTotal");
}

int libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal () {
    // Implementation
    return DataTableGetInt(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName());
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal (int lp_waypointIndex) {
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName(), lp_waypointIndex);
}

string libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit (int lp_index) {
    // Implementation
    return ("CoopAI_AttackForce_Wave_Unit_" + IntToString(lp_index));
}

string libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count (int lp_index) {
    // Implementation
    return ("CoopAI_AttackForce_Wave_Count_" + IntToString(lp_index));
}

string libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name (int lp_unitTypeIndex) {
    // Implementation
    return ("CoopAI_AttackForce_Wave_ExcludedPlayers_" + IntToString(lp_unitTypeIndex));
}

string libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name () {
    // Implementation
    return ("CoopAI_AttackForce_Wave_UnitTypeTotal");
}

void libCOMI_gf_CM_CoopAI_SetupCoopAttackForceDataTable (playergroup lp_attackForcePlayers, fixed lp_resourceAllocation, string lp_commanderUnitTier) {
    int init_i;

    int auto4387DFC8_ae;
    int auto4387DFC8_ai;
    int auto45C59D69_ae;
    int auto45C59D69_ai;
    playergroup auto5FB13331_g;
    int auto5FB13331_p;
    int auto90F247F5_ae;
    int auto90F247F5_ai;
    playergroup auto85E16615_g;
    int auto85E16615_p;
    string autoAFAD9377_val;
    int auto2A8D916D_ae;
    int auto2A8D916D_ai;
    int autoEA202307_ae;
    int autoEA202307_ai;
    int auto39559AED_ae;
    int auto39559AED_ai;
    int auto91C8F413_ae;
    int auto91C8F413_ai;

    // Variable Declarations
    string lv_unitType;
    fixed lv_waveResourceTotal;
    fixed lv_waveResourceUsed;
    string lv_commanderTier;
    int lv_unitTierIter;
    const int lv_c_WaveUnitCount = 8;
    string[lv_c_WaveUnitCount + 1] lv_unitTypesForWave;
    fixed[lv_c_WaveUnitCount + 1] lv_unitTypePercentBase;
    fixed[lv_c_WaveUnitCount + 1] lv_unitTypePercentRandom;
    int lv_c_unitTypePerWaveLimit_Max;
    int[lv_c_WaveUnitCount + 1] lv_unitTypePerWaveLimit;
    int lv_unitTypeIter;
    int lv_unitTypeLimitIter;
    int lv_indexUnitType;
    string lv_unitTypeTest;
    string lv_unitTypeTestAlternate;
    int lv_difficulty;
    int lv_difficultyAsInt;
    int lv_unitPercentBaseIter;
    int lv_unitPercentBaseCreateCount;
    int lv_unitPercentBaseCreateCountSpawnIndex;
    fixed lv_unitPercentRandomPick;
    string lv_randomUnitType;
    int lv_randomUnitTryCount;
    int lv_randomUnitIter;
    bool lv_unitAvailableOnDifficulty;
    int lv_counterUnitTypeIndex;
    string[19] lv_counterTypes;
    int[19] lv_counterTypeDesiredAmount;
    fixed[19] lv_counterTypeDesiredAmountWeighted;
    int lv_counterUnitDesiredTotal;
    int lv_counterIter;
    int lv_counterSpawnCount;
    string lv_aIDetector;
    int lv_playerIter;
    playergroup lv_attackForcePlayers;
    string lv_debugString;

    // Variable Initialization
    lv_c_unitTypePerWaveLimit_Max = 99999;
    for (init_i = 0; init_i <= lv_c_WaveUnitCount; init_i += 1) {
        lv_unitTypePerWaveLimit[init_i] = lv_c_unitTypePerWaveLimit_Max;
    }
    lv_difficulty = 2;
    lv_attackForcePlayers = PlayerGroupEmpty();
    lv_debugString = "";

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_attackForcePlayers, lv_attackForcePlayers);
    lv_commanderTier = lp_commanderUnitTier;
    lv_waveResourceTotal = lp_resourceAllocation;
    if ((lv_waveResourceTotal == -1)) {
        TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_7E582714"), true);
    }

    auto4387DFC8_ae = UserDataFieldValueCount("CoopAICommanderTiers", "PhaseUnits");
    auto4387DFC8_ai = 1;
    lv_unitTierIter = 1;
    for ( ; ( (auto4387DFC8_ai >= 0 && lv_unitTierIter <= auto4387DFC8_ae) || (auto4387DFC8_ai <= 0 && lv_unitTierIter >= auto4387DFC8_ae) ) ; lv_unitTierIter += auto4387DFC8_ai ) {
        if ((lv_unitType == null)) {
            break;
        }

    }
    lv_indexUnitType = 1;
    auto45C59D69_ae = UserDataFieldValueCount("CoopAICommanderTiers", "PhaseUnits");
    auto45C59D69_ai = 1;
    lv_unitTypeIter = 1;
    for ( ; ( (auto45C59D69_ai >= 0 && lv_unitTypeIter <= auto45C59D69_ae) || (auto45C59D69_ai <= 0 && lv_unitTypeIter >= auto45C59D69_ae) ) ; lv_unitTypeIter += auto45C59D69_ai ) {
        lv_unitTypeTest = UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnits", lv_unitTypeIter);
        if ((lv_unitTypeTest != null)) {
            lv_unitTypeTestAlternate = UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternate", lv_unitTypeIter);
            if ((lv_unitTypeTestAlternate != null) && (RandomFixed(0.0, 1.0) < UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternateChance", lv_unitTierIter))) {
                lv_unitTypeTest = lv_unitTypeTestAlternate;
            }

            auto5FB13331_g = lv_attackForcePlayers; 
            auto5FB13331_p = 1;
            for ( ; auto5FB13331_p <= PlayerGroupCount(auto5FB13331_g) ; auto5FB13331_p += BoolToInt(lv_playerIter == PlayerGroupPlayer(auto5FB13331_g, auto5FB13331_p)) ) {
                lv_playerIter = PlayerGroupPlayer(auto5FB13331_g, auto5FB13331_p);
                lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lv_playerIter);
                lv_difficultyAsInt = libCOOC_gf_CC_DifficultyIndex(lv_difficulty);
                if ((lv_difficultyAsInt >= UserDataGetInt("CoopAICommanderTiers", lv_commanderTier, "minDifficulty", lv_unitTypeIter))) {
                    lv_unitAvailableOnDifficulty = true;
                    lv_unitTypesForWave[lv_indexUnitType] = lv_unitTypeTest;
                    lv_unitTypePercentBase[lv_indexUnitType] += UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PercentOfWaveBase", lv_unitTypeIter);
                    lv_unitTypePercentRandom[lv_indexUnitType] += UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PercentOfWaveRandom", lv_unitTypeIter);
                    auto90F247F5_ae = UserDataInstanceCount("CoopAIAttackWaveUnitLimits");
                    auto90F247F5_ai = 1;
                    lv_unitTypeLimitIter = 1;
                    for ( ; ( (auto90F247F5_ai >= 0 && lv_unitTypeLimitIter <= auto90F247F5_ae) || (auto90F247F5_ai <= 0 && lv_unitTypeLimitIter >= auto90F247F5_ae) ) ; lv_unitTypeLimitIter += auto90F247F5_ai ) {
                        if ((lv_unitTypesForWave[lv_indexUnitType] == UserDataGetUnit("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "UnitToLimit", 1))) {
                            if ((lv_unitTypePerWaveLimit[lv_indexUnitType] == lv_c_unitTypePerWaveLimit_Max)) {
                                lv_unitTypePerWaveLimit[lv_indexUnitType] = UserDataGetInt("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "LimitPerDifficulty", lv_difficultyAsInt);
                            }
                            else {
                                lv_unitTypePerWaveLimit[lv_indexUnitType] += UserDataGetInt("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "LimitPerDifficulty", lv_difficultyAsInt);
                            }
                            break;
                        }

                    }
                }
                else {
                    libCOMI_gf_CM_CoopAI_AttackForce_SetExcludedPlayers(PlayerGroupSingle(lv_playerIter), lv_unitTypesForWave[lv_indexUnitType]);
                }
            }
            if ((lv_unitAvailableOnDifficulty == true)) {
                lv_unitAvailableOnDifficulty = false;
                lv_unitTypePercentBase[lv_indexUnitType] /= PlayerGroupCount(lv_attackForcePlayers);
                lv_unitTypePercentRandom[lv_indexUnitType] /= PlayerGroupCount(lv_attackForcePlayers);
                lv_unitTypePercentRandom[lv_indexUnitType] += lv_unitTypePercentRandom[(lv_indexUnitType - 1)];
                lv_indexUnitType += 1;
            }

        }

    }
    lv_indexUnitType -= 1;
    auto85E16615_g = lv_attackForcePlayers; 
    auto85E16615_p = 1;
    for ( ; auto85E16615_p <= PlayerGroupCount(auto85E16615_g) ; auto85E16615_p += BoolToInt(lv_playerIter == PlayerGroupPlayer(auto85E16615_g, auto85E16615_p)) ) {
        lv_playerIter = PlayerGroupPlayer(auto85E16615_g, auto85E16615_p);
        if ((PlayerRace(lv_playerIter) != "Terr") && (libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection == true)) {
            autoAFAD9377_val = PlayerRace(lv_playerIter);
            if (autoAFAD9377_val == "Prot") {
                lv_aIDetector = "Observer";
            }
            else if (autoAFAD9377_val == "Zerg") {
                lv_aIDetector = "Overseer";
            }
            else {
            }
            libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType(lv_aIDetector, libCOMI_gf_MinimumDifficultyValueCoopInteger(RandomInt(0, 1), RandomInt(0, 1), 1, 1, 0, 0));
            break;
        }

    }
    auto2A8D916D_ae = lv_indexUnitType;
    auto2A8D916D_ai = 1;
    lv_unitPercentBaseIter = 1;
    for ( ; ( (auto2A8D916D_ai >= 0 && lv_unitPercentBaseIter <= auto2A8D916D_ae) || (auto2A8D916D_ai <= 0 && lv_unitPercentBaseIter >= auto2A8D916D_ae) ) ; lv_unitPercentBaseIter += auto2A8D916D_ai ) {
        if ((lv_waveResourceUsed > lv_waveResourceTotal)) {
            TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_6C078B91"), libCOMI_gv_showAIDebugging);
            break;
        }

        if ((UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene) > 0)) {
            lv_unitPercentBaseCreateCount = MaxI(TruncI((lv_unitTypePercentBase[lv_unitPercentBaseIter] * lv_waveResourceTotal / UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene))), 1);
        }
        else {
            breakpoint;
            lv_unitPercentBaseCreateCount = TruncI((lv_unitTypePercentBase[lv_unitPercentBaseIter] * lv_waveResourceTotal / 125.0));
        }
        autoEA202307_ae = lv_unitPercentBaseCreateCount;
        autoEA202307_ai = 1;
        lv_unitPercentBaseCreateCountSpawnIndex = 1;
        for ( ; ( (autoEA202307_ai >= 0 && lv_unitPercentBaseCreateCountSpawnIndex <= autoEA202307_ae) || (autoEA202307_ai <= 0 && lv_unitPercentBaseCreateCountSpawnIndex >= autoEA202307_ae) ) ; lv_unitPercentBaseCreateCountSpawnIndex += autoEA202307_ai ) {
            if ((lv_unitTypePerWaveLimit[lv_unitPercentBaseIter] > 0)) {
                lv_unitTypePerWaveLimit[lv_unitPercentBaseIter] -= 1;
                lv_waveResourceUsed += UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene);
                libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType(lv_unitTypesForWave[lv_unitPercentBaseIter], 1);
                if ((lv_waveResourceUsed > lv_waveResourceTotal)) {
                    TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_46B4291D"), libCOMI_gv_showAIDebugging);
                    break;
                }

            }

        }
    }
    while (true) {
        if ((lv_waveResourceUsed < lv_waveResourceTotal)) {
            if ((lv_randomUnitTryCount <= 100)) {
                lv_unitPercentRandomPick = RandomFixed(0.01, lv_unitTypePercentRandom[lv_indexUnitType]);
                auto91C8F413_ae = lv_indexUnitType;
                auto91C8F413_ai = 1;
                lv_randomUnitIter = 1;
                for ( ; ( (auto91C8F413_ai >= 0 && lv_randomUnitIter <= auto91C8F413_ae) || (auto91C8F413_ai <= 0 && lv_randomUnitIter >= auto91C8F413_ae) ) ; lv_randomUnitIter += auto91C8F413_ai ) {
                    if ((lv_unitTypePercentRandom[lv_randomUnitIter] > lv_unitPercentRandomPick) && (lv_unitTypePerWaveLimit[lv_randomUnitIter] > 0)) {
                        lv_randomUnitType = lv_unitTypesForWave[lv_randomUnitIter];
                        break;
                    }

                }
            }
            else {
                auto39559AED_ae = lv_indexUnitType;
                auto39559AED_ai = 1;
                lv_randomUnitIter = 1;
                for ( ; ( (auto39559AED_ai >= 0 && lv_randomUnitIter <= auto39559AED_ae) || (auto39559AED_ai <= 0 && lv_randomUnitIter >= auto39559AED_ae) ) ; lv_randomUnitIter += auto39559AED_ai ) {
                    if ((lv_unitTypePercentRandom[lv_randomUnitIter] != 0.0) && (lv_unitTypePerWaveLimit[lv_randomUnitIter] > 0)) {
                        lv_randomUnitType = lv_unitTypesForWave[lv_randomUnitIter];
                        break;
                    }

                }
            }
            if ((lv_randomUnitType == null)) {
                lv_randomUnitTryCount += 1;
                continue;
            }

            if ((lv_randomUnitType != null)) {
                lv_waveResourceUsed += UnitTypeGetCost(lv_randomUnitType, c_unitCostSumMineralsVespene);
                lv_unitTypePerWaveLimit[lv_randomUnitIter] -= 1;
                libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType(lv_randomUnitType, 1);
            }

        }
        else {
            TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_29DD5D09"), libCOMI_gv_showAIDebugging);
            break;
        }
    }
}

string libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType (int lp_unitTypeIndex) {
    // Variable Declarations
    string lv_unitTypeAsString;
    string lv_unitTypeAsGameLink;

    // Variable Initialization
    lv_unitTypeAsString = "";

    // Implementation
    lv_unitTypeAsString = DataTableGetString(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit(lp_unitTypeIndex));
    lv_unitTypeAsGameLink = (lv_unitTypeAsString);
    return lv_unitTypeAsGameLink;
}

int libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex (string lp_unitType) {
    int autoCD256A13_ae;
    int autoCD256A13_ai;

    // Variable Declarations
    int lv_unitTypeIter;

    // Variable Initialization

    // Implementation
    autoCD256A13_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    autoCD256A13_ai = 1;
    lv_unitTypeIter = 1;
    for ( ; ( (autoCD256A13_ai >= 0 && lv_unitTypeIter <= autoCD256A13_ae) || (autoCD256A13_ai <= 0 && lv_unitTypeIter >= autoCD256A13_ae) ) ; lv_unitTypeIter += autoCD256A13_ai ) {
        if ((libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter) == lp_unitType)) {
            return lv_unitTypeIter;
        }

    }
    return libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable;
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex (string lp_unitType, int lp_index) {
    // Implementation
    DataTableSetString(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit(lp_index), (lp_unitType));
    libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal((libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount() + 1));
}

int libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount (int lp_index) {
    // Implementation
    if ((DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index)) > 0)) {
        return DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index));
    }
    else {
        return libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable;
    }
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount (int lp_index, int lp_count, int lp_relativeAbsolute) {
    int auto5A67C010_val;

    // Implementation
    auto5A67C010_val = lp_relativeAbsolute;
    if (auto5A67C010_val == libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative) {
        DataTableSetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index), (DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index)) + lp_count));
    }
    else if (auto5A67C010_val == libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Absolute) {
        DataTableSetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index), lp_count);
    }
    else {
    }
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetExcludedPlayers (playergroup lp_excludePlayers, string lp_unitType) {
    // Variable Declarations
    int lv_unitTypeIndex;
    playergroup lv_alreadyExcludedPlayers;

    // Variable Initialization
    lv_alreadyExcludedPlayers = PlayerGroupEmpty();

    // Implementation
    lv_unitTypeIndex = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex(lp_unitType);
    lv_alreadyExcludedPlayers = libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIndex);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_excludePlayers, lv_alreadyExcludedPlayers);
    DataTableSetPlayerGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name(lv_unitTypeIndex), lv_alreadyExcludedPlayers);
}

playergroup libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers (int lp_unitTypeIndex) {
    // Implementation
    return DataTableGetPlayerGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name(lp_unitTypeIndex));
}

void libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType (string lp_unitType, int lp_count) {
    // Variable Declarations
    int lv_unitTypeWaveIndex;

    // Variable Initialization

    // Implementation
    lv_unitTypeWaveIndex = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex(lp_unitType);
    if ((lv_unitTypeWaveIndex != libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable)) {
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount(lv_unitTypeWaveIndex, lp_count, libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative);
    }
    else {
        lv_unitTypeWaveIndex = (libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount() + 1);
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex(lp_unitType, lv_unitTypeWaveIndex);
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount(lv_unitTypeWaveIndex, lp_count, libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative);
    }
}

int libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount () {
    // Implementation
    return DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name());
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal (int lp_unitTypeTotal) {
    // Implementation
    DataTableSetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name(), lp_unitTypeTotal);
}

void libCOMI_gf_CM_CoopAI_AttackForce_ClearTable () {
    int autoAFA74759_ae;
    int autoAFA74759_ai;

    // Variable Declarations
    int lv_unitTypeIndex;

    // Variable Initialization

    // Implementation
    autoAFA74759_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    autoAFA74759_ai = 1;
    lv_unitTypeIndex = 1;
    for ( ; ( (autoAFA74759_ai >= 0 && lv_unitTypeIndex <= autoAFA74759_ae) || (autoAFA74759_ai <= 0 && lv_unitTypeIndex >= autoAFA74759_ae) ) ; lv_unitTypeIndex += autoAFA74759_ai ) {
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount(lv_unitTypeIndex, 0, libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Absolute);
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex(null, lv_unitTypeIndex);
    }
    libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal(0);
}

void libCOMI_gf_CM_CoopAI_CreateAttackWave2 (int lp_player, bool lp_instantAttackGroup, fixed lp_resourceAllocation, string lp_commanderUnitTier) {
    int init_i;

    int auto4A308EFB_ae;
    int auto4A308EFB_ai;
    int autoA609CF0B_ae;
    int autoA609CF0B_ai;
    int autoE4FCA90D_ae;
    int autoE4FCA90D_ai;
    string autoA31F433D_val;
    int auto874C8181_ae;
    int auto874C8181_ai;
    int autoA1B74908_ae;
    int autoA1B74908_ai;
    int autoE2E03574_ae;
    int autoE2E03574_ai;
    int autoF55C4EBF_ae;
    int autoF55C4EBF_ai;

    // Variable Declarations
    string lv_unitType;
    fixed lv_waveResourceTotal;
    fixed lv_waveResourceUsed;
    string lv_commanderTier;
    int lv_unitTierIter;
    const int lv_c_WaveUnitCount = 8;
    string[lv_c_WaveUnitCount + 1] lv_unitTypesForWave;
    fixed[lv_c_WaveUnitCount + 1] lv_unitTypePercentBase;
    fixed[lv_c_WaveUnitCount + 1] lv_unitTypePercentRandom;
    int[lv_c_WaveUnitCount + 1] lv_unitTypePerWaveLimit;
    int lv_unitTypeIter;
    int lv_unitTypeLimitIter;
    int lv_indexUnitType;
    string lv_unitTypeTest;
    int lv_difficulty;
    int lv_difficultyAsInt;
    int lv_unitPercentBaseIter;
    int lv_unitPercentBaseCreateCount;
    int lv_unitPercentBaseCreateCountSpawnIndex;
    fixed lv_unitPercentRandomPick;
    string lv_randomUnitType;
    int lv_randomUnitTryCount;
    int lv_randomUnitIter;
    int lv_counterUnitTypeIndex;
    string[19] lv_counterTypes;
    int[19] lv_counterTypeDesiredAmount;
    fixed[19] lv_counterTypeDesiredAmountWeighted;
    int lv_counterUnitDesiredTotal;
    int lv_counterIter;
    int lv_counterSpawnCount;
    string lv_aIDetector;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_c_WaveUnitCount; init_i += 1) {
        lv_unitTypePerWaveLimit[init_i] = 999;
    }
    lv_difficulty = 2;

    // Implementation
    while (!((libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] != "None"))) {
        Wait(0.25, c_timeGame);
    }
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_difficultyAsInt = lv_difficulty;
    lv_commanderTier = lp_commanderUnitTier;
    lv_waveResourceTotal = (lp_resourceAllocation * UserDataGetFixed("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "ResourceModifier", 1));
    TextExpressionSetToken("Param/Expression/lib_COMI_91DF939C", "time", libCOOC_gf_FormatTimeCampaign(FixedToInt(GameGetMissionTime())));
    TextExpressionSetToken("Param/Expression/lib_COMI_91DF939C", "player", IntToText(lp_player));
    TextExpressionSetToken("Param/Expression/lib_COMI_91DF939C", "diff", DifficultyName(lv_difficulty));
    TextExpressionSetToken("Param/Expression/lib_COMI_91DF939C", "total", FixedToText(lv_waveResourceTotal, c_fixedPrecisionAny));
    TriggerDebugOutput(3, TextExpressionAssemble("Param/Expression/lib_COMI_91DF939C"), libCOMI_gv_showAIDebugging);
    if ((lv_waveResourceTotal <= 0.0)) {
    }

    if ((lv_waveResourceTotal == -1)) {
        TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_01772B27"), true);
    }

    auto4A308EFB_ae = UserDataFieldValueCount("CoopAICommanderTiers", "PhaseUnits");
    auto4A308EFB_ai = 1;
    lv_unitTierIter = 1;
    for ( ; ( (auto4A308EFB_ai >= 0 && lv_unitTierIter <= auto4A308EFB_ae) || (auto4A308EFB_ai <= 0 && lv_unitTierIter >= auto4A308EFB_ae) ) ; lv_unitTierIter += auto4A308EFB_ai ) {
        if ((lv_unitType == null)) {
            break;
        }

    }
    lv_indexUnitType = 1;
    autoA609CF0B_ae = UserDataFieldValueCount("CoopAICommanderTiers", "PhaseUnits");
    autoA609CF0B_ai = 1;
    lv_unitTypeIter = 1;
    for ( ; ( (autoA609CF0B_ai >= 0 && lv_unitTypeIter <= autoA609CF0B_ae) || (autoA609CF0B_ai <= 0 && lv_unitTypeIter >= autoA609CF0B_ae) ) ; lv_unitTypeIter += autoA609CF0B_ai ) {
        lv_unitTypeTest = UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnits", lv_unitTypeIter);
        if ((lv_unitTypeTest != null) && (lv_difficultyAsInt >= UserDataGetInt("CoopAICommanderTiers", lv_commanderTier, "minDifficulty", lv_unitTypeIter))) {
            lv_unitTypesForWave[lv_indexUnitType] = lv_unitTypeTest;
            lv_unitTypePercentBase[lv_indexUnitType] = UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PercentOfWaveBase", lv_unitTypeIter);
            lv_unitTypePercentRandom[lv_indexUnitType] = (UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PercentOfWaveRandom", lv_unitTypeIter) + lv_unitTypePercentRandom[(lv_indexUnitType - 1)]);
            if ((UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternate", lv_unitTypeIter) != null) && (UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternateChance", lv_unitTypeIter) != 0.0)) {
                if ((RandomFixed(0.0, 1.0) < UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternateChance", lv_unitTierIter))) {
                    lv_unitType = UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternate", lv_unitTierIter);
                    lv_unitTypesForWave[lv_indexUnitType] = lv_unitType;
                }

            }

            autoE4FCA90D_ae = UserDataInstanceCount("CoopAIAttackWaveUnitLimits");
            autoE4FCA90D_ai = 1;
            lv_unitTypeLimitIter = 1;
            for ( ; ( (autoE4FCA90D_ai >= 0 && lv_unitTypeLimitIter <= autoE4FCA90D_ae) || (autoE4FCA90D_ai <= 0 && lv_unitTypeLimitIter >= autoE4FCA90D_ae) ) ; lv_unitTypeLimitIter += autoE4FCA90D_ai ) {
                if ((lv_unitTypesForWave[lv_indexUnitType] == UserDataGetUnit("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "UnitToLimit", 1))) {
                    lv_unitTypePerWaveLimit[lv_indexUnitType] = UserDataGetInt("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "LimitPerDifficulty", lv_difficultyAsInt);
                    break;
                }

            }
            lv_indexUnitType += 1;
        }

    }
    lv_indexUnitType -= 1;
    if ((libCOMI_gf_AISuspectDetectionDanger(lp_player) == true)) {
        autoA31F433D_val = PlayerRace(lp_player);
        if (autoA31F433D_val == "Prot") {
            lv_aIDetector = "Observer";
        }
        else if (autoA31F433D_val == "Terr") {
            lv_aIDetector = "Raven";
        }
        else if (autoA31F433D_val == "Zerg") {
            lv_aIDetector = "Overseer";
        }
        else {
        }
        if ((lp_instantAttackGroup == false)) {
            libCOMI_gf_AddAttackWaveUnitType(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), RandomInt(0, 1), RandomInt(0, 1), 1, 1, 2, 2), lv_aIDetector);
        }
        else {
            UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), RandomInt(0, 1), RandomInt(0, 1), 1, 1, 2, 2), lv_aIDetector, 0, lp_player, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player], libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], UnitLastCreatedGroup());
        }
    }

    auto874C8181_ae = lv_indexUnitType;
    auto874C8181_ai = 1;
    lv_unitPercentBaseIter = 1;
    for ( ; ( (auto874C8181_ai >= 0 && lv_unitPercentBaseIter <= auto874C8181_ae) || (auto874C8181_ai <= 0 && lv_unitPercentBaseIter >= auto874C8181_ae) ) ; lv_unitPercentBaseIter += auto874C8181_ai ) {
        if ((lv_waveResourceUsed > lv_waveResourceTotal)) {
            TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_46250DC5"), libCOMI_gv_showAIDebugging);
            break;
        }

        if ((UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene) > 0)) {
            lv_unitPercentBaseCreateCount = MaxI(TruncI((lv_unitTypePercentBase[lv_unitPercentBaseIter] * lv_waveResourceTotal / UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene))), 1);
        }
        else {
            breakpoint;
            lv_unitPercentBaseCreateCount = TruncI((lv_unitTypePercentBase[lv_unitPercentBaseIter] * lv_waveResourceTotal / 125.0));
        }
        autoA1B74908_ae = lv_unitPercentBaseCreateCount;
        autoA1B74908_ai = 1;
        lv_unitPercentBaseCreateCountSpawnIndex = 1;
        for ( ; ( (autoA1B74908_ai >= 0 && lv_unitPercentBaseCreateCountSpawnIndex <= autoA1B74908_ae) || (autoA1B74908_ai <= 0 && lv_unitPercentBaseCreateCountSpawnIndex >= autoA1B74908_ae) ) ; lv_unitPercentBaseCreateCountSpawnIndex += autoA1B74908_ai ) {
            if ((lv_unitTypePerWaveLimit[lv_unitPercentBaseIter] > 0)) {
                lv_unitTypePerWaveLimit[lv_unitPercentBaseIter] -= 1;
                lv_waveResourceUsed += UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene);
                if ((lp_instantAttackGroup == false)) {
                    libCOMI_gf_AddAttackWaveUnitType(1, lv_unitTypesForWave[lv_unitPercentBaseIter]);
                }
                else {
                    UnitCreate(1, lv_unitTypesForWave[lv_unitPercentBaseIter], 0, lp_player, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player], libNtve_gf_RandomAngle());
                    UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], UnitLastCreatedGroup());
                }
                if ((lv_waveResourceUsed > lv_waveResourceTotal)) {
                    TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_43D66564"), libCOMI_gv_showAIDebugging);
                    break;
                }

            }

        }
    }
    autoE2E03574_ae = 25;
    autoE2E03574_ai = 1;
    lv_randomUnitTryCount = 1;
    for ( ; ( (autoE2E03574_ai >= 0 && lv_randomUnitTryCount <= autoE2E03574_ae) || (autoE2E03574_ai <= 0 && lv_randomUnitTryCount >= autoE2E03574_ae) ) ; lv_randomUnitTryCount += autoE2E03574_ai ) {
        if ((lv_waveResourceUsed < lv_waveResourceTotal)) {
            lv_unitPercentRandomPick = RandomFixed(0.01, lv_unitTypePercentRandom[lv_indexUnitType]);
            autoF55C4EBF_ae = lv_indexUnitType;
            autoF55C4EBF_ai = 1;
            lv_randomUnitIter = 1;
            for ( ; ( (autoF55C4EBF_ai >= 0 && lv_randomUnitIter <= autoF55C4EBF_ae) || (autoF55C4EBF_ai <= 0 && lv_randomUnitIter >= autoF55C4EBF_ae) ) ; lv_randomUnitIter += autoF55C4EBF_ai ) {
                if ((lv_unitTypePercentRandom[lv_randomUnitIter] > lv_unitPercentRandomPick) && (lv_unitTypePerWaveLimit[lv_randomUnitIter] > 0)) {
                    lv_randomUnitType = lv_unitTypesForWave[lv_randomUnitIter];
                    break;
                }

            }
            if ((lv_randomUnitType == null) && (lv_unitTypePercentRandom[lv_indexUnitType] != 0.0)) {
                TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_7A57997D"), libCOMI_gv_showAIDebugging);
                lv_randomUnitType = lv_unitTypesForWave[lv_indexUnitType];
            }

            if ((lv_randomUnitType != null)) {
                lv_waveResourceUsed += UnitTypeGetCost(lv_randomUnitType, c_unitCostSumMineralsVespene);
                lv_unitTypePerWaveLimit[lv_randomUnitIter] -= 1;
                if ((lp_instantAttackGroup == false)) {
                    libCOMI_gf_AddAttackWaveUnitType(1, lv_randomUnitType);
                }
                else {
                    UnitCreate(1, lv_randomUnitType, 0, lp_player, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player], libNtve_gf_RandomAngle());
                    UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], UnitLastCreatedGroup());
                }
            }

        }
        else {
            TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_A0619D4B"), libCOMI_gv_showAIDebugging);
            break;
        }
    }
}

void libCOMI_gf_CM_AIThinkCoop (int lp_player) {
    int auto47D233A5_ae;
    int auto47D233A5_ai;
    string autoE426A4D3_val;

    // Variable Declarations
    int lv_setupNextAttackWave;
    int lv_count;
    string lv_unitType;
    int lv_emptyWaveIndex;
    int lv_attackWaveIndex;
    wave lv_wave;
    int lv_startingTechStockIter;
    string lv_startingTechStockUnit;

    // Variable Initialization
    lv_count = 1;

    // Implementation
    if ((PlayerScoreValueGetAsInt(lp_player, "UnitsActiveCount") <= 5)) {
        libCOMI_gv_cM_CoopAIPlayer_IsAlive[lp_player] = false;
    }

    if ((GameGetMissionTime() < libCOMI_gv_cM_CoopAIPlayer_NextStockUpdate[lp_player])) {
        return ;
    }

    libCOMI_gv_cM_CoopAIPlayer_NextStockUpdate[lp_player] = (GameGetMissionTime() + 5.0);
    AIClearStock(lp_player);
    auto47D233A5_ae = UserDataFieldValueCount("CoopAICommanders", "StartingTech");
    auto47D233A5_ai = 1;
    lv_startingTechStockIter = 1;
    for ( ; ( (auto47D233A5_ai >= 0 && lv_startingTechStockIter <= auto47D233A5_ae) || (auto47D233A5_ai <= 0 && lv_startingTechStockIter >= auto47D233A5_ae) ) ; lv_startingTechStockIter += auto47D233A5_ai ) {
        lv_startingTechStockUnit = UserDataGetUnit("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "StartingTech", lv_startingTechStockIter);
        if ((lv_startingTechStockUnit != null)) {
            AISetStock(lp_player, UserDataGetInt("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "StartingTechCount", lv_startingTechStockIter), lv_startingTechStockUnit);
        }

    }
    libCOMI_gf_CM_CoopAI_Upgrades(lp_player);
    autoE426A4D3_val = PlayerRace(lp_player);
    if (autoE426A4D3_val == "Terr") {
        AISetStockUnitNext(lp_player, 6, "SCV", false);
    }
    else if (autoE426A4D3_val == "Zerg") {
        AISetStockUnitNext(lp_player, 6, "Drone", false);
    }
    else if (autoE426A4D3_val == "Prot") {
        AISetStockUnitNext(lp_player, 6, "Probe", false);
    }
    else {
    }
    if ((PlayerRace(lp_player) == "Terr")) {
        if (((AITechCount(lp_player, "Ghost", c_techCountCompleteOnly) > 0) || (AITechCount(lp_player, "Spectre", c_techCountCompleteOnly) > 0))) {
            AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 0, 0, 1, 2, 3, 4), "Nuke");
            AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 0, 0, 1, 2, 3, 4), "GhostAcademy");
        }
        else {
            AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 0, 0, 1, 1, 2, 2), "Ghost");
        }
        AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 1, 1, 1, 1, 2, 2), "OrbitalCommand");
    }

    AIEnableStock(lp_player);
}

trigger auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_lp_player;

void libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger (int lp_player) {
    auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_lp_player;

    // Implementation
    Wait(2.0, c_timeAI);
    AIAddDetectionDangerCampaignUnits(lp_player);
    return true;
}

void libCOMI_gf_CM_CoopAI_SetupStartingTech (int lp_player) {
    int autoBC0EE9F6_ae;
    int autoBC0EE9F6_ai;
    int autoB7BAE201_ae;
    int autoB7BAE201_ai;

    // Variable Declarations
    string lv_unitToCreate;
    int lv_unitCreateCount;
    int lv_unitCreateIter;
    int lv_playerOwnedCount;
    int lv_iterUnitCreate;
    point lv_createPosition;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 1) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 2))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("SiegeMode", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToSwarmHostBurrowedMP", 0), false);
        TechTreeUpgradeAddLevel(lp_player, "SwarmHostFakeWeapon", 1);
    }
    else {
        TechTreeUpgradeAddLevel(lp_player, "CausticSpray", 1);
    }
    TechTreeUpgradeAddLevel(lp_player, "CoopAIReaperCost", 1);
    TechTreeUpgradeAddLevel(lp_player, "CoopAIMutaliskCost", 1);
    autoBC0EE9F6_ae = UserDataFieldValueCount("CoopAICommanders", "StartingTech");
    autoBC0EE9F6_ai = 1;
    lv_unitCreateIter = 1;
    for ( ; ( (autoBC0EE9F6_ai >= 0 && lv_unitCreateIter <= autoBC0EE9F6_ae) || (autoBC0EE9F6_ai <= 0 && lv_unitCreateIter >= autoBC0EE9F6_ae) ) ; lv_unitCreateIter += autoBC0EE9F6_ai ) {
        lv_unitToCreate = UserDataGetUnit("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "StartingTech", lv_unitCreateIter);
        if ((lv_unitToCreate == null)) {
            continue;
        }

        lv_unitCreateCount = UserDataGetInt("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "StartingTechCount", lv_unitCreateIter);
        lv_playerOwnedCount = UnitGroupCount(UnitGroup(lv_unitToCreate, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        autoB7BAE201_ae = (lv_unitCreateCount - lv_playerOwnedCount);
        autoB7BAE201_ai = 1;
        lv_iterUnitCreate = 1;
        for ( ; ( (autoB7BAE201_ai >= 0 && lv_iterUnitCreate <= autoB7BAE201_ae) || (autoB7BAE201_ai <= 0 && lv_iterUnitCreate >= autoB7BAE201_ae) ) ; lv_iterUnitCreate += autoB7BAE201_ai ) {
            if ((UnitTypeTestAttribute(lv_unitToCreate, c_unitAttributeStructure) == true)) {
                lv_createPosition = AIGetBuildingPlacement(lp_player, UnitGroupCenterOfGroup(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), lv_unitToCreate, -1);
                if ((lv_createPosition == null)) {
                    lv_createPosition = UnitTypePlacementTestsFromPoint(lv_unitToCreate, lp_player, UnitGroupCenterOfGroup(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 0.0, c_placementTestCreepMask | c_placementTestPowerMask | c_placementTestFogMask | c_placementTestIgnoreBlockersMask | c_placementTestIgnoreInvisibleMask | c_placementTestZoneMask | c_placementTestCliffMask | c_placementTestDensityMask);
                }
                else {
                    lv_createPosition = RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 10.0));
                }
            }
            else {
                lv_createPosition = AIGetGatherDefLocation(lp_player, -1);
            }
            UnitCreate(1, lv_unitToCreate, 0, lp_player, lv_createPosition, libNtve_gf_RandomAngle());
        }
    }
}

void libCOMI_gf_CM_CoopAI_CacheUpgradeData (int lp_player, int lp_difficulty) {
    int auto93DD5DF8_ae;
    int auto93DD5DF8_ai;

    // Variable Declarations
    int lv_upgradeIter;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_initialized = true;
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_cachedDifficulty = lp_difficulty;
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades = UserDataInstanceCount("CoopAIUpgrade");
    if ((libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades > libCOMI_gv_cMC_CoopAI_MaxNumUpgrades)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_CDE8D4FE"), true);
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades = libCOMI_gv_cMC_CoopAI_MaxNumUpgrades;
    }

    auto93DD5DF8_ae = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades;
    auto93DD5DF8_ai = 1;
    lv_upgradeIter = 1;
    for ( ; ( (auto93DD5DF8_ai >= 0 && lv_upgradeIter <= auto93DD5DF8_ae) || (auto93DD5DF8_ai <= 0 && lv_upgradeIter >= auto93DD5DF8_ae) ) ; lv_upgradeIter += auto93DD5DF8_ai ) {
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_upgradeIter] = UserDataGetUpgrade("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "Upgrade", 1);
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_upgradeIter] = UserDataGetFixed("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "TimePerDifficult", lp_difficulty);
    }
}

void libCOMI_gf_CM_CoopAI_Upgrades (int lp_player) {
    int auto56C5C2AA_ae;
    int auto56C5C2AA_ai;
    int auto3A3C35EB_ae;
    int auto3A3C35EB_ai;

    // Variable Declarations
    int lv_upgradeIter;
    fixed lv_time;
    string lv_upgrade;
    int lv_difficulty;
    int lv_exclusiveCommanderIter;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (((libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_initialized == false) || (libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_cachedDifficulty != lv_difficulty))) {
        libCOMI_gf_CM_CoopAI_CacheUpgradeData(lp_player, lv_difficulty);
    }

    auto56C5C2AA_ae = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades;
    auto56C5C2AA_ai = 1;
    lv_upgradeIter = 1;
    for ( ; ( (auto56C5C2AA_ai >= 0 && lv_upgradeIter <= auto56C5C2AA_ae) || (auto56C5C2AA_ai <= 0 && lv_upgradeIter >= auto56C5C2AA_ae) ) ; lv_upgradeIter += auto56C5C2AA_ai ) {
        lv_upgrade = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_upgradeIter];
        lv_time = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_upgradeIter];
        if ((lv_time >= 0.0) && (lv_time < GameGetMissionTime()) && (TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountQueuedOrBetter) == 0)) {
            auto3A3C35EB_ae = UserDataFieldValueCount("CoopAIUpgrade", "ExclusiveToCommander");
            auto3A3C35EB_ai = 1;
            lv_exclusiveCommanderIter = 1;
            for ( ; ( (auto3A3C35EB_ai >= 0 && lv_exclusiveCommanderIter <= auto3A3C35EB_ae) || (auto3A3C35EB_ai <= 0 && lv_exclusiveCommanderIter >= auto3A3C35EB_ae) ) ; lv_exclusiveCommanderIter += auto3A3C35EB_ai ) {
                if (((UserDataGetUserInstance("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "ExclusiveToCommander", lv_exclusiveCommanderIter) == "None") || (UserDataGetUserInstance("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "ExclusiveToCommander", lv_exclusiveCommanderIter) == libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player]))) {
                    TechTreeUpgradeAddLevel(lp_player, lv_upgrade, 1);
                    break;
                }

            }
        }

    }
}

int libCOMI_gf_GetMissionDifficulty () {
    // Variable Declarations
    fixed lv_difficulty;
    int lv_returnDiff;
    int lv_player01;
    int lv_player02;

    // Variable Initialization
    lv_returnDiff = 2;
    lv_player01 = 1;
    lv_player02 = 2;

    // Implementation
    if ((PlayerType(2) == c_playerTypeNone)) {
        return libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player01);
    }

    lv_difficulty = ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player01) + libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player02)) * 0.5);
    lv_returnDiff = RoundI(lv_difficulty);;
    return lv_returnDiff;
}

string libCOMI_gf_GetUnitRace (unit lp_unit) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "Race", UnitGetOwner(lp_unit)));
}

void libCOMI_gf_SetCoopAIAttackGroupSpawnPoint (int lp_player, point lp_spawnPoint) {
    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player] = lp_spawnPoint;
}

trigger auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger = null;
int auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_player;
string auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_unitType;
point auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_warpInPoint;

void libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn (int lp_player, string lp_unitType, point lp_warpInPoint) {
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_unitType = lp_unitType;
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_warpInPoint = lp_warpInPoint;

    if (auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_player;
    string lp_unitType = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_unitType;
    point lp_warpInPoint = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_warpInPoint;

    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, lp_warpInPoint, libNtve_gf_RandomAngle());
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    UnitAbilityEnable(UnitLastCreated(), "move", false);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(1.0, 2.0));
    UnitBehaviorAdd(UnitLastCreated(), "ProtossGenericWarpInOut", UnitLastCreated(), 1);
    Wait(2.0, c_timeAI);
    UnitBehaviorRemove(UnitLastCreated(), "ProtossGenericWarpInOut", 1);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(1.0, 0.0));
    UnitAbilityEnable(UnitLastCreated(), "attack", true);
    UnitAbilityEnable(UnitLastCreated(), "move", true);
    return true;
}

void libCOMI_gf_EnableDisableCoopAIWavePings (bool lp_enableDisable) {
    // Implementation
    libCOMI_gv_cM_CoopAI_WavePingShowAll = lp_enableDisable;
}

trigger auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger = null;
wave auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave;
bool auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable;

void libCOMI_gf_EnableDisableCoopAIWavePing (wave lp_attackWave, bool lp_enableDisable) {
    auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave = lp_attackWave;
    auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable = lp_enableDisable;

    if (auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger == null) {
        auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger = TriggerCreate("auto_libCOMI_gf_EnableDisableCoopAIWavePing_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger, false, false);
}

bool auto_libCOMI_gf_EnableDisableCoopAIWavePing_TriggerFunc (bool testConds, bool runActions) {
    wave lp_attackWave = auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave;
    bool lp_enableDisable = auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable;

    playergroup autoE6735AAB_g;
    int autoE6735AAB_p;
    int auto2A7BD62F_ae;
    int auto2A7BD62F_ai;
    fixed autoF7E66F8C_at;

    // Variable Declarations
    int lv_attackWavePlayerIterPrimary;
    int lv_attackWavePingIterPrimary;

    // Variable Initialization

    // Implementation
    autoE6735AAB_g = libCOMI_gv_cM_CoopAI_Players; 
    autoE6735AAB_p = 1;
    for ( ; autoE6735AAB_p <= PlayerGroupCount(autoE6735AAB_g) ; autoE6735AAB_p += BoolToInt(lv_attackWavePlayerIterPrimary == PlayerGroupPlayer(autoE6735AAB_g, autoE6735AAB_p)) ) {
        lv_attackWavePlayerIterPrimary = PlayerGroupPlayer(autoE6735AAB_g, autoE6735AAB_p);
        auto2A7BD62F_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
        auto2A7BD62F_ai = 1;
        lv_attackWavePingIterPrimary = 0;
        for ( ; ( (auto2A7BD62F_ai >= 0 && lv_attackWavePingIterPrimary <= auto2A7BD62F_ae) || (auto2A7BD62F_ai <= 0 && lv_attackWavePingIterPrimary >= auto2A7BD62F_ae) ) ; lv_attackWavePingIterPrimary += auto2A7BD62F_ai ) {
            if ((lp_attackWave == libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary])) {
                libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] = true;
            }

        }
    }
    autoF7E66F8C_at = 0;
    while (!((lp_attackWave != null) && (AIWaveGetUnits(lp_attackWave) != UnitGroupEmpty()) && (AIWaveGetUnits(lp_attackWave) != null) && (UnitGroupCount(AIWaveGetUnits(lp_attackWave), c_unitCountAlive) > 0)) && autoF7E66F8C_at <= 90.0) {
        Wait(0.1, c_timeGame);
        autoF7E66F8C_at = autoF7E66F8C_at + 0.1;
    }
    UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAI_DontPingUnits, AIWaveGetUnits(lp_attackWave));
    while (!((lp_attackWave == null))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] = false;
    return true;
}

void libCOMI_gf_EnableDisableCoopAIPlayerAttackPings (playergroup lp_players, bool lp_enableDisable) {
    // Implementation
    if ((lp_enableDisable == false)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lp_players, libCOMI_gv_cM_CoopAI_DontPingPlayers);
    }
    else {
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, libCOMI_gv_cM_CoopAI_DontPingPlayers);
    }
}

bool libCOMI_gf_CM_CoopAI_PingWorthyUnit (unit lp_pingableUnit) {
    // Variable Declarations
    string lv_pingableUnitType;

    // Variable Initialization

    // Implementation
    lv_pingableUnitType = UnitGetType(lp_pingableUnit);
    if (((lv_pingableUnitType == "WidowMine") || (lv_pingableUnitType == "WidowMineBurrowed"))) {
        return true;
    }
    else if ((UnitWeaponCount(lp_pingableUnit) <= 0)) {
        return false;
    }
    else if ((UnitGroupHasUnit(libCOMI_gv_cM_CoopAI_DontPingUnits, lp_pingableUnit) == true)) {
        return false;
    }
    else if (((lv_pingableUnitType == "Medivac") || (lv_pingableUnitType == "Raven") || (lv_pingableUnitType == "ScienceVessel") || (lv_pingableUnitType == "Observer") || (lv_pingableUnitType == "WarpPrismPhasing") || (lv_pingableUnitType == "WarpPrism") || (lv_pingableUnitType == "Overlord") || (lv_pingableUnitType == "Overseer") || (lv_pingableUnitType == "Changeling") || (lv_pingableUnitType == "ChangelingZealot") || (lv_pingableUnitType == "ChangelingMarineShield") || (lv_pingableUnitType == "ChangelingMarine") || (lv_pingableUnitType == "ChangelingZergling") || (lv_pingableUnitType == "ChangelingZerglingWings"))) {
        return false;
    }
    return true;
}

bool libCOMI_gf_UnitisValidforanAttackWavePing (unit lp_pingableUnit) {
    // Implementation
    return libCOMI_gf_CM_CoopAI_PingWorthyUnit(lp_pingableUnit);
}

void libCOMI_gf_TacticalAIFilterSortByLife (aifilter lp_filter, fixed lp_damage, fixed lp_distance) {
    // Implementation
    AISetFilterLifeSortReference(lp_filter, lp_damage, lp_distance);
}

void libCOMI_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound) {
    // Implementation
    if ((lp_point != null)) {
        if ((lp_actor != null)) {
            libNtve_gf_CreateActorAtPoint(lp_actor, lp_point);
        }

        if ((lp_sound != null)) {
            SoundPlayAtPoint(lp_sound, PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
        }

    }

}

void libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganArmyGasCost", c_techCountCompleteOnly);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("Overseer", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("OverseerSiegeMode", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("Hydralisk", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskBurrowed", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskLurker", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskLurkerBurrowed", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("MutaliskBroodlord", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("BroodLord", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("Ultralisk", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("UltraliskBurrowed", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HotSTorrasque", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HotSTorrasqueBurrowed", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("TorrasqueCorpse", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("Lurker", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("LurkerBurrowed", lp_player, lv_upgradeCount);
}

void libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew;

    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 100.0;

    // Implementation
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player));
    lv_unitVespeneCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitVespeneCostOriginal - lv_unitVespeneCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCOMI_gf_CM_MasteryZagraRoachLifeIncrease (int lp_player) {
    // Variable Declarations
    fixed lv_upgradeCount;
    fixed lv_healthStarting;
    fixed lv_healthPerPoint;
    fixed lv_healthNew;
    fixed lv_damageStarting;
    fixed lv_damagePerPoint;
    fixed lv_damageNew;

    // Variable Initialization
    lv_healthStarting = 145.0;
    lv_healthPerPoint = 29.0;
    lv_healthNew = 145.0;
    lv_damageStarting = 16.0;
    lv_damagePerPoint = 0.32;

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly);
    lv_healthNew = (lv_healthStarting+(lv_upgradeCount*lv_healthPerPoint/10));
    CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "LifeMax", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "LifeStart", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "RoachBurrowed", "LifeMax", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "RoachBurrowed", "LifeStart", lp_player, IntToString(FixedToInt(lv_healthNew)));
    lv_damageNew = Ceiling((lv_damageStarting+(lv_upgradeCount*lv_damagePerPoint)));
    CatalogFieldValueSet(c_gameCatalogEffect, "AcidSalivaU", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "RoachUMelee", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "MasteryZagaraRoachDropDamageAndHealthAttackDamageDisplayDummy", "Amount", lp_player, IntToString(FixedToInt((lv_damageNew-lv_damageStarting))));
}

void libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList2 (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKaraxUnitCost", c_techCountCompleteOnly);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("Zealot", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("ZealotPurifier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("ZealotPurifierReviveCorpse", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("SentryPurifier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("SentryPhasing", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("ImmortalAiur", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("Colossus", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("ColossusPurifier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("PhoenixPurifier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("Carrier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("CarrierAiur", lp_player, lv_upgradeCount);
}

void libCOMI_gf_CM_MasteryKaraxArmyCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitCostReduction;
    int lv_UnitVespeneCostNew;

    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 100.0;

    // Implementation
    lv_unitCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player));
    lv_unitCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitCostOriginal);
    lv_unitCostReduction = (lv_unitCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitCostOriginal - lv_unitCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
    lv_unitCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(0) + "]", lp_player));
    lv_unitCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitCostOriginal);
    lv_unitCostReduction = (lv_unitCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitCostOriginal - lv_unitCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(0) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCOMI_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction (int lp_player) {
    // Variable Declarations
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew;
    int lv_upgradeCount;

    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 50.0;

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasterySwannImmortalityProtocol", c_techCountCompleteOnly);
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SiegeTank", "CostResource[" + IntToString(1) + "]", lp_player));
    lv_unitVespeneCostReduction = (IntToFixed(lv_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt(lv_unitVespeneCostReduction);
    CatalogFieldValueSet(c_gameCatalogUnit, "SiegeTankWreckage", "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCOMI_gf_CM_MasteryKerriganImmobilizationWaveDamage (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_damage;

    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganImmobilizationWaveDamage", c_techCountCompleteOnly);
    lv_damage = (((lv_upgradeCount / 30.0) * 100.0) + 100.0);
    CatalogFieldValueSet(c_gameCatalogEffect, "PsionicLiftDamage", "Amount", lp_player, FixedToString(lv_damage, c_fixedPrecisionAny));
}

void libCOMI_gf_CM_MasteryKerriganMutatingCarapaceDegradation (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_degradation;

    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganMutatingCarapaceLifeDegradation", c_techCountCompleteOnly);
    lv_degradation = (((lv_upgradeCount / 30.0) * 5.0) - 5.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "K5Kerrigan", "ShieldRegenRate", lp_player, FixedToString(lv_degradation, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "K5KerriganBurrowed", "ShieldRegenRate", lp_player, FixedToString(lv_degradation, c_fixedPrecisionAny));
}

void libCOMI_gf_CM_MasteryKerriganResearchSpeedCost (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_costReduction;

    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganResearchSpeedandCost", c_techCountCompleteOnly);
    lv_costReduction = ((225.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((225.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
}

void libCOMI_gf_CM_MasteryWeaponListFromUpgradeAttackSpeedBonus (int lp_player, string lp_upgrade, fixed lp_percentMultiplierPerPoint) {
    int auto400BF3B9_ae;
    int auto400BF3B9_ai;

    // Variable Declarations
    int lv_level;
    string lv_entry;
    int lv_index;
    int lv_count;
    fixed lv_val;
    fixed lv_period;
    fixed lv_addition;
    int lv_catalog;
    string lv_path;
    string lv_ref;

    // Variable Initialization
    lv_level = TechTreeUpgradeCount(lp_player, lp_upgrade, c_techCountCompleteOnly);
    lv_catalog = c_gameCatalogWeapon;
    lv_path = "";

    // Implementation
    if ((lv_level < 1)) {
        return ;
    }

    lv_count = CatalogFieldValueCount(c_gameCatalogUpgrade, lp_upgrade, "AffectedUnitArray", lp_player);
    auto400BF3B9_ae = (lv_count-1);
    auto400BF3B9_ai = 1;
    lv_index = 0;
    for ( ; ( (auto400BF3B9_ai >= 0 && lv_index <= auto400BF3B9_ae) || (auto400BF3B9_ai <= 0 && lv_index >= auto400BF3B9_ae) ) ; lv_index += auto400BF3B9_ai ) {
        lv_path = CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "AffectedUnitArray[" + IntToString(lv_index) + "]", lp_player);
        if ((StringContains(lv_path, ",", c_stringAnywhere, c_stringCase) == false)) {
            lv_path = ("Weapon," + lv_path + ",Period");
        }

        lv_ref = (lv_path);
        lv_entry = (lv_path);
        lv_period = StringToFixed(CatalogReferenceGet(lv_ref, c_playerAny));
        if ((lv_period != 0.0)) {
            lv_addition = (lv_level*lp_percentMultiplierPerPoint);
            lv_val = (lv_period-1/((1/lv_period)*(1+lv_addition)));
            CatalogReferenceModify(lv_ref, lp_player, FixedToString(lv_val, c_fixedPrecisionAny), c_upgradeOperationSubtract);
        }

    }
}

void libCOMI_gf_CM_MasteryResearchCostReduction (int lp_player, string lp_masteryUpgrade, fixed lp_percentReductionPerPoint) {
    int auto0FE65364_ae;
    int auto0FE65364_ai;
    int auto6642A659_ae;
    int auto6642A659_ai;

    // Variable Declarations
    string lv_ability;
    int lv_i;
    int lv_costMinerals;
    int lv_costVespene;
    int lv_upgradeCount;
    fixed lv_r;

    // Variable Initialization
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, lp_masteryUpgrade, c_techCountCompleteOnly);

    // Implementation
    auto0FE65364_ae = CatalogEntryCount(c_gameCatalogAbil);
    auto0FE65364_ai = 1;
    while (auto0FE65364_ai <= auto0FE65364_ae) {
        lv_ability = CatalogEntryGet(c_gameCatalogAbil, auto0FE65364_ai);
        auto0FE65364_ai = auto0FE65364_ai + 1;
        if ((AbilityClass(lv_ability) == c_classIdCAbilResearch)) {
            auto6642A659_ae = 29;
            auto6642A659_ai = 1;
            lv_i = 0;
            for ( ; ( (auto6642A659_ai >= 0 && lv_i <= auto6642A659_ae) || (auto6642A659_ai <= 0 && lv_i >= auto6642A659_ae) ) ; lv_i += auto6642A659_ai ) {
                lv_costMinerals = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player);
                lv_costVespene = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player);
                if (((lv_costMinerals > 0) || (lv_costVespene > 0))) {
                    lv_r = (100.0 - (lv_upgradeCount * lp_percentReductionPerPoint));
                    lv_costMinerals = FixedToInt(RoundI(((lv_costMinerals * lv_r) / 100.0)));
                    lv_costVespene = FixedToInt(RoundI(((lv_costVespene * lv_r) / 100.0)));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(lv_costMinerals));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(lv_costVespene));
                }

            }
        }

    }
}

void libCOMI_gf_CM_DataUtilInit () {
    playergroup autoBBEF2DEB_g;
    int autoBBEF2DEB_p;
    string autoCF24B7F2_val;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    autoBBEF2DEB_g = libCOOC_gf_HumanPlayers(); 
    autoBBEF2DEB_p = 1;
    for ( ; autoBBEF2DEB_p <= PlayerGroupCount(autoBBEF2DEB_g) ; autoBBEF2DEB_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoBBEF2DEB_g, autoBBEF2DEB_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoBBEF2DEB_g, autoBBEF2DEB_p);
        autoCF24B7F2_val = libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer);
        if (autoCF24B7F2_val == "ProtossKarax") {
            TriggerEnable(libCOMI_gt_CM_KaraxUnitReviveBarrier, true);
        }
        else {
        }
    }
}

void libCOMI_gf_CM_DetectionUpgradesApply () {
    int auto4E1B22AE_ae;
    int auto4E1B22AE_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(1, "DetectionFriendly", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "DetectionFriendly", 1);
    auto4E1B22AE_ae = 15;
    auto4E1B22AE_ai = 1;
    lv_i = 3;
    for ( ; ( (auto4E1B22AE_ai >= 0 && lv_i <= auto4E1B22AE_ae) || (auto4E1B22AE_ai <= 0 && lv_i >= auto4E1B22AE_ae) ) ; lv_i += auto4E1B22AE_ai ) {
        if (((libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_EnemyMutual) == true))) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "DetectionEnemy", 1);
        }

    }
}

void libCOMI_gf_CM_Abathur_BiomassSetStack (unit lp_biomass, int lp_stack) {
    // Implementation
    UnitSetCustomValue(lp_biomass, 63, IntToFixed(lp_stack));
    TextExpressionSetToken("Param/Expression/lib_COMI_9DEC6D4D", "Stack", IntToText(lp_stack));
    UnitSetInfoTip(lp_biomass, TextExpressionAssemble("Param/Expression/lib_COMI_9DEC6D4D"));
}

int libCOMI_gf_CM_Abathur_BiomassGetStack (unit lp_biomass) {
    // Variable Declarations
    int lv_stack;

    // Variable Initialization
    lv_stack = FixedToInt(UnitGetCustomValue(lp_biomass, 63));

    // Implementation
    return lv_stack;
}

void libCOMI_gf_CM_Abathur_BiomassTransfer (int lp_indexPlayer, unit lp_trainUnit, int lp_biomassBuff100Count, int lp_biomassBuff10Count, int lp_biomassBuff1Count) {
    // Implementation
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff100", lp_indexPlayer, lp_biomassBuff100Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff10", lp_indexPlayer, lp_biomassBuff10Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff1", lp_indexPlayer, lp_biomassBuff1Count);
    UnitCreateEffectUnit(lp_trainUnit, "PostMorphHeal", lp_trainUnit);
}

void libCOMI_gf_CM_Abathur_BiomassScale (unit lp_biomassUnit, bool lp_instantScale) {
    // Variable Declarations
    fixed lv_customScale;

    // Variable Initialization

    // Implementation
    lv_customScale = (UnitGetCustomValue(lp_biomassUnit, 63) / 100.0);
    lv_customScale += 0.8;
    if ((lv_customScale > 1.8)) {
        lv_customScale = 1.8;
    }

    if ((lp_instantScale == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_AED708CF", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_biomassUnit), TextExpressionAssemble("Param/Expression/lib_COMI_AED708CF"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_139DC70E", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_biomassUnit), TextExpressionAssemble("Param/Expression/lib_COMI_139DC70E"));
    }
}

void libCOMI_gf_CM_Abathur_BiomassMerge (unit lp_biomassUnit, int lp_biomassUnitCount) {
    // Variable Declarations
    fixed lv_biomassCongealRadius;
    int lv_nearbyBiomassMaxCount;
    unit lv_nearbyBiomassMaxCountUnit;

    // Variable Initialization
    lv_biomassCongealRadius = 1.9;

    // Implementation
    UnitGroupLoopBegin(UnitGroup("BiomassPickup", libCOOC_gf_CC_CommanderPlayer("ZergAbathur"), RegionCircle(UnitGetPosition(lp_biomassUnit), lv_biomassCongealRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetCustomValue(UnitGroupLoopCurrent(), 63) > lv_nearbyBiomassMaxCount) && (UnitGroupLoopCurrent() != lp_biomassUnit) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "BiomassTravelling") == false))) {
            lv_nearbyBiomassMaxCount = FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 63));
            lv_nearbyBiomassMaxCountUnit = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_nearbyBiomassMaxCountUnit != null)) {
        libCOMI_gf_CM_Abathur_BiomassSetStack(lv_nearbyBiomassMaxCountUnit, FixedToInt((UnitGetCustomValue(lv_nearbyBiomassMaxCountUnit, 63) + lp_biomassUnitCount)));
        UnitBehaviorAdd(lp_biomassUnit, "BiomassTravelling", lp_biomassUnit, 1);
        UnitCreateEffectUnit(lp_biomassUnit, "BiomassPickupFullLM", lv_nearbyBiomassMaxCountUnit);
        libCOMI_gf_CM_Abathur_BiomassScale(lv_nearbyBiomassMaxCountUnit, false);
    }

}

void libCOMI_gf_CM_MasteryAlarakOverchargeAttackSpeed (int lp_player) {
    // Variable Declarations
    int lv_level;
    string lv_entry;
    fixed lv_val;
    fixed lv_period;
    fixed lv_addition;

    // Variable Initialization
    lv_level = TechTreeUpgradeCount(lp_player, libCOMI_gv_cM_MasteryAlarakOverchargeAttackSpeed_Link, c_techCountCompleteOnly);
    lv_entry = libCOMI_gv_cM_MasteryAlarakOverchargeAttackSpeed_BehaviorLink;

    // Implementation
    if ((lv_level < 1)) {
        return ;
    }

    lv_period = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_entry, "Period", c_playerAny));
    lv_addition = (lv_level*libCOMI_gv_cM_MasteryAlarakOverchargeAttackSpeed_Factor);
    lv_val = (lv_period-1/((1/lv_period)*(1+lv_addition)));
    CatalogFieldValueModify(c_gameCatalogBehavior, lv_entry, "Period", lp_player, FixedToString(lv_val, c_fixedPrecisionAny), c_upgradeOperationSubtract);
    CatalogFieldValueModify(c_gameCatalogWeapon, libCOMI_gv_cM_MasteryAlarakOverchargeAttackSpeed_WeaponLink, "Period", lp_player, FixedToString(lv_val, c_fixedPrecisionAny), c_upgradeOperationSubtract);
}

trigger auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger = null;
int auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_player;
abilcmd auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_cmd;
point auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_targetPoint;

void libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread (int lp_player, abilcmd lp_cmd, point lp_targetPoint) {
    auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_player = lp_player;
    auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_cmd = lp_cmd;
    auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_targetPoint = lp_targetPoint;

    if (auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger == null) {
        auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger = TriggerCreate("auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_player;
    abilcmd lp_cmd = auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_cmd;
    point lp_targetPoint = auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_targetPoint;

    // Variable Declarations
    fixed lv_cooldown;
    string lv_cooldownLink;
    point lv_placementTarget;

    // Variable Initialization
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(lp_cmd), "Cost[" + IntToString(0) + "].Cooldown.Link", lp_player);

    // Implementation
    lv_placementTarget = UnitTypePlacementFromPoint("FenixDragoon", lp_player, lp_targetPoint, 500.0);
    VisRevealArea(lp_player, RegionCircle(lv_placementTarget, 10.0), 5.0, false);
    Wait(4.0, c_timeGame);
    lv_placementTarget = UnitTypePlacementFromPoint("FenixDragoon", lp_player, lp_targetPoint, 500.0);
    lv_cooldown = PlayerGetCooldown(lp_player, lv_cooldownLink);
    libNtve_gf_PlayerRemoveCooldown(lp_player, lv_cooldownLink);
    UnitIssueOrder(libCOUI_gv_cU_GPUnit[lp_player], OrderTargetingPoint(lp_cmd, lv_placementTarget), c_orderQueueReplace);
    PlayerAddCooldown(lp_player, lv_cooldownLink, lv_cooldown);
    return true;
}

void libCOMI_gf_CM_Fenix_VitalMatch (unit lp_hero) {
    string auto49AD353E_val;

    // Variable Declarations
    int lv_i;
    int lv_player;
    int lv_suitIndex;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_hero);

    // Implementation
    auto49AD353E_val = UnitGetType(lp_hero);
    if (auto49AD353E_val == "FenixCoop") {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if (true) {
            lv_suitIndex = 1;
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[1], libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), 1);
    }
    else if (auto49AD353E_val == "FenixDragoon") {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if (true) {
            lv_suitIndex = 2;
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[2], libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), 2);
    }
    else if (auto49AD353E_val == "FenixArbiter") {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if (true) {
            lv_suitIndex = 3;
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[3], libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), 3);
    }
    else {
    }
    if ((libCOMI_gv_cM_Fenix_SuicideLife[lv_player] > 0.0)) {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[lv_suitIndex], c_unitPropLife, libCOMI_gv_cM_Fenix_SuicideLife[EventPlayer()]);
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[lv_suitIndex], c_unitPropShields, libCOMI_gv_cM_Fenix_SuicideShield[EventPlayer()]);
        libCOMI_gv_cM_Fenix_SuicideLife[EventPlayer()] = 0.0;
        libCOMI_gv_cM_Fenix_SuicideLife[EventPlayer()] = 0.0;
    }

}

void libCOMI_gf_CM_Fenix_SetActiveHeroUIState (unit lp_unit, bool lp_active) {
    string autoA3829BFE_val;

    // Variable Declarations
    int lv_heroUnitID;

    // Variable Initialization

    // Implementation
    autoA3829BFE_val = UnitGetType(lp_unit);
    if (autoA3829BFE_val == "FenixCoop") {
        lv_heroUnitID = 1;
    }
    else if (autoA3829BFE_val == "FenixDragoon") {
        lv_heroUnitID = 2;
    }
    else if (autoA3829BFE_val == "FenixArbiter") {
        lv_heroUnitID = 3;
    }
    else {
        lv_heroUnitID = 0;
    }
    if ((lp_active == false)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[lv_heroUnitID][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "False");
    }
    else if ((lp_active == true) && (lv_heroUnitID == 1)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[1][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "True");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[2][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "False");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[3][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "False");
    }
    else if ((lp_active == true) && (lv_heroUnitID == 2)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[2][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "True");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[1][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "False");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[3][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "False");
    }
    else if ((lp_active == true) && (lv_heroUnitID == 3)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[3][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "True");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[1][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "False");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[2][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupAll(), "ActiveState", "False");
    }
}

void libCOMI_gf_CM_Fenix_UpdateNetworkValues (int lp_group, int lp_player) {
    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "FenixNetworkedSuperiority", c_techCountCompleteOnly) >= 1)) {
        lv_count = UnitGroupCount(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[lp_group], c_unitCountAlive);
        if ((lv_count > 10)) {
            lv_count = 10;
        }

        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[lp_group], lv_count);
    }

}

void libCOMI_gf_CM_KerriganMalignantCreep () {
    int autoECD6806E_ae;
    int autoECD6806E_ai;

    // Variable Declarations
    int lv_level;
    string lv_entry;
    int lv_catalog;
    int lv_index;
    int lv_count;
    fixed lv_add;

    // Variable Initialization
    lv_level = TechTreeUpgradeCount(1, "KerriganCreepBonusesCoop", c_techCountCompleteOnly);
    lv_catalog = c_gameCatalogUnit;

    // Implementation
    if ((lv_level < 1)) {
        return ;
    }

    lv_count = CatalogEntryCount(lv_catalog);
    autoECD6806E_ae = lv_count;
    autoECD6806E_ai = 1;
    lv_index = 1;
    for ( ; ( (autoECD6806E_ai >= 0 && lv_index <= autoECD6806E_ae) || (autoECD6806E_ai <= 0 && lv_index >= autoECD6806E_ae) ) ; lv_index += autoECD6806E_ai ) {
        lv_entry = CatalogEntryGet(lv_catalog, lv_index);
        if ((CatalogEntryIsDefault(lv_catalog, lv_entry) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagInvulnerable) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagNoDraw) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagDestructible) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagMissile) == false) && (UnitTypeTestAttribute(lv_entry, c_unitAttributeStructure) == false) && ((UnitTypeTestAttribute(lv_entry, c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(lv_entry, c_unitAttributeMechanical) == true) || (UnitTypeTestAttribute(lv_entry, c_unitAttributePsionic) == true)) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_entry, "PlaneArray[Ground]", c_playerAny) == "1")) {
            CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "LifeRegenRateCreep", 1, libCOMI_gv_cM_TalentKerriganMalignantCreep_CreepRegenRate, c_upgradeOperationAdd);
            CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "AttackSpeedMultiplierCreep", 1, libCOMI_gv_cM_TalentKerriganMalignantCreep_AttackSpeedMultiplierCreep, c_upgradeOperationAdd);
            CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "LifeRegenRateCreep", 2, libCOMI_gv_cM_TalentKerriganMalignantCreep_CreepRegenRate, c_upgradeOperationAdd);
            CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "AttackSpeedMultiplierCreep", 2, libCOMI_gv_cM_TalentKerriganMalignantCreep_AttackSpeedMultiplierCreep, c_upgradeOperationAdd);
        }

    }
}

point libCOMI_gf_CM_LaserDrillTargetPoint (point lp_casterPoint, point lp_targetPoint, region lp_region) {
    // Variable Declarations
    point lv_casterPoint;
    fixed lv_casterXToEdgeOfMap;
    fixed lv_casterYToEdgeOfMap;
    point lv_targetPoint;
    fixed lv_targetXToEdgeOfMap;
    fixed lv_targetYToEdgeOfMap;
    fixed lv_targetAngle;
    fixed lv_cosineofTargetAngle;
    fixed lv_triangle1C;
    fixed lv_triangle2C;
    fixed lv_casterTriangle1C;
    fixed lv_casterTriangle2C;
    point lv_abilityTargetPoint;

    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Implementation
    if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_casterXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_casterPoint));
        lv_casterYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_casterPoint));
        lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_casterXToEdgeOfMap = PointGetX(lv_casterPoint);
        lv_casterYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_casterPoint));
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 90.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_casterXToEdgeOfMap = PointGetX(lv_casterPoint);
        lv_casterYToEdgeOfMap = PointGetY(lv_casterPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 180.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_casterXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_casterPoint));
        lv_casterYToEdgeOfMap = PointGetY(lv_casterPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 270.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    if ((lv_abilityTargetPoint != null)) {
        return lv_abilityTargetPoint;
    }
    else {
        return null;
    }
}

text libCOMI_gf_CC_StoryArmyUnitUnitType2 (string lp_unitType) {
    int autoC0C83786_ae;
    int autoC0C83786_ai;

    // Variable Declarations
    int lv_i;
    bool lv_matchFound;
    text lv_returnText;

    // Variable Initialization

    // Implementation
    autoC0C83786_ae = UserDataInstanceCount("NovaUnitRanks");
    autoC0C83786_ai = 1;
    lv_i = 1;
    for ( ; ( (autoC0C83786_ai >= 0 && lv_i <= autoC0C83786_ae) || (autoC0C83786_ai <= 0 && lv_i >= autoC0C83786_ae) ) ; lv_i += autoC0C83786_ai ) {
        if ((lp_unitType == UserDataGetGameLink("NovaUnitRanks", UserDataInstance("NovaUnitRanks", lv_i), "RankUnitType", 1))) {
            return UserDataGetText("NovaUnitRanks", UserDataInstance("NovaUnitRanks", lv_i), "Rank", 1);
            return null;
        }

    }
    return lv_returnText;
}

text libCOMI_gf_CC_StoryArmyUnitUnitType (int lp_armyUnit) {
    // Implementation
    return UserDataGetText("NovaUnitNames", UserDataInstance("NovaUnitNames", lp_armyUnit), "Name", 1);
}

void libCOMI_gf_NovaUnitNames_KillUpdateText (unit lp_updatingUnit, int lp_iD) {
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_55059129", "Rank", libCOMI_gf_CC_StoryArmyUnitUnitType2(UnitGetType(lp_updatingUnit)));
    TextExpressionSetToken("Param/Expression/lib_COMI_55059129", "NameVar", libCOMI_gv_cM_NovaUnitName_Text[lp_iD]);
    TextExpressionSetToken("Param/Expression/lib_COMI_55059129", "Kills", IntToText(libNtve_gf_UnitGetPropertyKills(lp_updatingUnit, c_unitPropCurrent)));
    UnitSetInfoText2(lp_updatingUnit, TextExpressionAssemble("Param/Expression/lib_COMI_55059129"));
}

void libCOMI_gf_CM_ModifyCooldown (string lp_cooldownName, int lp_player) {
    // Variable Declarations
    fixed lv_r;
    fixed lv_r2;

    // Variable Initialization

    // Implementation
    lv_r = PlayerGetChargeRegen(lp_player, lp_cooldownName);
    lv_r2 = PlayerGetChargeUsed(lp_player, lp_cooldownName);
    PlayerAddChargeRegenRemaining(lp_player, lp_cooldownName, (300.0 - lv_r));
    PlayerAddChargeUsed(lp_player, lp_cooldownName, (4.0 - lv_r2));
}

void libCOMI_gf_CM_Stukov_SingleUnitGoToRally (unit lp_rallyingUnit, bool lp_overrideExistingOrders) {
    // Implementation
    if (((UnitOrderCount(lp_rallyingUnit) == 0) || (lp_overrideExistingOrders == true))) {
        if ((libCOMI_gv_cM_Stukov_RallyTarget == null)) {
            if ((libCOMI_gv_cM_Stukov_RallyPoint != null)) {
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), libCOMI_gv_cM_Stukov_RallyPoint), c_orderQueueReplace);
            }

        }
        else {
            if ((UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget, "ExpansionRocks") == true)) {
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMI_gv_cM_Stukov_RallyTarget)), c_orderQueueReplace);
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(AbilityCommand("attack", 0), libCOMI_gv_cM_Stukov_RallyTarget), c_orderQueueAddToEnd);
            }
            else {
                if (((UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget, "NydusNetworkConjoined") == true) || (UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget, "NydusWormConjoined") == true) || (UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget, "GreaterNydusWormConjoined") == true))) {
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMI_gv_cM_Stukov_RallyTarget)), c_orderQueueReplace);
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(null, libCOMI_gv_cM_Stukov_RallyTarget), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(AbilityCommand("move", 3), libCOMI_gv_cM_Stukov_RallyTarget), c_orderQueueReplace);
                }
            }
        }
    }

}

void libCOMI_gf_CM_Stukov_HordeGoToRally () {
    // Implementation
    if (((libCOMI_gv_cM_Stukov_RallyTarget == null) || (UnitIsAlive(libCOMI_gv_cM_Stukov_RallyTarget) == false))) {
        if ((libCOMI_gv_cM_Stukov_RallyPoint != null)) {
            UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup, OrderTargetingPoint(AbilityCommand("move", 3), libCOMI_gv_cM_Stukov_RallyPoint), c_orderQueueReplace);
        }

    }
    else {
        if ((UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget, "ExpansionRocks") == true)) {
            UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMI_gv_cM_Stukov_RallyTarget)), c_orderQueueReplace);
            UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup, OrderTargetingUnit(AbilityCommand("attack", 0), libCOMI_gv_cM_Stukov_RallyTarget), c_orderQueueAddToEnd);
        }
        else {
            if (((UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget, "NydusNetworkConjoined") == true) || (UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget, "NydusWormConjoined") == true) || (UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget, "GreaterNydusWormConjoined") == true))) {
                UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMI_gv_cM_Stukov_RallyTarget)), c_orderQueueReplace);
                UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup, OrderTargetingUnit(null, libCOMI_gv_cM_Stukov_RallyTarget), c_orderQueueAddToEnd);
            }
            else {
                UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup, OrderTargetingUnit(AbilityCommand("move", 3), libCOMI_gv_cM_Stukov_RallyTarget), c_orderQueueReplace);
            }
        }
    }
}

void libCOMI_gf_CM_Stukov_NewBunkerUnitProcess (unit lp_newUnit) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = lp_newUnit;

    // Implementation
    if ((UnitHasBehavior2(lp_newUnit, "SIBarracksTrainTimedLifeHasBeenApplied") == false)) {
        UnitBehaviorAdd(lv_unit, "SIBarracksTrainTimedLifeHasBeenApplied", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "SIInfestedBunkerTrainTimedLife", lv_unit, 1);
        UnitSetState(lv_unit, c_unitStateUsingSupply, false);
    }

    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeGroup, lv_unit);
    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeCurrentWave, lv_unit);
    libCOMI_gv_cM_Stukov_HordeCount = UnitGroupCount(libCOMI_gv_cM_Stukov_HordeGroup, c_unitCountAlive);
    libCOMI_gf_CM_Stukov_SingleUnitGoToRally(lp_newUnit, true);
}

void libCOMI_gf_ResourcePickupAlly (int lp_player, int lp_minerals, int lp_vespene) {
    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_minerals);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_vespene);
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), PlayerGroupLoopCurrent(), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
}

void libCOMI_gf_CM_SoACasterUnitSet (unit lp_unit, int lp_player) {
    // Implementation
    libCOMI_gv_cM_SoACasterUnit[lp_player] = lp_unit;
    libCOMI_gv_cM_SoACasterGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(lp_unit);
}

void libCOMI_gf_CM_SoATargetingModeEnter (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    while (!((libCOMI_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
        return ;
    }

    TriggerEnable(libCOMI_gt_CM_SoATargetingCancel, true);
    libCOMI_gv_cM_SoAExitInstantly = false;
    libCOMI_gv_cM_SoATargetingUsageCount += 1;
    libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] = 0;
    libCOUI_gf_CU_TargetingSetCharges(libCOMI_gv_cM_SoATargetingChargesTotal[lp_player], libCOMI_gv_cM_SoATargetingChargesTotal[lp_player], lp_player);
    if ((libCOMI_gv_cM_SoATargetingOrder[lp_player] != null)) {
        TriggerEnable(libCOMI_gt_CM_SoATargetingPointChosen, true);
        TriggerEnable(libCOMI_gt_CM_SoATargetingDirectionChosen, true);
        UISetTargetingOrder(PlayerGroupSingle(lp_player), libCOMI_gv_cM_SoACasterGroup[lp_player], libCOMI_gv_cM_SoATargetingOrder[lp_player], false);
        libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_Location;
    }
    else {
        libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_None;
    }
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = true;
    libCOUI_gf_PU_TargetingUI_EnterTargetingMode(true, false, lp_player);
    libCOUI_gf_CU_TargetingSetInstructionText(libCOMI_gv_cM_SoATargetingInstructionsPrimary[lp_player], lp_player);
    libCOMI_gf_CM_SetFogAlphaOverTime(100.0, 0.5, lp_player);
    CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
    CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
    CameraSetData(PlayerGroupSingle(lp_player), "SOATargetingModeCamera");
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMI_gv_cM_SoATargetingCycling[lp_player] = false;
}

void libCOMI_gf_CM_SoATargetingModeExit (int lp_player) {
    // Implementation
    libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_None;
    while (!((libCOMI_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = true;
    if ((libCOMI_gv_cM_SoAExitInstantly == true)) {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
    }
    else {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
    }
    CameraSetData(PlayerGroupSingle(lp_player), "Dflt");
    if ((libCOMI_gv_cM_SoAExitInstantly == true)) {
        VisResetFoWAlpha(lp_player);
        libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, true, lp_player);
    }
    else {
        libCOMI_gf_CM_ResetFogAlphaOverTime(0.5, lp_player);
        libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, false, lp_player);
    }
    libNtve_gf_RestoreUnitSelection(lp_player);
    libCOMI_gv_cM_SoATargetingActivateAbility[lp_player] = null;
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMI_gv_cM_SoATargetingUsageCount -= 1;
    if ((libCOMI_gv_cM_SoATargetingUsageCount == 0)) {
        TriggerEnable(libCOMI_gt_CM_SoATargetingCancel, false);
        TriggerEnable(libCOMI_gt_CM_SoATargetingPointChosen, false);
        TriggerEnable(libCOMI_gt_CM_SoATargetingDirectionChosen, false);
    }

}

void libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits (int lp_player) {
    int autoA7000234_ae;
    int autoA7000234_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    autoA7000234_ae = libCOMI_gv_cMC_SOATARGETCOUNTMAX;
    autoA7000234_ai = 1;
    lv_index = 1;
    for ( ; ( (autoA7000234_ai >= 0 && lv_index <= autoA7000234_ae) || (autoA7000234_ai <= 0 && lv_index >= autoA7000234_ae) ) ; lv_index += autoA7000234_ai ) {
        if ((libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player] != null)) {
            ActorSend(libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player], "Signal Destroy");
            libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player] = null;
        }

        if ((libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player] != null)) {
            UnitRemove(libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player]);
            libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player] = null;
        }

    }
}

trigger auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
fixed auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration;
int auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player;

void libCOMI_gf_CM_SetFogAlphaOverTime (fixed lp_targetAlpha, fixed lp_duration, int lp_player) {
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha = lp_targetAlpha;
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger == null) {
        auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_SetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_SetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_targetAlpha = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
    fixed lp_duration = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player;

    int autoE1EEDFCD_n;
    int autoE1EEDFCD_i;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;

    // Variable Initialization

    // Implementation
    if (((libCOMU_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMU_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lp_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    autoE1EEDFCD_n = lv_increments;
    for (autoE1EEDFCD_i = 1; autoE1EEDFCD_i <= autoE1EEDFCD_n; autoE1EEDFCD_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisSetFoWAlpha(lp_player, lp_targetAlpha);
    return true;
}

trigger auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration;
int auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player;

void libCOMI_gf_CM_ResetFogAlphaOverTime (fixed lp_duration, int lp_player) {
    auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger == null) {
        auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_ResetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_ResetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_duration = auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player;

    int auto26F5891F_n;
    int auto26F5891F_i;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;
    fixed lv_targetAlpha;

    // Variable Initialization

    // Implementation
    if (((libCOMU_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMU_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    VisResetFoWAlpha(lp_player);
    lv_targetAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lv_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    VisSetFoWAlpha(lp_player, lv_currentAlpha);
    auto26F5891F_n = lv_increments;
    for (auto26F5891F_i = 1; auto26F5891F_i <= auto26F5891F_n; auto26F5891F_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisResetFoWAlpha(lp_player);
    return true;
}

void libCOMI_gf_CM_SoATargetingCancel (int lp_player) {
    // Implementation
    UnitIssueOrder(libCOMI_gv_cM_SoACasterUnit[lp_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits(lp_player);
    if ((libCOMI_gv_cM_SoATargetingUnitType[lp_player] != null) && (libCOMI_gv_cM_SoATargetingPhase[lp_player] == libCOMI_ge_CM_SoATargetingPhaseType_Direction)) {
        libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] -= 1;
    }

    if ((libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] == 0)) {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_SoACasterUnit[lp_player], libCOMI_gv_cM_SoATargetingActivateAbility[lp_player], libCOMI_gv_cM_SoATargetingCooldown[lp_player]);
        UnitSetPropertyFixed(libCOMI_gv_cM_SoACasterUnit[lp_player], c_unitPropEnergy, (UnitGetPropertyFixed(libCOMI_gv_cM_SoACasterUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent) + libNtve_gf_CostOfAbility(libCOMI_gv_cM_SoATargetingActivateAbility[lp_player], "Energy")));
        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, libCOMI_gv_cM_NovaGriffinBombingRunCost);
        }

    }

    UnitBehaviorRemove(libCOMI_gv_cM_SoACasterUnit[lp_player], libCOMI_gv_cM_SoATargetingBehavior[lp_player], 1);
}

void libCOMI_gf_CM_SoATimeFreezeApply (int lp_castingPlayer) {
    // Implementation
    libCOOC_gf_CC_AchievementToggleTimeStop(true);
    PlayerCreateEffectPoint(lp_castingPlayer, "SOATimeFreezeVisual", Point(PointGetX(CameraGetTarget(lp_castingPlayer)), PointGetY(CameraGetTarget(lp_castingPlayer))));
    libCOOC_gf_CC_TimeAITemporarySet(true);
    TriggerEnable(libCOMI_gt_CM_SoATimeFreezeCleanup, true);
    TimerStart(libCOMI_gv_cM_SoATimeFreezeTimer, CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOATimeFreeze", "Duration", c_playerAny), false, c_timeGame);
}

fixed libCOMI_gf_Lerp (fixed lp_valueZero, fixed lp_valueOne, fixed lp_amount) {
    // Implementation
    return ((1 - lp_amount) * lp_valueZero + lp_amount*lp_valueOne);
}

int libCOMI_gf_DifficultyValueInt2 (int lp_difficulty, int lp_beginner, int lp_normal, int lp_advanced, int lp_expert, int lp_virtuoso, int lp_master) {
    int autoA10F946A_val;

    // Implementation
    autoA10F946A_val = lp_difficulty;
    if (autoA10F946A_val == 1) {
        return lp_beginner;
    }
    else if (autoA10F946A_val == 2) {
        return lp_normal;
    }
    else if (autoA10F946A_val == 3) {
        return lp_advanced;
    }
    else if (autoA10F946A_val == 4) {
        return lp_expert;
    }
    else if (autoA10F946A_val == 5) {
        return lp_virtuoso;
    }
    else if (autoA10F946A_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_1BD6E20E"), true);
        return -1;
    }
}

fixed libCOMI_gf_DifficultyValueFixed2 (int lp_difficulty, fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master) {
    int auto0E3D2A41_val;

    // Implementation
    auto0E3D2A41_val = lp_difficulty;
    if (auto0E3D2A41_val == 1) {
        return lp_beginner;
    }
    else if (auto0E3D2A41_val == 2) {
        return lp_normal;
    }
    else if (auto0E3D2A41_val == 3) {
        return lp_advanced;
    }
    else if (auto0E3D2A41_val == 4) {
        return lp_expert;
    }
    else if (auto0E3D2A41_val == 5) {
        return lp_virtuoso;
    }
    else if (auto0E3D2A41_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_AC873AC0"), true);
        return -1.0;
    }
}

string libCOMI_gf_DifficultyValueFixed3 (int lp_difficulty, string lp_beginner, string lp_normal, string lp_advanced, string lp_expert, string lp_virtuoso, string lp_master) {
    int autoB51CE0AB_val;

    // Implementation
    autoB51CE0AB_val = lp_difficulty;
    if (autoB51CE0AB_val == 1) {
        return lp_beginner;
    }
    else if (autoB51CE0AB_val == 2) {
        return lp_normal;
    }
    else if (autoB51CE0AB_val == 3) {
        return lp_advanced;
    }
    else if (autoB51CE0AB_val == 4) {
        return lp_expert;
    }
    else if (autoB51CE0AB_val == 5) {
        return lp_virtuoso;
    }
    else if (autoB51CE0AB_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_68A54BFE"), true);
        return null;
    }
}

bool libCOMI_gf_DifficultyValueFixed4 (int lp_difficulty, bool lp_beginner, bool lp_normal, bool lp_advanced, bool lp_expert, bool lp_virtuoso, bool lp_master) {
    int auto76AE2043_val;

    // Implementation
    auto76AE2043_val = lp_difficulty;
    if (auto76AE2043_val == 1) {
        return lp_beginner;
    }
    else if (auto76AE2043_val == 2) {
        return lp_normal;
    }
    else if (auto76AE2043_val == 3) {
        return lp_advanced;
    }
    else if (auto76AE2043_val == 4) {
        return lp_expert;
    }
    else if (auto76AE2043_val == 5) {
        return lp_virtuoso;
    }
    else if (auto76AE2043_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_74421686"), true);
        return false;
    }
}

int libCOMI_gf_MinimumDifficultyValueCoopInteger (int lp_casual, int lp_normal, int lp_hard, int lp_brutal, int lp_extreme, int lp_unlikely) {
    // Implementation
    if (((PlayerDifficulty(1) <= libCOMI_gf_DifficultyLevelForPlayerCoop(2)) == true)) {
        return libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(1), lp_casual, lp_normal, lp_hard, lp_brutal, lp_extreme, lp_unlikely);
    }

    return libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(2), lp_casual, lp_normal, lp_hard, lp_brutal, lp_extreme, lp_unlikely);
}

fixed libCOMI_gf_MinimumDifficultyValueCoopReal (fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master) {
    // Implementation
    if (((PlayerDifficulty(1) <= libCOMI_gf_DifficultyLevelForPlayerCoop(2)) == true)) {
        return libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(1), lp_beginner, lp_normal, lp_advanced, lp_expert, lp_virtuoso, lp_master);
    }

    return libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(2), lp_beginner, lp_normal, lp_advanced, lp_expert, lp_virtuoso, lp_master);
}

void libCOMI_gf_CM_MissionEndAwardAchievements (int lp_player) {
    int autoD7DFB478_val;

    // Implementation
    if ((libCOMI_gv_cM_EndMissionResult[lp_player] != c_gameOverVictory)) {
        return ;
    }

    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    autoD7DFB478_val = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (autoD7DFB478_val == 1) {
        AchievementAward(lp_player, "DifficultyRecruit1");
    }
    else if (autoD7DFB478_val == 2) {
        AchievementAward(lp_player, "DifficultyRecruit1");
        AchievementAward(lp_player, "DifficultySoldier1");
    }
    else if (autoD7DFB478_val == 3) {
        AchievementAward(lp_player, "DifficultyRecruit1");
        AchievementAward(lp_player, "DifficultySoldier1");
        AchievementAward(lp_player, "DifficultyVeteran1");
    }
    else if (autoD7DFB478_val == 4) {
        AchievementAward(lp_player, "DifficultyRecruit1");
        AchievementAward(lp_player, "DifficultySoldier1");
        AchievementAward(lp_player, "DifficultyVeteran1");
        AchievementAward(lp_player, "DifficultyCommander1");
    }
    else {
    }
    AchievementTermQuantitySet(lp_player, libCOOC_gf_CC_MapAchievementTerm(libCOOC_gf_CC_CurrentMap(), libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player)), 1);
}

void libCOMI_gf_GameOver (int lp_gameOverType) {
    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_GameOverResult = lp_gameOverType;
    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
}

bool libCOMI_gf_GameIsOver () {
    // Implementation
    return (libCOMI_gv_cM_GameOverResult != libCOMI_ge_CampaignMissionGameResultType_None);
}

void libCOMI_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Implementation
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(false);
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libCOMI_gv_cM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(lp_victoryCinematic, true, false);
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libCOMI_gf_EndCampaignMission (int lp_type) {
    playergroup auto38057D5B_g;
    int auto38057D5B_p;
    playergroup auto86D69DDE_g;
    int auto86D69DDE_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    PerfTestStop();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(true);
    auto38057D5B_g = libCOOC_gf_NondefeatedPlayers(); 
    auto38057D5B_p = 1;
    for ( ; auto38057D5B_p <= PlayerGroupCount(auto38057D5B_g) ; auto38057D5B_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto38057D5B_g, auto38057D5B_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto38057D5B_g, auto38057D5B_p);
        libCOOC_gf_CC_PlayerAwardMissionXP(lp_type, lv_indexPlayer);
        libCOOC_gf_CC_SaveAllTransitionData((lp_type != c_gameOverVictory), lv_indexPlayer);
        libCOMI_gv_cM_EndMissionResult[lv_indexPlayer] = lp_type;
        libCOMI_gf_CM_MissionEndAwardAchievements(lv_indexPlayer);
    }
    auto86D69DDE_g = libCOOC_gf_HumanPlayers(); 
    auto86D69DDE_p = 1;
    for ( ; auto86D69DDE_p <= PlayerGroupCount(auto86D69DDE_g) ; auto86D69DDE_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto86D69DDE_g, auto86D69DDE_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto86D69DDE_g, auto86D69DDE_p);
        if ((lp_type == c_gameOverVictory)) {
            UIAlert("VictoryAlertCoop", lv_indexPlayer, StringToText(""), null);
        }

        if ((lp_type == c_gameOverDefeat)) {
            UIAlert("DefeatAlertCoop", lv_indexPlayer, StringToText(""), null);
        }

        if ((lp_type == c_gameOverTie)) {
            UIAlert("DrawAlertCoop", lv_indexPlayer, StringToText(""), null);
        }

        libCOOC_gf_CC_SetPlayerDefeated(lv_indexPlayer);
        if ((libCOOC_gv_cC_InContestMap == true)) {
            GameOver(lv_indexPlayer, libCOMI_gv_cM_EndMissionResult[lv_indexPlayer], true, true);
        }
        else {
            libCOUI_gf_CU_FanfareDisplay(lp_type, lv_indexPlayer);
        }
    }
    if ((libCOOC_gf_CoopDebugModeIsOn("LogPerf", 1) == true)) {
        PerfTestStop();
        TriggerStop(libCOMI_gt_CM_CampaignMissionPerfLog);
    }

}

void libCOMI_gf_ZerglingRespawnSetPrimaryHatchery (unit lp_hatchery) {
    // Implementation
    UnitCreateEffectUnit(lp_hatchery, "ZerglingRespawnPrimaryRemoveOthers", lp_hatchery);
    UnitBehaviorAdd(lp_hatchery, "ZerglingRespawnPrimary", lp_hatchery, 1);
    libCOMI_gv_cM_PrimaryTownHall[UnitGetOwner(lp_hatchery)] = lp_hatchery;
}

unit libCOMI_gf_CM_PrimaryTownHall (int lp_player) {
    // Implementation
    if (((UnitIsAlive(libCOMI_gv_cM_PrimaryTownHall[lp_player]) == false) || (UnitFilterMatch(libCOMI_gv_cM_PrimaryTownHall[lp_player], lp_player, UnitFilter((1 << c_targetFilterGround), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
        return null;
    }

    return libCOMI_gv_cM_PrimaryTownHall[lp_player];
}

unitgroup libCOMI_gf_CM_TownHallUnits (int lp_player) {
    string autoF1AFE688_val;

    // Variable Declarations
    unitgroup lv_townHallGroup;

    // Variable Initialization
    lv_townHallGroup = UnitGroupEmpty();

    // Implementation
    autoF1AFE688_val = libCOOC_gf_CC_CommanderRace(libCOOC_gf_ActiveCommanderForPlayer(lp_player));
    if (autoF1AFE688_val == "Zerg") {
        lv_townHallGroup = UnitGroup("Hive", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("Lair", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("Hatchery", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("SICommandCenter", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else if (autoF1AFE688_val == "Terr") {
        lv_townHallGroup = UnitGroup("CommandCenter", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("OrbitalCommand", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("PlanetaryFortress", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else if (autoF1AFE688_val == "Prot") {
        lv_townHallGroup = UnitGroup("Nexus", lp_player, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else {
    }
    return lv_townHallGroup;
}

void libCOMI_gf_CM_StartingTechForHumanPlayer (int lp_player) {
    unitgroup auto15C64F69_g;
    int auto15C64F69_u;
    unitgroup autoB2884491_g;
    int autoB2884491_u;
    string auto11CC9962_val;

    // Variable Declarations
    point lv_spawnPoint;
    point lv_mineralPoint;
    unitgroup lv_geysers;
    int lv_unitIter;
    fixed lv_distance;
    fixed lv_startingAngle;
    fixed lv_placementAngle;
    unit lv_townHall;
    unit lv_workerRally;
    point lv_mercSpawnPoint;
    unit lv_indexHatchery;

    // Variable Initialization
    lv_geysers = UnitGroupEmpty();

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_156ACD5F", "A", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_156ACD5F"), false);
    if ((PlayerStartLocation(lp_player) == null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_6FCB8F89", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_6FCB8F89"), false);
        return ;
    }

    MeleeInitUnitsForPlayer(lp_player, libCOOC_gf_CC_CommanderSpawnRace(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), PlayerStartLocation(lp_player));
    auto15C64F69_g = UnitGroup("Hatchery", lp_player, RegionCircle(PlayerStartLocation(lp_player), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto15C64F69_u = 1;
    for ( ; auto15C64F69_u <= UnitGroupCount(auto15C64F69_g, c_unitCountAll) ; auto15C64F69_u += BoolToInt(lv_indexHatchery == UnitGroupUnit(auto15C64F69_g, auto15C64F69_u)) ) {
        lv_indexHatchery = UnitGroupUnit(auto15C64F69_g, auto15C64F69_u);
        UnitBehaviorAdd(lv_indexHatchery, "SpawnLarvaInstant", lv_indexHatchery, 3);
    }
    autoB2884491_g = UnitGroup("SICommandCenter", lp_player, RegionCircle(PlayerStartLocation(lp_player), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2884491_u = 1;
    for ( ; autoB2884491_u <= UnitGroupCount(autoB2884491_g, c_unitCountAll) ; autoB2884491_u += BoolToInt(lv_indexHatchery == UnitGroupUnit(autoB2884491_g, autoB2884491_u)) ) {
        lv_indexHatchery = UnitGroupUnit(autoB2884491_g, autoB2884491_u);
        UnitBehaviorAdd(lv_indexHatchery, "SpawnLarvaInstant", lv_indexHatchery, 3);
    }
    auto11CC9962_val = PlayerRace(lp_player);
    if (auto11CC9962_val == "Prot") {
        if ((TechTreeUpgradeCount(lp_player, "FenixCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Fenix_TriggersInit, true, false);
        }

    }
    else if (auto11CC9962_val == "Terr") {
        if ((TechTreeUpgradeCount(lp_player, "SwannCommander", c_techCountCompleteOnly) == 1)) {
            if ((TechTreeUpgradeCount(lp_player, "SwannCommanderStartingOrbitalCommand", c_techCountCompleteOnly) == 1)) {
                UnitGroupLoopBegin(UnitGroup("CommandCenter", lp_player, RegionCircle(PlayerStartLocation(lp_player), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("UpgradeToOrbitalCoop", 0)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
            }

            if ((TechTreeUpgradeCount(lp_player, "SwannCommanderStartingRefinery", c_techCountCompleteOnly) == 1)) {
                UnitGroupAddUnitGroup(lv_geysers, UnitGroup("VespeneGeyser", c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                UnitGroupAddUnitGroup(lv_geysers, UnitGroup("ProtossVespeneGeyser", c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                UnitGroupAddUnitGroup(lv_geysers, UnitGroup("SpacePlatformGeyser", c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                if ((TechTreeUpgradeCount(lp_player, "AutoHarvester", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AutomatedRefinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 1)));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AutomatedRefinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 2)));
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 1)));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 2)));
                }
            }

        }

        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Nova_TriggersInit, true, false);
        }

    }
    else if (auto11CC9962_val == "Zerg") {
        if ((TechTreeUpgradeCount(lp_player, "KerriganCommander", c_techCountCompleteOnly) == 1)) {
            TriggerEnable(libCOMI_gt_KerriganEconDrop, true);
            libCOMI_gf_CM_KerriganMalignantCreep();
        }

        if ((TechTreeUpgradeCount(lp_player, "AbathurCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Abathur_TriggersInit, true, false);
        }

        if ((TechTreeUpgradeCount(lp_player, "StukovCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Stukov_TriggersInit, true, false);
        }

    }
    else {
    }
    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganArmyGasCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasterySwannImmortalityProtocol", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryAlarakUnitAttackSpeed", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryWeaponListFromUpgradeAttackSpeedBonus(lp_player, "MasteryAlarakUnitAttackSpeed", 0.005);
    }

    if ((TechTreeUpgradeCount(lp_player, libCOMI_gv_cM_MasteryAlarakOverchargeAttackSpeed_Link, c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryAlarakOverchargeAttackSpeed(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryNovaWeaponAttackSpeed", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryWeaponListFromUpgradeAttackSpeedBonus(lp_player, "MasteryNovaWeaponAttackSpeed", 0.01);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryNovaArmyAttackSpeed", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryWeaponListFromUpgradeAttackSpeedBonus(lp_player, "MasteryNovaArmyAttackSpeed", 0.005);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKaraxUnitCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList2(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganImmobilizationWaveDamage", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganImmobilizationWaveDamage(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganMutatingCarapaceLifeDegradation", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganMutatingCarapaceDegradation(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganResearchSpeedandCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganResearchSpeedCost(lp_player);
    }

    TechTreeBehaviorAllow(lp_player, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, false);
    if ((TechTreeUpgradeCount(lp_player, "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryZagraRoachLifeIncrease(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryStukovMechAttackSpeed", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryWeaponListFromUpgradeAttackSpeedBonus(lp_player, "MasteryStukovMechAttackSpeed", 0.01);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryFenixSuitAttackSpeed", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryWeaponListFromUpgradeAttackSpeedBonus(lp_player, "MasteryFenixSuitAttackSpeed", 0.01);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryFenixChampionAttackSpeed", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryWeaponListFromUpgradeAttackSpeedBonus(lp_player, "MasteryFenixChampionAttackSpeed", 0.01);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryFenixReducedResearchCosts", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryResearchCostReduction(lp_player, "MasteryFenixReducedResearchCosts", 1.0);
    }

    libCOMI_gf_VoicePackOverridesApply(lp_player);
}

void libCOMI_gf_VoicePackOverridesApply (int lp_player) {
    int auto08666BD0_catalog;
    int auto08666BD0_i;
    int auto895D551D_catalog;
    int auto895D551D_i;

    // Variable Declarations
    string lv_itReward;
    string lv_appReward;
    string lv_rewardStringIDCombine;

    // Variable Initialization
    lv_rewardStringIDCombine = "";

    // Implementation
    auto08666BD0_catalog = c_gameCatalogReward;
    auto08666BD0_i = 1;
    for ( ; auto08666BD0_i <= CatalogEntryCount(c_gameCatalogReward) ; auto08666BD0_i += 1 ) {
        lv_itReward = CatalogEntryGet(auto08666BD0_catalog, auto08666BD0_i);
        if ((CatalogEntryScope(c_gameCatalogReward, lv_itReward) == "CRewardVoicePack")) {
            if ((PlayerHasReward(lp_player, lv_itReward) == true)) {
                lv_rewardStringIDCombine = (((lv_itReward) + "_" + (libCOOC_gf_ActiveCommanderForPlayer(lp_player))));
                auto895D551D_catalog = c_gameCatalogReward;
                auto895D551D_i = 1;
                for ( ; auto895D551D_i <= CatalogEntryCount(c_gameCatalogReward) ; auto895D551D_i += 1 ) {
                    lv_appReward = CatalogEntryGet(auto895D551D_catalog, auto895D551D_i);
                    if ((CatalogEntryScope(c_gameCatalogReward, lv_appReward) == "CRewardVoicePack")) {
                        if (((lv_appReward) == lv_rewardStringIDCombine)) {
                            PlayerAddReward(lp_player, lv_rewardStringIDCombine);
                        }

                    }

                }
            }

        }

    }
}

void libCOMI_gf_EnableDisableZerglingRespawn (bool lp_enableDisable) {
    playergroup auto01668500_g;
    int auto01668500_p;
    playergroup auto08715052_g;
    int auto08715052_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        auto08715052_g = libCOOC_gf_HumanPlayers(); 
        auto08715052_p = 1;
        for ( ; auto08715052_p <= PlayerGroupCount(auto08715052_g) ; auto08715052_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto08715052_g, auto08715052_p)) ) {
            lv_indexPlayer = PlayerGroupPlayer(auto08715052_g, auto08715052_p);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawn", 0), true);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnPrimary", 0), true);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnDeath", 0), true);
        }
        TriggerEnable(libCOMI_gt_CM_HatcheryPrimarySearch, true);
    }
    else {
        auto01668500_g = libCOOC_gf_HumanPlayers(); 
        auto01668500_p = 1;
        for ( ; auto01668500_p <= PlayerGroupCount(auto01668500_g) ; auto01668500_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto01668500_g, auto01668500_p)) ) {
            lv_indexPlayer = PlayerGroupPlayer(auto01668500_g, auto01668500_p);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawn", 0), false);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnPrimary", 0), false);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnDeath", 0), false);
        }
        TriggerEnable(libCOMI_gt_CM_HatcheryPrimarySearch, false);
    }
}

trigger auto_libCOMI_gf_CM_HeroHandleDeath_Trigger = null;
int auto_libCOMI_gf_CM_HeroHandleDeath_lp_player;

void libCOMI_gf_CM_HeroHandleDeath (int lp_player) {
    auto_libCOMI_gf_CM_HeroHandleDeath_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_HeroHandleDeath_Trigger == null) {
        auto_libCOMI_gf_CM_HeroHandleDeath_Trigger = TriggerCreate("auto_libCOMI_gf_CM_HeroHandleDeath_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_HeroHandleDeath_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_HeroHandleDeath_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_HeroHandleDeath_lp_player;

    // Variable Declarations
    text lv_tip;
    text lv_subtip;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_HeroDeathCount[lp_player] += 1;
    libCOMI_gv_zS_ReviveCooldownTimeKerrigan = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, libCOOC_gf_CC_CommanderHeroNormalReviveBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), "Duration", lp_player));
    libCOUI_gv_cU_HeroReviveTimer[1][lp_player] = libCOMI_gv_zS_ReviveCooldownTimeKerrigan;
    if (((PlayerRace(lp_player) == "Terr") && (TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 0))) {
        return true;
    }

    if (((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0))) {
        if ((libCOMI_gf_CM_PrimaryTownHall(lp_player) == null)) {
            libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lp_player), libCOMI_ge_CampaignMessageType_Warning, libCOMI_gf_CM_HeroReviveMsgNoTownHall(lp_player), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        else {
            libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lp_player), libCOMI_ge_CampaignMessageType_Warning, libCOMI_gf_CM_HeroNormalReviveMsgPending(lp_player), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        libNtve_gf_PlayerRemoveCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            TechTreeUpgradeAddLevel(lp_player, "NovaBuybackUnlock", 1);
        }

        Wait(2.0, c_timeGame);
    }
    else {
        libNtve_gf_PlayerRemoveCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
        Wait(0.0625, c_timeGame);
    }
    while ((libCOMI_gf_CM_PrimaryTownHall(lp_player) == null)) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(libCOMI_gv_cM_HeroUnit[lp_player]) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOOC_gf_CC_CommanderHeroReviveUnitType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), 0, lp_player, UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lp_player)));
        libCOMI_gv_cM_HeroReviver[lp_player] = UnitLastCreated();
        if ((PlayerRace(lp_player) == "Zerg")) {
            UnitCreateEffectUnit(libCOMI_gf_CM_PrimaryTownHall(lp_player), "CopyHatcheryRally", libCOMI_gv_cM_HeroReviver[lp_player]);
        }

        libCOUI_gf_SetHeroPanelUnit(1, UnitLastCreated(), lp_player);
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            UnitBehaviorAdd(libCOMI_gv_cM_HeroReviver[lp_player], libCOOC_gf_CC_CommanderHeroNormalReviveBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_cM_HeroReviver[lp_player], 1);
            UnitBehaviorAdd(libCOMI_gv_cM_HeroReviver[lp_player], libCOOC_gf_CC_CommanderHeroReviverExtraBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_cM_HeroReviver[lp_player], 1);
            libNtve_gf_PlayerRemoveCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
            PlayerAddCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_zS_ReviveCooldownTimeKerrigan);
        }
        else {
            UnitBehaviorAdd(libCOMI_gv_cM_HeroReviver[lp_player], libCOOC_gf_CC_CommanderHeroFirstReviveBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_cM_HeroReviver[lp_player], 1);
            libCOMI_gv_zS_ReviveCooldownTimeKerrigan = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, libCOOC_gf_CC_CommanderHeroFirstReviveBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), "Duration", lp_player));
            libCOUI_gv_cU_HeroReviveTimer[1][lp_player] = libCOMI_gv_zS_ReviveCooldownTimeKerrigan;
            libNtve_gf_PlayerRemoveCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
            PlayerAddCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_zS_ReviveCooldownTimeKerrigan);
        }
        UnitIssueOrder(libCOMI_gv_cM_HeroReviver[lp_player], OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), libCOMI_gv_cM_HeroReviver[lp_player]), c_orderQueueReplace);
        UnitIssueOrder(libCOMI_gv_cM_HeroReviver[lp_player], OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), libCOMI_gv_cM_HeroReviver[lp_player]), c_orderQueueReplace);
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            UnitSetState(libCOMI_gv_cM_HeroReviver[lp_player], c_unitStateTooltipable, true);
            lv_tip = UnitTypeGetName(UnitGetType(libCOMI_gv_cM_HeroReviver[lp_player]));
            libCOMI_gf_SetUnitInfoTextCampaign(libCOMI_gv_cM_HeroReviver[lp_player], null, lv_tip, lv_subtip);
        }

        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
                TriggerEnable(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, true);
            }

        }

        libCOMI_gf_CM_HeroWaitForRevive(lp_player);
        Wait(10.0, c_timeGame);
        if ((UnitIsAlive(libCOMI_gv_cM_HeroUnit[lp_player]) == false) && (UnitIsValid(libCOMI_gv_cM_HeroReviver[lp_player]) == true)) {
            UnitSetPosition(libCOMI_gv_cM_HeroUnit[lp_player], UnitGetPosition(libCOMI_gv_cM_HeroReviver[lp_player]), false);
        }

    }

    return true;
}

text libCOMI_gf_CM_HeroNormalReviveMsgPending (int lp_player) {
    string auto8E21667C_val;

    // Implementation
    auto8E21667C_val = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    if (auto8E21667C_val == "ZergKerrigan") {
        TextExpressionSetToken("Param/Expression/lib_COMI_D7AD3E1A", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_D7AD3E1A");
    }
    else if (auto8E21667C_val == "ZergZagara") {
        TextExpressionSetToken("Param/Expression/lib_COMI_11BCBA90", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_11BCBA90");
    }
    else if (auto8E21667C_val == "TerranNova") {
        TextExpressionSetToken("Param/Expression/lib_COMI_F90FD3F3", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_F90FD3F3");
    }
    else if (auto8E21667C_val == "ProtossAlarak") {
        TextExpressionSetToken("Param/Expression/lib_COMI_C759BEF1", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_C759BEF1");
    }
    else {
    }
    return TextExpressionAssemble("Param/Expression/lib_COMI_0C0853FD");
}

text libCOMI_gf_CM_HeroReviveMsgNoTownHall (int lp_player) {
    string auto79E1ED1E_val;

    // Implementation
    auto79E1ED1E_val = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    if (auto79E1ED1E_val == "ZergKerrigan") {
        return StringExternal("Param/Value/lib_COMI_95EFD188");
    }
    else if (auto79E1ED1E_val == "ZergZagara") {
        return StringExternal("Param/Value/lib_COMI_261331FE");
    }
    else if (auto79E1ED1E_val == "ProtossAlarak") {
        return StringExternal("Param/Value/lib_COMI_1E4D119E");
    }
    else if (auto79E1ED1E_val == "TerranNova") {
        return StringExternal("Param/Value/lib_COMI_93FA8BC9");
    }
    else {
    }
    return TextExpressionAssemble("Param/Expression/lib_COMI_9902A686");
}

text libCOMI_gf_CM_HeroReviveMsgComplete (int lp_player) {
    string auto4AF238FC_val;

    // Implementation
    auto4AF238FC_val = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    if (auto4AF238FC_val == "ZergKerrigan") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_10C0B343");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_84DABCBC");
        }
    }
    else if (auto4AF238FC_val == "ZergZagara") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_BAEB7C3F");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_DC380D10");
        }
    }
    else if (auto4AF238FC_val == "TerranNova") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_1769E792");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_11150123");
        }
    }
    else if (auto4AF238FC_val == "ProtossAlarak") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_325425B9");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_8E0E31E2");
        }
    }
    else {
    }
    return TextExpressionAssemble("Param/Expression/lib_COMI_5386C966");
}

trigger auto_libCOMI_gf_CM_HeroWaitForRevive_Trigger = null;
int auto_libCOMI_gf_CM_HeroWaitForRevive_lp_player;

void libCOMI_gf_CM_HeroWaitForRevive (int lp_player) {
    auto_libCOMI_gf_CM_HeroWaitForRevive_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_HeroWaitForRevive_Trigger == null) {
        auto_libCOMI_gf_CM_HeroWaitForRevive_Trigger = TriggerCreate("auto_libCOMI_gf_CM_HeroWaitForRevive_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_HeroWaitForRevive_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_HeroWaitForRevive_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_HeroWaitForRevive_lp_player;

    // Variable Declarations
    point lv_reviveFallbackPoint;

    // Variable Initialization

    // Implementation
    while (!((PlayerGetCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player))) == 0.0))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCOMI_gv_cM_GameOverResult != libCOMI_ge_CampaignMissionGameResultType_None)) {
        return true;
    }

    UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[lp_player], "SuppressCollisionRevive", libCOMI_gv_cM_HeroUnit[lp_player], 1);
    if ((libCOMI_gv_cM_HeroReviveTargetLocation[lp_player] != null)) {
        UnitIssueOrder(libCOMI_gv_cM_HeroReviver[lp_player], libNtve_gf_ReviveOrderTargetingPoint(AbilityCommand("NovaRevive", 20), libCOMI_gv_cM_HeroReviveTargetLocation[lp_player], libCOMI_gv_cM_HeroUnit[lp_player]), c_orderQueueReplace);
        lv_reviveFallbackPoint = libCOMI_gv_cM_HeroReviveTargetLocation[lp_player];
        libCOMI_gv_cM_HeroReviveTargetLocation[lp_player] = null;
    }
    else {
        UnitIssueOrder(libCOMI_gv_cM_HeroReviver[lp_player], libNtve_gf_ReviveOrderWithNoTarget(libCOOC_gf_CC_CommanderHeroReviveCommand(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_cM_HeroUnit[lp_player]), c_orderQueueReplace);
        lv_reviveFallbackPoint = UnitGetPosition(libCOMI_gv_cM_HeroReviver[lp_player]);
    }
    libCOUI_gf_SetHeroPanelUnit(1, libCOMI_gv_cM_HeroUnit[lp_player], lp_player);
    Wait(0.125, c_timeGame);
    if ((UnitIsAlive(libCOMI_gv_cM_HeroUnit[lp_player]) == false)) {
        UnitRevive(libCOMI_gv_cM_HeroUnit[lp_player]);
        UnitCreateEffectUnit(libCOMI_gv_cM_HeroUnit[lp_player], libCOMI_gv_cM_HeroReviveHealEffect, libCOMI_gv_cM_HeroUnit[lp_player]);
        if ((RegionContainsPoint(RegionPlayableMap(), lv_reviveFallbackPoint) == true)) {
            UnitSetPosition(libCOMI_gv_cM_HeroUnit[lp_player], lv_reviveFallbackPoint, false);
        }

    }

    UnitGroupLoopBegin(UnitGroupSelected(lp_player));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() == libCOMI_gv_cM_HeroReviver[lp_player])) {
            UnitSelect(libCOMI_gv_cM_HeroUnit[lp_player], lp_player, true);
        }

    }
    UnitGroupLoopEnd();
    UnitKill(libCOMI_gv_cM_HeroReviver[lp_player]);
    UnitIssueOrder(libCOMI_gv_cM_HeroUnit[lp_player], Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lp_player), libCOMI_ge_CampaignMessageType_SimpleHint, libCOMI_gf_CM_HeroReviveMsgComplete(lp_player), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
        TriggerEnable(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, false);
        CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libCOOC_gf_CC_CommanderPlayer("TerranNova"), "450");
    }

    return true;
}

void libCOMI_gf_CM_HeroCreateForPlayer (point lp_spawnPoint, int lp_player, fixed lp_facing, int lp_flags) {
    // Implementation
    UnitCreate(1, libCOOC_gf_CC_CommanderHeroUnitType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), lp_flags, lp_player, lp_spawnPoint, lp_facing);
    libCOMI_gv_cM_HeroUnit[lp_player] = UnitLastCreated();
}

void libCOMI_gf_CM_HeroStructureCreateForPlayer (point lp_spawnPoint, int lp_player, fixed lp_facing, int lp_flags) {
    // Implementation
    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_player) != "ProtossFenix")) {
        UnitCreate(1, libCOOC_gf_CC_CommanderHeroStructureType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), lp_flags, lp_player, lp_spawnPoint, lp_facing);
    }
    else {
        if ((libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player)) > 1)) {
            UnitCreate(1, libCOOC_gf_CC_CommanderHeroStructureType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), lp_flags, lp_player, lp_spawnPoint, lp_facing);
        }

    }
    if ((TechTreeUpgradeCount(lp_player, "SwannCommander", c_techCountCompleteOnly) == 1)) {
        libCOMI_gv_cM_LaserDrillUnit = UnitLastCreated();
        libCOMI_gv_cM_LaserDrillUnitGroup = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
    }

    if ((TechTreeUpgradeCount(lp_player, "FenixCommander", c_techCountCompleteOnly) == 1)) {
        libCOMI_gv_cM_Fenix_ChampionStructure = UnitLastCreated();
    }

}

void libCOMI_gf_CM_GlobalCasterCreateUnit (int lp_player) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOOC_gf_CC_CommanderGlobalCastUnitType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
    libCOMI_gv_cM_GlobalCasterUnit[lp_player] = UnitLastCreated();
    libCOMI_gv_cM_GlobalCasterUnitGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_cM_GlobalCasterUnit[lp_player]);
    UnitSetState(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitStateSelectable, false);
    libCOUI_gf_CU_GPSetUnit(libCOMI_gv_cM_GlobalCasterUnit[lp_player], lp_player);
    if (((PlayerRace(lp_player) == "Prot") || (TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(lp_player, "StukovCommander", c_techCountCompleteOnly) == 1))) {
        libCOMI_gf_CM_SoACasterUnitSet(UnitLastCreated(), lp_player);
    }

}

unit libCOMI_gf_CM_GlobalCasterUnitForCommander (string lp_commanderType) {
    playergroup auto4DEC6871_g;
    int auto4DEC6871_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    auto4DEC6871_g = libCOOC_gf_HumanPlayers(); 
    auto4DEC6871_p = 1;
    for ( ; auto4DEC6871_p <= PlayerGroupCount(auto4DEC6871_g) ; auto4DEC6871_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto4DEC6871_g, auto4DEC6871_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto4DEC6871_g, auto4DEC6871_p);
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commanderType)) {
            return libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer];
        }

    }
    return null;
}

void libCOMI_gf_CreateRevealerCoop (int lp_player, region lp_area) {
    // Implementation
    libCOMI_gv_cM_RevealerCount += 1;
    VisRevealerCreate(lp_player, lp_area);
    DataTableSetRevealer(true, ("CM_Revealer_" + IntToString(libCOMI_gv_cM_RevealerCount)), VisRevealerLastCreated());
    DataTableSetBool(true, ("CM_RevealerOn_" + IntToString(libCOMI_gv_cM_RevealerCount)), true);
    if ((libCOMI_gv_cM_RevealersEnabled == false)) {
        VisRevealerEnable(VisRevealerLastCreated(), false);
    }

}

void libCOMI_gf_EnableDisableRevealerCoop (revealer lp_r, bool lp_enable) {
    // Implementation
    DataTableSetBool(true, ("CM_RevealerOn_" + IntToString(libCOMI_gf_CM_RevealerIndex(lp_r))), (lp_enable == true));
    if ((lp_enable == true) && (libCOMI_gv_cM_RevealersEnabled == false)) {
        return ;
    }

    VisRevealerEnable(lp_r, lp_enable);
}

void libCOMI_gf_DestroyRevealerCoop (revealer lp_r) {
    // Implementation
    DataTableSetRevealer(true, ("CM_Revealer_" + IntToString(libCOMI_gf_CM_RevealerIndex(lp_r))), null);
    VisRevealerDestroy(lp_r);
}

int libCOMI_gf_CM_RevealerIndex (revealer lp_revealer) {
    int autoC6418414_ae;
    int autoC6418414_ai;

    // Variable Declarations
    int lv_revealerIndex;

    // Variable Initialization

    // Implementation
    autoC6418414_ae = libCOMI_gv_cM_RevealerCount;
    autoC6418414_ai = 1;
    lv_revealerIndex = 1;
    for ( ; ( (autoC6418414_ai >= 0 && lv_revealerIndex <= autoC6418414_ae) || (autoC6418414_ai <= 0 && lv_revealerIndex >= autoC6418414_ae) ) ; lv_revealerIndex += autoC6418414_ai ) {
        if ((libCOMI_gf_CM_RevealerFromIndex(lv_revealerIndex) == lp_revealer)) {
            return lv_revealerIndex;
        }

    }
    return 0;
}

revealer libCOMI_gf_CM_RevealerFromIndex (int lp_revealerIndex) {
    // Implementation
    return DataTableGetRevealer(true, ("CM_Revealer_" + IntToString(lp_revealerIndex)));
}

void libCOMI_gf_CM_RevealersEnableDisable (bool lp_enabled) {
    int auto5A33B3FD_ae;
    int auto5A33B3FD_ai;

    // Variable Declarations
    bool lv_enableDisable;
    int lv_revealerIndex;
    revealer lv_indexRevealer;

    // Variable Initialization
    lv_enableDisable = true;

    // Implementation
    libCOMI_gv_cM_RevealersEnabled = lp_enabled;
    if ((lp_enabled == true)) {
        lv_enableDisable = true;
    }
    else {
        lv_enableDisable = false;
    }
    auto5A33B3FD_ae = libCOMI_gv_cM_RevealerCount;
    auto5A33B3FD_ai = 1;
    lv_revealerIndex = 1;
    for ( ; ( (auto5A33B3FD_ai >= 0 && lv_revealerIndex <= auto5A33B3FD_ae) || (auto5A33B3FD_ai <= 0 && lv_revealerIndex >= auto5A33B3FD_ae) ) ; lv_revealerIndex += auto5A33B3FD_ai ) {
        lv_indexRevealer = libCOMI_gf_CM_RevealerFromIndex(lv_revealerIndex);
        if ((lv_indexRevealer != null)) {
            VisRevealerEnable(lv_indexRevealer, lv_enableDisable);
        }

    }
}

void libCOMI_gf_AutoRevealRegionCoop (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player) {
    // Implementation
    if ((libLbty_gv_autoRevealers.lv_count >= 64)) {
        return ;
    }

    libCOMI_gf_CreateRevealerCoop(lp_player, lp_visibilityRegion);
    libLbty_gv_autoRevealers.lv_revealers[libLbty_gv_autoRevealers.lv_count] = VisRevealerLastCreated();
    libCOMI_gf_EnableDisableRevealerCoop(VisRevealerLastCreated(), false);
    libLbty_gv_autoRevealers.lv_triggeringRegions[libLbty_gv_autoRevealers.lv_count] = lp_triggeringRegion;
    libLbty_gv_autoRevealers.lv_triggeringPlayers[libLbty_gv_autoRevealers.lv_count] = lp_player;
    libLbty_gv_autoRevealers.lv_count += 1;
    TriggerExecute(libCOMI_gt_CM_AutoRevealRegionController, true, false);
}

void libCOMI_gf_SetAllianceCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_aIPlayer;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetAlliance(lp_sourcePlayer, lp_targetPlayer, lp_alliance);
    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_sourcePlayer) == true) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_targetPlayer) == false)) {
        lv_humanPlayer = lp_sourcePlayer;
        lv_aIPlayer = lp_targetPlayer;
    }
    else if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_sourcePlayer) == false) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_targetPlayer) == true)) {
        lv_humanPlayer = lp_targetPlayer;
        lv_aIPlayer = lp_sourcePlayer;
    }
    else if (true) {
        return ;
    }
    if ((PlayerGetAlliance(lv_aIPlayer, c_allianceIdVision, lv_humanPlayer) == true)) {
        PlayerGroupAdd(libCOMI_gv_cM_SharedVisionPlayers[lv_humanPlayer], lv_aIPlayer);
        if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
            PlayerSetAlliance(lv_aIPlayer, c_allianceIdVision, lv_humanPlayer, false);
        }

    }
    else {
        PlayerGroupRemove(libCOMI_gv_cM_SharedVisionPlayers[lv_humanPlayer], lv_aIPlayer);
    }
}

void libCOMI_gf_SetAllianceOneWayCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    int auto9570F556_val;

    // Implementation
    if ((lp_sourcePlayer != lp_targetPlayer)) {
        libNtve_gf_ClearAlliance(lp_sourcePlayer, lp_targetPlayer);
        libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, false);
        auto9570F556_val = lp_alliance;
        if (auto9570F556_val == libNtve_ge_AllianceSetting_Ally) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVision) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSpend, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_Neutral) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_NeutralWithSharedVision) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_Enemy) {
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_EnemyWithSharedVision) {
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else {
        }
    }

}

void libCOMI_gf_SetAllianceAspectCoop (int lp_inSourcePlayer, int lp_inAllianceId, int lp_inTargetPlayer, bool lp_ally) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_aIPlayer;

    // Variable Initialization

    // Implementation
    if ((lp_inAllianceId != c_allianceIdVision)) {
        PlayerSetAlliance(lp_inSourcePlayer, lp_inAllianceId, lp_inTargetPlayer, lp_ally);
        return ;
    }

    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_inSourcePlayer) == false) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_inTargetPlayer) == true)) {
        if ((lp_ally == true)) {
            PlayerGroupAdd(libCOMI_gv_cM_SharedVisionPlayers[lp_inTargetPlayer], lp_inSourcePlayer);
        }
        else {
            PlayerGroupRemove(libCOMI_gv_cM_SharedVisionPlayers[lp_inTargetPlayer], lp_inSourcePlayer);
        }
        if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
            PlayerSetAlliance(lp_inSourcePlayer, c_allianceIdVision, lp_inTargetPlayer, false);
            return ;
        }

    }

    PlayerSetAlliance(lp_inSourcePlayer, lp_inAllianceId, lp_inTargetPlayer, lp_ally);
}

void libCOMI_gf_SetPlayerGroupAlliance (playergroup lp_players, int lp_alliance) {
    playergroup auto8B275F3C_g;
    int auto8B275F3C_p;
    playergroup auto764B97E8_g;
    int auto764B97E8_p;

    // Variable Declarations
    int lv_player1;
    int lv_player2;

    // Variable Initialization

    // Implementation
    auto8B275F3C_g = lp_players; 
    auto8B275F3C_p = 1;
    for ( ; auto8B275F3C_p <= PlayerGroupCount(auto8B275F3C_g) ; auto8B275F3C_p += BoolToInt(lv_player1 == PlayerGroupPlayer(auto8B275F3C_g, auto8B275F3C_p)) ) {
        lv_player1 = PlayerGroupPlayer(auto8B275F3C_g, auto8B275F3C_p);
        auto764B97E8_g = lp_players; 
        auto764B97E8_p = 1;
        for ( ; auto764B97E8_p <= PlayerGroupCount(auto764B97E8_g) ; auto764B97E8_p += BoolToInt(lv_player2 == PlayerGroupPlayer(auto764B97E8_g, auto764B97E8_p)) ) {
            lv_player2 = PlayerGroupPlayer(auto764B97E8_g, auto764B97E8_p);
            if ((lv_player1 != lv_player2)) {
                libCOMI_gf_SetAllianceOneWayCoop(lv_player1, lv_player2, lp_alliance);
            }

        }
    }
}

void libCOMI_gf_CM_RestorePlayerVision () {
}

void libCOMI_gf_CM_GPRemindersInit () {
    playergroup autoA2050480_g;
    int autoA2050480_p;
    string autoEB535506_val;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    autoA2050480_g = libCOOC_gf_HumanPlayers(); 
    autoA2050480_p = 1;
    for ( ; autoA2050480_p <= PlayerGroupCount(autoA2050480_g) ; autoA2050480_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoA2050480_g, autoA2050480_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoA2050480_g, autoA2050480_p);
        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 4) || (libCOOC_gf_CC_CommanderLevel(lv_indexPlayer, libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) <= 2))) {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = false;
            return ;
        }

        autoEB535506_val = libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer);
        if (autoEB535506_val == "TerranRaynor") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            libCOMI_gf_CM_GPReminderRaynor(lv_indexPlayer);
        }
        else if (autoEB535506_val == "ProtossArtanis") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, true);
            libCOMI_gf_CM_GPReminderArtanis(lv_indexPlayer);
        }
        else if (autoEB535506_val == "ProtossVorazun") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, true);
            libCOMI_gf_CM_GPReminderVorazun(lv_indexPlayer);
        }
        else if (autoEB535506_val == "ZergAbathur") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, true);
            libCOMI_gf_CM_GPReminderAbathur(lv_indexPlayer);
        }
        else {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = false;
        }
    }
}

trigger auto_libCOMI_gf_CM_GPReminderRaynor_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderRaynor_lp_player;

void libCOMI_gf_CM_GPReminderRaynor (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderRaynor_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderRaynor_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderRaynor_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderRaynor_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderRaynor_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderRaynor_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderRaynor_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

trigger auto_libCOMI_gf_CM_GPReminderArtanis_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderArtanis_lp_player;

void libCOMI_gf_CM_GPReminderArtanis (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderArtanis_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderArtanis_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderArtanis_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderArtanis_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderArtanis_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderArtanis_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderArtanis_lp_player;

    // Implementation
    while ((libCOMI_gv_cM_GPRemindersOn[lp_player] == true)) {
        if ((UnitGetPropertyFixed(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(3, true, lp_player);
    while (!((UnitGetPropertyFixed(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_CM_GPReminderDisable(lp_player);
    return true;
}

trigger auto_libCOMI_gf_CM_GPReminderVorazun_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderVorazun_lp_player;

void libCOMI_gf_CM_GPReminderVorazun (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderVorazun_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderVorazun_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderVorazun_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderVorazun_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderVorazun_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderVorazun_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderVorazun_lp_player;

    // Implementation
    while ((libCOMI_gv_cM_GPRemindersOn[lp_player] == true)) {
        if ((UnitGetPropertyFixed(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(3, true, lp_player);
    while (!((UnitGetPropertyFixed(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_CM_GPReminderDisable(lp_player);
    return true;
}

trigger auto_libCOMI_gf_CM_GPReminderAbathur_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderAbathur_lp_player;

void libCOMI_gf_CM_GPReminderAbathur (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderAbathur_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderAbathur_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderAbathur_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderAbathur_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderAbathur_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderAbathur_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderAbathur_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

void libCOMI_gf_CM_GPReminderDisable (int lp_player) {
    // Implementation
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return ;
    }

    libCOMI_gv_cM_GPRemindersOn[lp_player] = false;
    libCOUI_gf_CU_GPHighlightButton(1, false, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, false, lp_player);
    libCOUI_gf_CU_GPHighlightButton(3, false, lp_player);
    libCOUI_gf_CU_GPHighlightButton(4, false, lp_player);
}

void libCOMI_gf_EnableDisableNeedPylonInfo (bool lp_enableDisable) {
    // Implementation
    libCOMI_gv_cM_NeedPylonEnabled = lp_enableDisable;
    if ((libCOMI_gv_cM_NeedPylonEnabled == false)) {
        if ((libCOMI_gv_cM_NeedPylonAbilityHighlightOn == true)) {
            libCOMI_gv_cM_NeedPylonAbilityHighlightOn = false;
            UIClearMessages(PlayerGroupSingle(1), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("ProtossBuild", 1), false);
            CatalogFieldValueSet(c_gameCatalogButton, "Pylon", "Tooltip", 1, "Button/Tooltip/Pylon");
        }

    }

}

bool libCOMI_gf_NeedPylonHighlightOn () {
    // Implementation
    return libCOMI_gv_cM_NeedPylonAbilityHighlightOn;
}

bool libCOMI_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit) {
    // Variable Declarations
    bool lv_validAttackerFound;
    point lv_unitPosition;

    // Variable Initialization

    // Implementation
    lv_unitPosition = UnitGetPosition(lp_unit);
    UnitGroupLoopBegin(UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitCanAttackTarget(UnitGroupLoopCurrent(), lp_unit) == true)) {
            lv_validAttackerFound = true;
            break;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_validAttackerFound == false)) {
        UnitGroupLoopBegin(UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitCanAttackTarget(UnitGroupLoopCurrent(), lp_unit) == true)) {
                lv_validAttackerFound = true;
                break;
            }

        }
        UnitGroupLoopEnd();
    }

    return lv_validAttackerFound;
}

trigger auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger = null;

void libCOMI_gf_RemindPlayertoCreateAntiAirUnits () {
    if (auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger == null) {
        auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger = TriggerCreate("auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger, false, false);
}

bool auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc (bool testConds, bool runActions) {
    unitgroup auto78DC738F_g;
    int auto78DC738F_u;

    // Variable Declarations
    unit lv_currentUnit;
    bool lv_sendTransmission;

    // Variable Initialization

    // Implementation
    while (true) {
        auto78DC738F_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32))), 0);
        auto78DC738F_u = 1;
        for ( ; auto78DC738F_u <= UnitGroupCount(auto78DC738F_g, c_unitCountAll) ; auto78DC738F_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto78DC738F_g, auto78DC738F_u)) ) {
            lv_currentUnit = UnitGroupUnit(auto78DC738F_g, auto78DC738F_u);
            if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                if ((libCOMI_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                    Wait(5.0, c_timeAI);
                    if ((UnitIsAlive(lv_currentUnit) == true)) {
                        if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (libCOMI_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                            lv_sendTransmission = true;
                        }

                    }

                }

                break;
            }

            Wait(0.1, c_timeAI);
        }
        if ((lv_sendTransmission == true)) {
            break;
        }

        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

trigger auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_Trigger = null;
string auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_lp_bonusObjective;
fixed auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_lp_delay;

void libCOMI_gf_RemindPlayertoCompleteBonusObjective (string lp_bonusObjective, fixed lp_delay) {
    auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_lp_bonusObjective = lp_bonusObjective;
    auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_lp_delay = lp_delay;

    if (auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_Trigger == null) {
        auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_Trigger = TriggerCreate("auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_Trigger, false, false);
}

bool auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_TriggerFunc (bool testConds, bool runActions) {
    string lp_bonusObjective = auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_lp_bonusObjective;
    fixed lp_delay = auto_libCOMI_gf_RemindPlayertoCompleteBonusObjective_lp_delay;

    // Implementation
    Wait(lp_delay, c_timeAI);
    if ((libCOOC_gf_MissionObjectiveProgress(lp_bonusObjective) == 0)) {
        TriggerQueueEnter();
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
        libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

trigger auto_libCOMI_gf_RemindPlayertoBuildProbes_Trigger = null;
fixed auto_libCOMI_gf_RemindPlayertoBuildProbes_lp_delay;
int auto_libCOMI_gf_RemindPlayertoBuildProbes_lp_amount;

void libCOMI_gf_RemindPlayertoBuildProbes (fixed lp_delay, int lp_amount) {
    auto_libCOMI_gf_RemindPlayertoBuildProbes_lp_delay = lp_delay;
    auto_libCOMI_gf_RemindPlayertoBuildProbes_lp_amount = lp_amount;

    if (auto_libCOMI_gf_RemindPlayertoBuildProbes_Trigger == null) {
        auto_libCOMI_gf_RemindPlayertoBuildProbes_Trigger = TriggerCreate("auto_libCOMI_gf_RemindPlayertoBuildProbes_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_RemindPlayertoBuildProbes_Trigger, false, false);
}

bool auto_libCOMI_gf_RemindPlayertoBuildProbes_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delay = auto_libCOMI_gf_RemindPlayertoBuildProbes_lp_delay;
    int lp_amount = auto_libCOMI_gf_RemindPlayertoBuildProbes_lp_amount;

    // Variable Declarations
    int lv_probeCount;
    order lv_currentOrder;

    // Variable Initialization

    // Implementation
    Wait(lp_delay, c_timeAI);
    UnitGroupLoopBegin(UnitGroup("Probe", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_currentOrder = UnitOrder(UnitGroupLoopCurrent(), 0);
        if ((((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("ProbeHarvest", 0)) && ((UnitGetType(OrderGetTargetUnit(lv_currentOrder)) == "MineralField") || (UnitGetType(OrderGetTargetUnit(lv_currentOrder)) == "RichMineralField"))) || ((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("ProbeHarvest", 1)) && ((UnitHasBehavior(UnitGroupLoopCurrent(), "CarryMineralFieldMinerals") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "CarryHighYieldMineralFieldMinerals") == true))))) {
            lv_probeCount += 1;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_probeCount <= lp_amount)) {
        TriggerQueueEnter();
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
        libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

trigger auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_Trigger = null;
unit auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_lp_assimilator;
fixed auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_lp_delay;

void libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator (unit lp_assimilator, fixed lp_delay) {
    auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_lp_assimilator = lp_assimilator;
    auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_lp_delay = lp_delay;

    if (auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_Trigger == null) {
        auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_Trigger = TriggerCreate("auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_Trigger, false, false);
}

bool auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_TriggerFunc (bool testConds, bool runActions) {
    unit lp_assimilator = auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_lp_assimilator;
    fixed lp_delay = auto_libCOMI_gf_RemindPlayertoAssign3ProbestoAssimilator_lp_delay;

    int auto860A7A22_n;
    int auto860A7A22_i;

    // Variable Declarations
    int lv_probeCount;
    order lv_currentOrder;

    // Variable Initialization

    // Implementation
    if ((UnitGetType(lp_assimilator) != "Assimilator")) {
        return true;
    }

    Wait(lp_delay, c_timeAI);
    if ((UnitIsAlive(lp_assimilator) == false)) {
        return true;
    }

    auto860A7A22_n = 3;
    for (auto860A7A22_i = 1; auto860A7A22_i <= auto860A7A22_n; auto860A7A22_i += 1) {
        UnitGroupLoopBegin(UnitGroup("Probe", 1, RegionCircle(UnitGetPosition(lp_assimilator), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_currentOrder = UnitOrder(UnitGroupLoopCurrent(), 0);
            if ((((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("ProbeHarvest", 0)) && (OrderGetTargetUnit(lv_currentOrder) == lp_assimilator)) || ((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("ProbeHarvest", 1)) && (UnitHasBehavior(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGasProtoss") == true)))) {
                lv_probeCount += 1;
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("Drone", 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_currentOrder = UnitOrder(UnitGroupLoopCurrent(), 0);
            if ((OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("DroneHarvest", 0)) && (OrderGetTargetUnit(lv_currentOrder) == lp_assimilator)) {
                lv_probeCount += 1;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_probeCount >= 3)) {
            return true;
        }
        else {
            lv_probeCount = 0;
            Wait(0.5, c_timeAI);
        }
    }
    TriggerQueueEnter();
    if (((libCOMI_gf_GameIsOver() == true) || (UnitIsAlive(lp_assimilator) == false))) {
        return true;
    }

    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

void libCOMI_gf_SetPlayerColors () {
    int auto583267D6_ae;
    int auto583267D6_ai;
    string autoA8B54D99_val;

    // Variable Declarations
    int lv_terranColorPrimary;
    int lv_terranColorSecondary;
    int lv_zergColorPrimary;
    int lv_zergColorSecondary;
    int lv_protossColorPrimary;
    int lv_protossColorSecondary;
    int lv_i;

    // Variable Initialization
    lv_terranColorPrimary = 1;
    lv_terranColorSecondary = 1;
    lv_zergColorPrimary = 1;
    lv_zergColorSecondary = 1;
    lv_protossColorPrimary = 1;
    lv_protossColorSecondary = 1;

    // Implementation
    auto583267D6_ae = 2;
    auto583267D6_ai = 1;
    lv_i = 1;
    for ( ; ( (auto583267D6_ai >= 0 && lv_i <= auto583267D6_ae) || (auto583267D6_ai <= 0 && lv_i >= auto583267D6_ae) ) ; lv_i += auto583267D6_ai ) {
        autoA8B54D99_val = PlayerCommander(lv_i);
        if (autoA8B54D99_val == "Raynor") {
            libCOMI_gv_playerColor[lv_i] = 2;
        }
        else if (autoA8B54D99_val == "Swann") {
            libCOMI_gv_playerColor[lv_i] = 6;
        }
        else if (autoA8B54D99_val == "Nova") {
            libCOMI_gv_playerColor[lv_i] = 3;
        }
        else if (autoA8B54D99_val == "Kerrigan") {
            libCOMI_gv_playerColor[lv_i] = 15;
        }
        else if (autoA8B54D99_val == "Zagara") {
            libCOMI_gv_playerColor[lv_i] = 13;
        }
        else if (autoA8B54D99_val == "Abathur") {
            libCOMI_gv_playerColor[lv_i] = 5;
        }
        else if (autoA8B54D99_val == "Stukov") {
            libCOMI_gv_playerColor[lv_i] = 8;
        }
        else if (autoA8B54D99_val == "Artanis") {
            libCOMI_gv_playerColor[lv_i] = 3;
        }
        else if (autoA8B54D99_val == "Karax") {
            libCOMI_gv_playerColor[lv_i] = 5;
        }
        else if (autoA8B54D99_val == "Vorazun") {
            libCOMI_gv_playerColor[lv_i] = 4;
        }
        else if (autoA8B54D99_val == "Alarak") {
            libCOMI_gv_playerColor[lv_i] = 14;
        }
        else if (autoA8B54D99_val == "Fenix") {
            libCOMI_gv_playerColor[lv_i] = 6;
        }
        else {
            libCOMI_gv_playerColor[lv_i] = 0;
        }
    }
}

int libCOMI_gf_EnemyPlayerColor () {
    // Implementation
    return 1;
}

int libCOMI_gf_HumanPlayerColor (int lp_player) {
    int auto71C3AFB3_val;

    // Implementation
    auto71C3AFB3_val = lp_player;
    if (auto71C3AFB3_val == 1) {
        return libCOMI_gv_playerColor[1];
    }
    else if (auto71C3AFB3_val == 2) {
        return libCOMI_gv_playerColor[2];
    }
    else {
        return 15;
    }
}

int libCOMI_gf_AllyPlayerColor () {
    // Implementation
    return 0;
}

void libCOMI_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player) {
    int auto2117ABBB_n;
    int auto2117ABBB_i;

    // Implementation
    auto2117ABBB_n = lp_count;
    for (auto2117ABBB_i = 1; auto2117ABBB_i <= auto2117ABBB_n; auto2117ABBB_i += 1) {
        AIResearch(lp_player, 4, -1, lp_upgrade);
    }
}

void libCOMI_gf_ShareVisionAmongPlayers (playergroup lp_players) {
    playergroup autoE1FC9780_g;
    int autoE1FC9780_p;
    playergroup auto201B96D5_g;
    int auto201B96D5_p;

    // Variable Declarations
    int lv_indexPlayer1;
    int lv_indexPlayer2;

    // Variable Initialization

    // Implementation
    autoE1FC9780_g = lp_players; 
    autoE1FC9780_p = 1;
    for ( ; autoE1FC9780_p <= PlayerGroupCount(autoE1FC9780_g) ; autoE1FC9780_p += BoolToInt(lv_indexPlayer1 == PlayerGroupPlayer(autoE1FC9780_g, autoE1FC9780_p)) ) {
        lv_indexPlayer1 = PlayerGroupPlayer(autoE1FC9780_g, autoE1FC9780_p);
        auto201B96D5_g = lp_players; 
        auto201B96D5_p = 1;
        for ( ; auto201B96D5_p <= PlayerGroupCount(auto201B96D5_g) ; auto201B96D5_p += BoolToInt(lv_indexPlayer2 == PlayerGroupPlayer(auto201B96D5_g, auto201B96D5_p)) ) {
            lv_indexPlayer2 = PlayerGroupPlayer(auto201B96D5_g, auto201B96D5_p);
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                PlayerSetAlliance(lv_indexPlayer1, c_allianceIdVision, lv_indexPlayer2, true);
            }

        }
    }
}

void libCOMI_gf_TurnPlayerFlagOnOffForGroup (playergroup lp_players, int lp_playerFlag, bool lp_onOff) {
    playergroup autoB6C32126_g;
    int autoB6C32126_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    autoB6C32126_g = lp_players; 
    autoB6C32126_p = 1;
    for ( ; autoB6C32126_p <= PlayerGroupCount(autoB6C32126_g) ; autoB6C32126_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoB6C32126_g, autoB6C32126_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoB6C32126_g, autoB6C32126_p);
        PlayerSetState(lv_indexPlayer, lp_playerFlag, lp_onOff);
    }
}

void libCOMI_gf_CreateAlertAtPointCampaign (string lp_alertType, text lp_text, string lp_icon, point lp_point) {
    playergroup auto30CC37A9_g;
    int auto30CC37A9_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    auto30CC37A9_g = libCOOC_gf_HumanPlayers(); 
    auto30CC37A9_p = 1;
    for ( ; auto30CC37A9_p <= PlayerGroupCount(auto30CC37A9_g) ; auto30CC37A9_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto30CC37A9_g, auto30CC37A9_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto30CC37A9_g, auto30CC37A9_p);
        UIAlertPoint(lp_alertType, lv_indexPlayer, lp_text, lp_icon, lp_point);
    }
}

void libCOMI_gf_CreateAlertAtUnitCampaign (string lp_alertType, text lp_text, string lp_icon, unit lp_unit) {
    playergroup auto0BE3493B_g;
    int auto0BE3493B_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    auto0BE3493B_g = libCOOC_gf_HumanPlayers(); 
    auto0BE3493B_p = 1;
    for ( ; auto0BE3493B_p <= PlayerGroupCount(auto0BE3493B_g) ; auto0BE3493B_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto0BE3493B_g, auto0BE3493B_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto0BE3493B_g, auto0BE3493B_p);
        UIAlertUnit(lp_alertType, lv_indexPlayer, lp_text, lp_icon, lp_unit);
    }
}

void libCOMI_gf_SetAlliedCommandersstartingResources () {
    // Implementation
    MeleeInitResources();
}

int libCOMI_gf_DifficultyLevelForPlayerCoop (int lp_player) {
    int autoF9E6B533_val;

    // Implementation
    if ((GameIsOnline() == true)) {
        autoF9E6B533_val = lp_player;
        if (autoF9E6B533_val == 1) {
            return PlayerDifficulty(3);
        }
        else if (autoF9E6B533_val == 2) {
            return PlayerDifficulty(4);
        }
        else {
            return PlayerDifficulty(lp_player);
        }
    }
    else {
        return PlayerDifficulty(lp_player);
    }
}

bool libCOMI_gf_PlayerIsInCombat (int lp_player) {
    // Variable Declarations
    fixed lv_combatTime;

    // Variable Initialization

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        return false;
    }

    lv_combatTime = MaxF(PlayerGetPropertyFixed(lp_player, c_playerPropDamageDealtTime), PlayerGetPropertyFixed(lp_player, c_playerPropDamageTakenTime));
    lv_combatTime = (TimerGetElapsed(libCOMI_gv_cM_CombatTimer) - lv_combatTime);
    return (lv_combatTime < 4.0);
}

int libCOMI_gf_MissionObjectiveItemCountCoop (string lp_objectiveData) {
    // Variable Declarations
    int lv_itemCountReturn;

    // Variable Initialization

    // Implementation
    lv_itemCountReturn = DataTableGetInt(true, libCOMI_gf_CM_ObjectiveRequiredCount(lp_objectiveData));
    if ((lv_itemCountReturn == 0)) {
        lv_itemCountReturn = libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData);
        DataTableSetInt(true, libCOMI_gf_CM_ObjectiveRequiredCount(lp_objectiveData), lv_itemCountReturn);
    }

    return lv_itemCountReturn;
}

string libCOMI_gf_CM_ObjectiveRequiredCount (string lp_objectiveData) {
    // Implementation
    return (libCOOC_gf_CS_ObjectiveTableString(lp_objectiveData) + "_RequiredCount");
}

string libCOMI_gf_CM_ObjectiveTimer (string lp_objective) {
    // Implementation
    return (libCOOC_gf_CS_ObjectiveTableString(lp_objective) + "_Timer");
}

void libCOMI_gf_SetMissionObjectiveProgress (string lp_objective, int lp_current) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;

    // Variable Initialization

    // Implementation
    libCOOC_gf_ZS_SetObjectiveProgressData(lp_objective, lp_current);
    if ((libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective) == null)) {
        return ;
    }

    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objective);
}

void libCOMI_gf_CreateObjectiveCampaign (string lp_objectiveData) {
    // Variable Declarations
    bool lv_isPrimary;
    text lv_name;
    text lv_bonusText;

    // Variable Initialization

    // Implementation
    libCOOC_gf_CC_ObjectiveRegister(lp_objectiveData);
    if ((libCOMI_gf_MissionObjectiveItemCountCoop(lp_objectiveData) == 0)) {
        libCOMI_gf_SetObjectiveRequiredCountCampaign(lp_objectiveData, CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objectiveData), "RequiredCount", c_playerAny));
    }

    lv_name = libCOOC_gf_MissionObjectiveName(lp_objectiveData);
    lv_bonusText = libCOOC_gf_CS_CampaignObjectiveBonusText(lp_objectiveData);
    ObjectiveCreate(lv_name, libCOOC_gf_MissionObjectiveDescription(lp_objectiveData), c_objectiveStateActive, libCOOC_gf_CS_GetObjectiveTypeBoolean(lp_objectiveData));
    DataTableSetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objectiveData), ObjectiveLastCreated());
    if ((libCOOC_gf_CS_ObjectiveCountsDown(lp_objectiveData) == false)) {
        if ((libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData) == 1)) {
            libCOOC_gf_ZS_SetObjectiveProgressData(lp_objectiveData, 0);
        }
        else {
            libCOMI_gf_SetMissionObjectiveProgress(lp_objectiveData, 0);
        }
    }
    else {
        if ((libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData) == 1)) {
            libCOOC_gf_ZS_SetObjectiveProgressData(lp_objectiveData, libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData));
        }
        else {
            libCOMI_gf_SetMissionObjectiveProgress(lp_objectiveData, libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData));
        }
    }
    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objectiveData);
}

void libCOMI_gf_ZS_SetMissionObjectiveState (string lp_objective, int lp_state) {
    int autoD2FFF70D_val;

    // Implementation
    autoD2FFF70D_val = lp_state;
    if (autoD2FFF70D_val == libCOOC_ge_MissionObjectiveState_Available) {
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 1);
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateActive);
    }
    else if (autoD2FFF70D_val == libCOOC_ge_MissionObjectiveState_Completed) {
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 1);
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/lib_COMI_0B6E0658", "A", ObjectiveGetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective))));
        ObjectiveSetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), TextExpressionAssemble("Param/Expression/lib_COMI_0B6E0658"));
        libCOOC_gf_ZS_SetObjectiveProgressData(lp_objective, libCOOC_gf_MissionObjectiveItemCount(lp_objective));
    }
    else if (autoD2FFF70D_val == libCOOC_ge_MissionObjectiveState_Undiscovered) {
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateHidden);
    }
    else if (autoD2FFF70D_val == libCOOC_ge_MissionObjectiveState_Failed) {
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateFailed);
    }
    else {
    }
}

void libCOMI_gf_SetObjectiveRequiredCountCampaign (string lp_objective, int lp_requiredCount) {
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CM_ObjectiveRequiredCount(lp_objective), lp_requiredCount);
    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objective);
}

void libCOMI_gf_SetObjectiveTimerCampaign (string lp_objective, timer lp_timer) {
    // Implementation
    if ((DataTableGetTimer(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)) != lp_timer)) {
        DataTableSetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective), lp_timer);
        libCOMI_gf_CM_UpdateObjectiveTimerCampaign(lp_objective);
    }

}

void libCOMI_gf_SetObjectiveTimerColorThresholdCampaign (string lp_objective, int lp_color, int lp_remainingTime) {
    // Implementation
    DataTableSetInt(true, (libCOMI_gf_CM_ObjectiveTimer(lp_objective) + "_" + libCOMI_ge_ObjectiveTimerThresholds_Ident(lp_color)), lp_remainingTime);
}

void libCOMI_gf_SetMissionObjectiveCustomText (string lp_objective, text lp_customText) {
    // Implementation
    DataTableSetText(true, (libCOOC_gf_CS_ObjectiveTableString(lp_objective) + "_" + "CustomToken"), lp_customText);
    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objective);
}

void libCOMI_gf_CM_UpdateObjectiveTextCampaign (string lp_objective) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;
    int lv_progress;

    // Variable Initialization

    // Implementation
    lv_progress = UserDataGetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
    lv_name = TextReplaceWord(UserDataGetText("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "FormatText", 1), StringExternal("Param/Value/lib_COMI_90EC773D"), libCOOC_gf_MissionObjectiveName(lp_objective), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_F72DF09B"), IntToText(lv_progress), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_7AA38B9D"), IntToText(libCOMI_gf_MissionObjectiveItemCountCoop(lp_objective)), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_9C9EACB0"), DataTableGetText(true, (libCOOC_gf_CS_ObjectiveTableString(lp_objective) + "_" + "CustomToken")), c_stringReplaceAll, c_stringCase);
    if ((libCOOC_gf_MissionObjectiveStateCheck(lp_objective, libCOOC_ge_MissionObjectiveState_Completed) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_BEDEFD56", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_BEDEFD56");
    }

    lv_bonusText = libCOOC_gf_CS_CampaignObjectiveBonusText(lp_objective);
    if (((lv_bonusText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_5966D169", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_COMI_5966D169", "B", lv_bonusText);
        lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_5966D169");
    }

    if ((libCOOC_gf_MissionObjectiveStateCheck(lp_objective, libCOOC_ge_MissionObjectiveState_Completed) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_E3BF1656", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_E3BF1656");
    }

    ObjectiveSetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), lv_name);
}

trigger auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger = null;
string auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_lp_objective;

void libCOMI_gf_CM_UpdateObjectiveTimerCampaign (string lp_objective) {
    auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_lp_objective = lp_objective;

    if (auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger == null) {
        auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger = TriggerCreate("auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_TriggerFunc (bool testConds, bool runActions) {
    string lp_objective = auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_lp_objective;

    int auto3EF0D545_val;

    // Variable Declarations
    text lv_name;
    timer lv_timerCurrent;

    // Variable Initialization
    lv_timerCurrent = TimerCreate();

    // Implementation
    lv_timerCurrent = DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective));
    while ((libCOMI_gf_GameIsOver() == false) && (lv_timerCurrent == DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective)))) {
        lv_timerCurrent = DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective));
        auto3EF0D545_val = ObjectiveGetState(libCOOC_gf_CS_GetObjectiveForData(lp_objective));
        if (auto3EF0D545_val == c_objectiveStateActive) {
            lv_name = TextReplaceWord(UserDataGetText("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "FormatText", 1), StringExternal("Param/Value/lib_COMI_4D91C023"), libCOOC_gf_MissionObjectiveName(lp_objective), c_stringReplaceAll, c_stringCase);
            if ((TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))) > 0.0)) {
                if ((TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))) <= DataTableGetInt(true, (libCOMI_gf_CM_ObjectiveTimer(lp_objective) + "_" + libCOMI_ge_ObjectiveTimerThresholds_Ident(libCOMI_ge_ObjectiveTimerThresholds_Red))))) {
                    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_251B217F"), TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))))), Color(100.00, 0.00, 0.00)), c_stringReplaceAll, c_stringCase);
                }
                else {
                    if ((TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))) <= DataTableGetInt(true, (libCOMI_gf_CM_ObjectiveTimer(lp_objective) + "_" + libCOMI_ge_ObjectiveTimerThresholds_Ident(libCOMI_ge_ObjectiveTimerThresholds_Yellow))))) {
                        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_A59236C2"), TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))))), Color(100.00, 100.00, 0.00)), c_stringReplaceAll, c_stringCase);
                    }
                    else {
                        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_6CC50938"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))))), c_stringReplaceAll, c_stringCase);
                    }
                }
            }
            else if (true) {
                lv_name = libCOOC_gf_MissionObjectiveName(lp_objective);
            }
            ObjectiveSetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), lv_name);
        }
        else if (auto3EF0D545_val == c_objectiveStateCompleted) {
            ObjectiveSetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), libCOOC_gf_MissionObjectiveName(lp_objective));
            return true;
        }
        else {
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

void libCOMI_gf_AddMissionTipCampaign (string lp_tipData) {
}

trigger auto_libCOMI_gf_DisplayMissionTip_Trigger = null;

void libCOMI_gf_DisplayMissionTip () {
    if (auto_libCOMI_gf_DisplayMissionTip_Trigger == null) {
        auto_libCOMI_gf_DisplayMissionTip_Trigger = TriggerCreate("auto_libCOMI_gf_DisplayMissionTip_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_DisplayMissionTip_Trigger, false, false);
}

bool auto_libCOMI_gf_DisplayMissionTip_TriggerFunc (bool testConds, bool runActions) {
    return true;
}

void libCOMI_gf_CM_CommanderVOInit () {
    playergroup auto24DB78C3_g;
    int auto24DB78C3_p;
    int auto53C20295_ai;
    int auto53C20295_ae;
    playergroup auto8051EF80_g;
    int auto8051EF80_p;
    string autoCD6ED918_val;

    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexCommander;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_VOGroupGender = c_genderFemale;
    auto24DB78C3_g = libCOOC_gf_HumanPlayers(); 
    auto24DB78C3_p = 1;
    for ( ; auto24DB78C3_p <= PlayerGroupCount(auto24DB78C3_g) ; auto24DB78C3_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto24DB78C3_g, auto24DB78C3_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto24DB78C3_g, auto24DB78C3_p);
        if ((libCOOC_gf_CC_CommanderGender(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) == c_genderMale)) {
            libCOMI_gv_cM_VOGroupGender = c_genderMale;
            break;
        }

    }
    ConversationDataSetListenerGender("acObj", libCOMI_gv_cM_VOGroupGender);
    ConversationDataSetListenerGender("acResponses", libCOMI_gv_cM_VOGroupGender);
    ConversationDataRegisterPortrait("char_TerranAdjutant", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ProtossExecutor", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Izsha", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_SgtHammer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_DominionOfficer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ShakurasAlly", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Hill", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_TDChampion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Vermillion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_BelshirScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACJarbanMiner", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACMeinhoffMedic", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACAiurSiege", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    auto53C20295_ai = 1;
    auto53C20295_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto53C20295_ai < auto53C20295_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto53C20295_ai);
        auto53C20295_ai = auto53C20295_ai+1;
        ConversationDataRegisterPortrait(libCOOC_gf_CC_CommanderConversationLink(lv_indexCommander), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    }
    libCOMI_gf_CM_VOResourceInit();
    TriggerEnable(libCOMI_gt_CM_VOEnemySpotted, true);
    TriggerExecute(libCOMI_gt_CM_VOUnitsLostCheck, true, false);
    auto8051EF80_g = libCOOC_gf_HumanPlayers(); 
    auto8051EF80_p = 1;
    for ( ; auto8051EF80_p <= PlayerGroupCount(auto8051EF80_g) ; auto8051EF80_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto8051EF80_g, auto8051EF80_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto8051EF80_g, auto8051EF80_p);
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) != 2)) {
            TriggerEnable(libCOMI_gt_CM_VOEnemyCloakedSpotted, true);
        }

        autoCD6ED918_val = libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer);
        if (autoCD6ED918_val == "TerranRaynor") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionRaynorHyperion, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed, true);
            if ((libCOOC_gf_CC_PerkStateCheck("RaynorBansheeAirstrike", libCOOC_ge_CC_PerkState_Locked, "TerranRaynor", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_RaynorAirStrikeReady", -1), "Abil/BansheeAirstrike", null);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_RaynorHyperionReady", -1), "Abil/VoidCoopSummonHyperion", null);
        }
        else if (autoCD6ED918_val == "TerranSwann") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannDrone, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill, true);
            if ((libCOOC_gf_CC_PerkStateCheck("SwannSpecialDelivery", libCOOC_ge_CC_PerkState_Locked, "TerranSwann", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_SwannCombatDropReady", -1), "Abil/SpecialDelivery", null);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("SwannLaserDrillUpgrades", libCOOC_ge_CC_PerkState_Locked, "TerranSwann", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_SwannPulseCannonReady", -1), "Abil/DrakkenLaserDrillNuke", null);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_SwannConcentratedBeamReady", -1), "Abil/DrakkenLaserDrillBFG", null);
        }
        else if (autoCD6ED918_val == "ZergKerrigan") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation, true);
            if ((libCOOC_gf_CC_PerkStateCheck("KerriganUnlockCrushingGripWave", libCOOC_ge_CC_PerkState_Locked, "ZergKerrigan", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_KerriganImmobilWave", -1), "Abil/KerriganVoidCoopCrushingGripWave", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_KerriganAssmilAura", -1), "Abil/KerriganVoidCoopEconDrop", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
        }
        else if (autoCD6ED918_val == "ZergZagara") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop, true);
            if ((libCOOC_gf_CC_PerkStateCheck("ZagaraUnlockMassRoachDrop", libCOOC_ge_CC_PerkState_Locked, "ZergZagara", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_ZagaraInfestedDrop", -1), "ZagaraVoidCoopInfestedPods", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_ZagaraMassFrenzy", -1), "ZagaraVoidCoopMassFrenzy", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
        }
        else if (autoCD6ED918_val == "ProtossArtanis") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields, true);
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_ArtanisOverchargeReady", -1), "Abil/SoASuperShield", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "SoASuperShield");
            if ((libCOOC_gf_CC_PerkStateCheck("ArtanisUnlockStrafeAttack", libCOOC_ge_CC_PerkState_Locked, "ProtossArtanis", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_ArtanisSolarBombardReady", -1), "Abil/SOAStrafeAttack", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "SOAStrafeAttack");
            }

        }
        else if (autoCD6ED918_val == "ProtossVorazun") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop, true);
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_VorazunShadowGuardReady", -1), "Abil/SOAShadowGuardCalldown", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "SOAShadowGuardCalldown");
            if ((libCOOC_gf_CC_PerkStateCheck("VorazunUnlockTimeStop", libCOOC_ge_CC_PerkState_Locked, "ProtossVorazun", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_VorazunTimeStopReady", -1), "Abil/SOATimeFreeze", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "SOATimeFreeze");
            }

        }
        else if (autoCD6ED918_val == "ProtossKarax") {
            TriggerExecute(libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost, true, false);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap, true);
            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("ExecutorAlert_KaraxPurifierBeamReady", -1), "Abil/SOAPurifierBeam", null);
        }
        else if (autoCD6ED918_val == "ZergAbathur") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAbathurMend, true);
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("IzshaAlert_AbathurMend", -1), "Abil/AbathurMend", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "AbathurMend");
            TriggerExecute(libCOMI_gt_CM_AbilityTransmissionAbathurNestReminder, true, false);
        }
        else if (autoCD6ED918_val == "ProtossAlarak") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakEmpower, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice, true);
            if ((libCOOC_gf_CC_PerkStateCheck("AlarakDeathFleet", libCOOC_ge_CC_PerkState_Locked, "ProtossAlarak", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AlarakCommander_DFReady", -1), "Abil/AlarakACSummonDeathfleetTarget", null);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AlarakCommander_EMReady", -1), "Abil/AlarakEmpower", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
        }
        else if (autoCD6ED918_val == "TerranNova") {
            if ((libCOOC_gf_CC_PerkStateCheck("NovaUnlockGriffinBombingRun", libCOOC_ge_CC_PerkState_Locked, "TerranNova", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("NovaCommander_GriffinAirstrikeReady", -1), "Abil/NovaGriffinBombingRunActivate", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "NovaGriffinBombingRunActivate");
            }

            if ((libCOOC_gf_CC_PerkStateCheck("NovaUnlockGriffinTransport", libCOOC_ge_CC_PerkState_Locked, "TerranNova", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("NovaCommander_GriffinAirliftReady", -1), "Abil/NovaGriffinTransportLoadUnits", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "NovaGriffinTransportLoadUnits");
            }

            TriggerExecute(libCOMI_gt_CM_AbilityTransmissionNovaNukeReady, true, false);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaTransport, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaBombingRun, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaDMatrix, true);
        }
        else if (autoCD6ED918_val == "ZergStukov") {
            if ((libCOOC_gf_CC_PerkStateCheck("CommanderStukovAleksander", libCOOC_ge_CC_PerkState_Locked, "ZergStukov", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("StukovCommander_AleksanderReady", -1), "Abil/StukovSummonAleksander", null);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("CommanderStukovApocalisk", libCOOC_ge_CC_PerkState_Locked, "ZergStukov", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("StukovCommander_ApocaliskReady", -1), "Abil/StukovSummonApocalisk", null);
            }

            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovApocalisk, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovAleksander, true);
        }
        else if (autoCD6ED918_val == "ProtossFenix") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixMassRecall, true);
            TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixHeroDies, true);
            TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired, true);
            TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixNameChange, true);
            libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime(lv_indexPlayer, "SOASummonFenix", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer]);
        }
        else {
        }
    }
}

void libCOMI_gf_CM_CommanderVOSend (int lp_ownerPlayer, int lp_listenerPlayer, soundlink lp_vOSound, playergroup lp_targetPlayers) {
    // Implementation
    SoundSetListenerGender(lp_vOSound, libCOOC_gf_CC_CommanderGender(libCOOC_gf_ActiveCommanderForPlayer(lp_listenerPlayer)));
    SoundPlayForPlayer(lp_vOSound, lp_ownerPlayer, lp_targetPlayers, 100.0, 0.0);
}

trigger auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger = null;
int auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player;
soundlink auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink;
unit auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit;

void libCOMI_gf_CM_CommanderVOAbilityWatch (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit) {
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player = lp_player;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound = lp_vOSound;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit = lp_unit;

    if (auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger == null) {
        auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CommanderVOAbilityWatch_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CommanderVOAbilityWatch_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player;
    soundlink lp_vOSound = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound;
    string lp_cooldownLink = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit;

    // Implementation
    while (true) {
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) > 0.0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        if (((lp_unit == null) || (UnitIsAlive(lp_unit) == true))) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

trigger auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger = null;
int auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player;
soundlink auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink;
unit auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability;

void libCOMI_gf_CM_CommanderVOAbilityWatchUnit (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability) {
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player = lp_player;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound = lp_vOSound;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit = lp_unit;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability = lp_ability;

    if (auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger == null) {
        auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player;
    soundlink lp_vOSound = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound;
    string lp_cooldownLink = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit;
    string lp_ability = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability;

    // Implementation
    while (true) {
        while (!(((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) > 20.0) || ((UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) == 0.0) && (UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) > 20.0))))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) && ((UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) || (UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) > 0.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_unit) == true)) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

trigger auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger = null;
int auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player;
string auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink;
unit auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit;

void libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime (int lp_player, string lp_cooldownLink, unit lp_unit) {
    auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player = lp_player;
    auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit = lp_unit;

    if (auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger == null) {
        auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player;
    string lp_cooldownLink = auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit;

    int auto40476489_val;

    // Variable Declarations
    int lv_vOChoice;
    int lv_vOOptions;

    // Variable Initialization
    lv_vOOptions = 2;

    // Implementation
    while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) > 0.0))) {
        Wait(1.0, c_timeGame);
    }
    while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) <= 0.0))) {
        Wait(1.0, c_timeGame);
    }
    if (((lp_unit == null) || (UnitIsAlive(lp_unit) == true))) {
        if ((libCOOC_gf_CC_PerkStateCheck("FenixUnlockArbiterSuit", libCOOC_ge_CC_PerkState_Locked, "ProtossFenix", lp_player) == false)) {
            lv_vOOptions = 3;
        }

        lv_vOChoice = RandomInt(1, lv_vOOptions);
        auto40476489_val = lv_vOChoice;
        if (auto40476489_val == 2) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_player, SoundLink("FenixCommander_DragoonSuitReady", -1), PlayerGroupSingle(lp_player));
        }
        else if (auto40476489_val == 3) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_player, SoundLink("FenixCommander_ArbiterSuitReady", -1), PlayerGroupSingle(lp_player));
        }
        else {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_player, SoundLink("FenixCommander_ZealotSuitReady", -1), PlayerGroupSingle(lp_player));
        }
    }

    return true;
}

trigger auto_libCOMI_gf_CM_VOResourceInit_Trigger = null;

void libCOMI_gf_CM_VOResourceInit () {
    if (auto_libCOMI_gf_CM_VOResourceInit_Trigger == null) {
        auto_libCOMI_gf_CM_VOResourceInit_Trigger = TriggerCreate("auto_libCOMI_gf_CM_VOResourceInit_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_VOResourceInit_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_VOResourceInit_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    libCOMI_gv_cM_VOResourceReqSendButton = DialogControlLastCreated();
    TriggerEnable(libCOMI_gt_CM_VOResourceSent, true);
    TriggerEnable(libCOMI_gt_CM_VOResourceRequest, true);
    return true;
}

void libCOMI_gf_SendMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_sourcePlayer) {
    // Implementation
    libCOMI_gv_cM_TransmissionCurrentType = lp_transmissionType;
    libCOMI_gv_cM_TransmissionSource = lp_sourcePlayer;
    TriggerExecute(libCOMI_gt_CM_TransmissionSend, true, lp_waitUntilDone);
}

void libCOMI_gf_SendSplitMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_primaryPlayer, int lp_sourcePlayer) {
    playergroup auto0346F589_g;
    int auto0346F589_p;

    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_primaryPlayers;
    playergroup lv_secondaryPlayers;

    // Variable Initialization
    lv_primaryPlayers = PlayerGroupEmpty();
    lv_secondaryPlayers = PlayerGroupEmpty();

    // Implementation
    libCOMI_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    auto0346F589_g = libCOOC_gf_HumanPlayers(); 
    auto0346F589_p = 1;
    for ( ; auto0346F589_p <= PlayerGroupCount(auto0346F589_g) ; auto0346F589_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto0346F589_g, auto0346F589_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto0346F589_g, auto0346F589_p);
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lv_indexPlayer == lp_primaryPlayer)) {
            PlayerGroupAdd(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer);
        }
        else {
            PlayerGroupAdd(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer);
        }
    }
    libCOMI_gf_SendMissionTransmission(lp_transmissionType, lp_waitUntilDone, lp_sourcePlayer);
}

void libCOMI_gf_WaitForMissionTransmission () {
    // Variable Declarations
    int lv_originalCount;

    // Variable Initialization

    // Implementation
    if ((TriggerActiveCount(libCOMI_gt_CM_TransmissionSend) == 0)) {
        return ;
    }

    lv_originalCount = libCOMI_gv_cM_TransmissionCount;
    while (!((lv_originalCount != libCOMI_gv_cM_TransmissionCount))) {
        Wait(0.0625, c_timeGame);
    }
}

void libCOMI_gf_CM_TransmissionUpdateConvoPlayers (string lp_conversation) {
    playergroup auto6088D53C_g;
    int auto6088D53C_p;
    string auto11F928C9_val;

    // Variable Declarations
    playergroup lv_terranPlayers;
    playergroup lv_zergPlayers;
    playergroup lv_protossPlayers;
    playergroup lv_primaryTerranPlayers;
    playergroup lv_primaryZergPlayers;
    playergroup lv_primaryProtossPlayers;
    playergroup lv_secondaryTerranPlayers;
    playergroup lv_secondaryZergPlayers;
    playergroup lv_secondaryProtossPlayers;
    playergroup lv_alarakPlayers;
    playergroup lv_notAlarakPlayers;
    int lv_alarakPlayer;
    int lv_indexPlayer;

    // Variable Initialization
    lv_terranPlayers = PlayerGroupEmpty();
    lv_zergPlayers = PlayerGroupEmpty();
    lv_protossPlayers = PlayerGroupEmpty();
    lv_primaryTerranPlayers = PlayerGroupEmpty();
    lv_primaryZergPlayers = PlayerGroupEmpty();
    lv_primaryProtossPlayers = PlayerGroupEmpty();
    lv_secondaryTerranPlayers = PlayerGroupEmpty();
    lv_secondaryZergPlayers = PlayerGroupEmpty();
    lv_secondaryProtossPlayers = PlayerGroupEmpty();
    lv_alarakPlayers = PlayerGroupEmpty();
    lv_notAlarakPlayers = PlayerGroupEmpty();

    // Implementation
    auto6088D53C_g = libCOOC_gf_HumanPlayers(); 
    auto6088D53C_p = 1;
    for ( ; auto6088D53C_p <= PlayerGroupCount(auto6088D53C_g) ; auto6088D53C_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto6088D53C_g, auto6088D53C_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto6088D53C_g, auto6088D53C_p);
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lp_conversation == "acVictory")) {
            ConversationDataLineSetPlayers("acVictory", (libCOOC_gf_CC_CommanderConvoTag(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(lv_indexPlayer)))), PlayerGroupSingle(lv_indexPlayer));
        }

        auto11F928C9_val = PlayerRace(lv_indexPlayer);
        if (auto11F928C9_val == "Terr") {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryTerranPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryTerranPlayers, lv_indexPlayer);
            }

        }
        else if (auto11F928C9_val == "Prot") {
            PlayerGroupAdd(lv_protossPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryProtossPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryProtossPlayers, lv_indexPlayer);
            }

        }
        else if (auto11F928C9_val == "Zerg") {
            PlayerGroupAdd(lv_zergPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryZergPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryZergPlayers, lv_indexPlayer);
            }

        }
        else {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
        }
    }
    ConversationDataLineSetPlayers(lp_conversation, ("Protoss"), lv_protossPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Terran"), lv_terranPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Zerg"), lv_zergPlayers);
    if ((PlayerGroupCount(libCOMI_gv_cM_TransmissionPrimaryPlayers) > 0)) {
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryProtoss"), lv_primaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryZerg"), lv_primaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryTerran"), lv_primaryTerranPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryProtoss"), lv_secondaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryZerg"), lv_secondaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryTerran"), lv_secondaryTerranPlayers);
    }

    if ((libCOOC_gf_CC_CurrentMap() == "AC_SlaynPayload")) {
        lv_notAlarakPlayers = libCOOC_gf_HumanPlayers();
        lv_alarakPlayer = libCOOC_gf_CC_CommanderPlayer("ProtossAlarak");
        if ((lv_alarakPlayer != c_playerAny)) {
            PlayerGroupRemove(lv_notAlarakPlayers, lv_alarakPlayer);
            PlayerGroupAdd(lv_alarakPlayers, lv_alarakPlayer);
            ConversationDataLineSetPlayers(lp_conversation, ("Alarak"), lv_alarakPlayers);
        }

        ConversationDataLineSetPlayers(lp_conversation, ("NotAlarak"), lv_notAlarakPlayers);
    }

}

bool libCOMI_gf_CM_PlayerHasTransmission (int lp_player) {
    // Implementation
    if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
        return false;
    }

    if ((TransmissionPlayerHasActiveTransmission(lp_player) == false)) {
        return false;
    }

    return true;
}

void libCOMI_gf_CM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    if ((lp_sound == null)) {
        return ;
    }

    libCOMI_gv_cM_SendTransmissionCampaignIndex += 1;
    lv_localIndex = libCOMI_gv_cM_SendTransmissionCampaignIndex;
    lv_oldSpeaker = libCOMI_gv_cM_SendTransmissionCampaignSpeaker;
    libCOMI_gv_cM_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = libCOMI_gv_cM_SendTransmissionCampaignTrigger;
    libCOMI_gv_cM_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != libCOMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == libCOMI_ge_MissionTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(libCOMI_gv_cM_SendTransmissionCampaignPortrait, 1) == false)))) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    libCOMI_gv_cM_SendTransmissionCampaignPortrait = lv_portrait;
    if ((libCOMI_gv_cM_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(libCOMI_gv_cM_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }

    libCOMI_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((PlayerType(UnitGetOwner(lp_unit)) == c_playerTypeUser)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, true, "Talk");
                }

            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn == true)) {
            if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
                if (((UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "WarPig") || (UnitGetType(lp_unit) == "MengskMarine") || (UnitGetType(lp_unit) == "Medic") || (UnitGetType(lp_unit) == "Firebat") || (UnitGetType(lp_unit) == "Marauder"))) {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.500000");
                }
                else {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
                }
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            }
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            libNtve_gf_AttachModelToUnit(lp_unit, "TalkIconRing", "Ref_Origin");
            lv_talkRing = libNtve_gf_ActorLastCreated();
        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, 1) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", PointWithOffset(UnitGetPosition(lp_unit), 0.5, 3.5), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }

    }

    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        libCOMI_gf_CM_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
    else {
        libCOMI_gf_CM_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
}

trigger auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

void libCOMI_gf_CM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, int lp_ping, int lp_localIndex) {
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
    int lp_ping = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }

    Wait(0.75, c_timeReal);
    if ((lp_localIndex != libCOMI_gv_cM_SendTransmissionCampaignIndex)) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }

        return true;
    }

    libCOMI_gv_cM_SendTransmissionCampaignIndex = 0;
    libCOMI_gv_cM_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(libCOMI_gt_CM_SendTransmissionCampaignTick, true, false);
    if ((lp_keepPortraitVisible == libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }

    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }

    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }

    return true;
}

void libCOMI_gf_HideCampaignTransmissionPortrait () {
    // Implementation
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
}

void libCOMI_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff) {
    int auto664A67F5_val;

    // Implementation
    auto664A67F5_val = lp_option;
    if (auto664A67F5_val == libCOMI_ge_MissionTransmissionOptions_ChatBubble) {
        libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn = lp_onOff;
    }
    else {
    }
}

fixed libCOMI_gf_ConvesationLineDuration (string lp_conversationLine) {
    // Variable Declarations
    soundlink lv_sound;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    return SoundLengthSync(lv_sound);
}

void libCOMI_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    if ((lv_sound == null)) {
        return ;
    }

    libCOMI_gf_CM_SendTransmissionCampaignInternal(false, lp_unit, null, lv_sound, null, null, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, CatalogFieldValueGet(c_gameCatalogSound, ConversationDataGetSound(lp_conversationLine, true), "AssetArray[" + IntToString(0) + "].PortraitActor", c_playerAny));
}

void libCOMI_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    string auto41A5E975_val;

    // Variable Declarations
    soundlink lv_sound;
    string lv_portraitActor;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";

    // Implementation
    auto41A5E975_val = UnitGetType(lp_unit);
    if (auto41A5E975_val == "KerriganVoidUlnar02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "KerriganVoidBurrowed") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "KerriganEpilogue02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else {
    }
    lv_sound = SoundLink("PlaceholderSoundFile", c_soundIndexAny);
    libCOMI_gf_CM_SendTransmissionCampaignInternal(true, lp_unit, lp_model, lv_sound, lp_speaker, (StringExternal("Param/Value/lib_COMI_19071613") + lp_message), c_transmissionDurationSet, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, lv_portraitActor);
}

void libCOMI_gf_ShareVisionofUnitCoop (unit lp_unit, bool lp_shareUnshare, int lp_player) {
    // Implementation
    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_player) == true)) {
        if ((lp_shareUnshare == true)) {
            UnitGroupAdd(libCOMI_gv_cM_VisionShareUnits[lp_player], lp_unit);
            if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
                return ;
            }

        }
        else {
            UnitGroupRemove(libCOMI_gv_cM_VisionShareUnits[lp_player], lp_unit);
        }
    }

    libNtve_gf_ShareVisionofUnit(lp_unit, lp_shareUnshare, lp_player);
}

void libCOMI_gf_ShareVisionofUnitWithHumansCoop (unit lp_unit, bool lp_shareUnshare) {
    playergroup auto5067DF11_g;
    int auto5067DF11_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    auto5067DF11_g = libCOOC_gf_HumanPlayers(); 
    auto5067DF11_p = 1;
    for ( ; auto5067DF11_p <= PlayerGroupCount(auto5067DF11_g) ; auto5067DF11_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto5067DF11_g, auto5067DF11_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto5067DF11_g, auto5067DF11_p);
        libCOMI_gf_ShareVisionofUnitCoop(lp_unit, lp_shareUnshare, lv_indexPlayer);
    }
}

void libCOMI_gf_CM_VisionShareEnable (bool lp_enable) {
    playergroup auto1DE572BF_g;
    int auto1DE572BF_p;
    unitgroup auto9D7EC34C_g;
    int auto9D7EC34C_u;
    playergroup autoD3C255DD_g;
    int autoD3C255DD_p;

    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;
    bool lv_shareUnshare;
    int lv_aIPlayer;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_VisionShareEnabled = lp_enable;
    if ((lp_enable == true)) {
        lv_shareUnshare = true;
    }
    else {
        lv_shareUnshare = false;
    }
    auto1DE572BF_g = libCOOC_gf_HumanPlayers(); 
    auto1DE572BF_p = 1;
    for ( ; auto1DE572BF_p <= PlayerGroupCount(auto1DE572BF_g) ; auto1DE572BF_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto1DE572BF_g, auto1DE572BF_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto1DE572BF_g, auto1DE572BF_p);
        auto9D7EC34C_g = libCOMI_gv_cM_VisionShareUnits[lv_indexPlayer];
        auto9D7EC34C_u = 1;
        for ( ; auto9D7EC34C_u <= UnitGroupCount(auto9D7EC34C_g, c_unitCountAll) ; auto9D7EC34C_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto9D7EC34C_g, auto9D7EC34C_u)) ) {
            lv_indexUnit = UnitGroupUnit(auto9D7EC34C_g, auto9D7EC34C_u);
            libNtve_gf_ShareVisionofUnit(lv_indexUnit, lv_shareUnshare, lv_indexPlayer);
        }
        autoD3C255DD_g = libCOMI_gv_cM_SharedVisionPlayers[lv_indexPlayer]; 
        autoD3C255DD_p = 1;
        for ( ; autoD3C255DD_p <= PlayerGroupCount(autoD3C255DD_g) ; autoD3C255DD_p += BoolToInt(lv_aIPlayer == PlayerGroupPlayer(autoD3C255DD_g, autoD3C255DD_p)) ) {
            lv_aIPlayer = PlayerGroupPlayer(autoD3C255DD_g, autoD3C255DD_p);
            libCOMI_gf_SetAllianceAspectCoop(lv_aIPlayer, c_allianceIdVision, lv_indexPlayer, true);
        }
    }
}

void libCOMI_gf_CM_DropPod_Zerg_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    unitgroup auto29D5EF81_g;
    int auto29D5EF81_u;
    unitgroup auto7E0D3E3B_g;
    int auto7E0D3E3B_u;
    int auto23F26CA9_ae;
    int auto23F26CA9_ai;

    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    int lv_moveAttempts;
    unit lv_creep;

    // Variable Initialization

    // Implementation
    auto29D5EF81_g = lp_units;
    auto29D5EF81_u = 1;
    for ( ; auto29D5EF81_u <= UnitGroupCount(auto29D5EF81_g, c_unitCountAll) ; auto29D5EF81_u += BoolToInt(lv_chosenUnit == UnitGroupUnit(auto29D5EF81_g, auto29D5EF81_u)) ) {
        lv_chosenUnit = UnitGroupUnit(auto29D5EF81_g, auto29D5EF81_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", c_unitCreateIgnorePlacement, lp_player, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    auto7E0D3E3B_g = lp_units;
    auto7E0D3E3B_u = 1;
    for ( ; auto7E0D3E3B_u <= UnitGroupCount(auto7E0D3E3B_g, c_unitCountAll) ; auto7E0D3E3B_u += BoolToInt(lv_chosenUnit == UnitGroupUnit(auto7E0D3E3B_g, auto7E0D3E3B_u)) ) {
        lv_chosenUnit = UnitGroupUnit(auto7E0D3E3B_g, auto7E0D3E3B_u);
        auto23F26CA9_ae = 100;
        auto23F26CA9_ai = 1;
        lv_moveAttempts = 1;
        for ( ; ( (auto23F26CA9_ai >= 0 && lv_moveAttempts <= auto23F26CA9_ae) || (auto23F26CA9_ai <= 0 && lv_moveAttempts >= auto23F26CA9_ae) ) ; lv_moveAttempts += auto23F26CA9_ai ) {
            lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
            lv_angle = (lv_angle + 77.0);
            if ((PathingType(lv_dropLocation) == c_pathingGround) && (PointPathingIsConnected(lv_dropLocation, lv_dropPodLocation) == true) && (PointPathingPassable(lv_dropLocation) == true)) {
                break;
            }

        }
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libCOMI_gf_CM_DropPod_Terran_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    unitgroup autoB56D9329_g;
    int autoB56D9329_u;
    unitgroup auto7DD6500F_g;
    int auto7DD6500F_u;
    int autoE2C02429_ae;
    int autoE2C02429_ai;

    // Variable Declarations
    unit lv_indexUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;
    int lv_moveAttempts;
    fixed lv_spawnAngle;

    // Variable Initialization

    // Implementation
    autoB56D9329_g = lp_units;
    autoB56D9329_u = 1;
    for ( ; autoB56D9329_u <= UnitGroupCount(autoB56D9329_g, c_unitCountAll) ; autoB56D9329_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoB56D9329_g, autoB56D9329_u)) ) {
        lv_indexUnit = UnitGroupUnit(autoB56D9329_g, autoB56D9329_u);
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
    lv_subIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    auto7DD6500F_g = lp_units;
    auto7DD6500F_u = 1;
    for ( ; auto7DD6500F_u <= UnitGroupCount(auto7DD6500F_g, c_unitCountAll) ; auto7DD6500F_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto7DD6500F_g, auto7DD6500F_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto7DD6500F_g, auto7DD6500F_u);
        autoE2C02429_ae = 100;
        autoE2C02429_ai = 1;
        lv_moveAttempts = 1;
        for ( ; ( (autoE2C02429_ai >= 0 && lv_moveAttempts <= autoE2C02429_ae) || (autoE2C02429_ai <= 0 && lv_moveAttempts >= autoE2C02429_ae) ) ; lv_moveAttempts += autoE2C02429_ai ) {
            lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_spawnAngle);
            lv_spawnAngle = (lv_spawnAngle + 77.0);
            if ((PathingType(lv_dropLocation) == c_pathingGround) && (PointPathingIsConnected(lv_dropLocation, lv_dropPodLocation) == true)) {
                break;
            }

        }
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        UnitSetPosition(lv_indexUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_indexUnit, true);
        libNtve_gf_PauseUnit(lv_indexUnit, false);
        lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
        UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(null, lv_moveLocation), c_orderQueueReplace);
        if ((lv_subIndex == lv_countPerLine)) {
            lv_subIndex = 1;
            lv_angle = lv_angleStart;
            lv_distance -= 0.8;
        }
        else {
            lv_subIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void libCOMI_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player) {
    int auto30FEF00B_val;

    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    PointSetFacing(lv_dropLocation, PointGetFacing(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    DataTableSetUnitGroup(false, libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName(), lv_dropUnits);
    auto30FEF00B_val = lp_race;
    if (auto30FEF00B_val == libCOMI_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libCOMI_gf_CM_DropPod_Terran_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libCOMI_gv_cM_DropPod_TP_Location = lv_dropLocation;
            libCOMI_gv_cM_DropPod_TP_Units = lv_dropUnits;
            libCOMI_gv_cM_DropPod_TP_Player = lp_player;
            TriggerExecute(libCOMI_gt_CM_DropPod_Terran_DontWait, true, false);
        }
    }
    else if (auto30FEF00B_val == libCOMI_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libCOMI_gf_CM_DropPod_Zerg_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libCOMI_gv_cM_DropPod_TP_Location = lv_dropLocation;
            libCOMI_gv_cM_DropPod_TP_Units = lv_dropUnits;
            libCOMI_gv_cM_DropPod_TP_Player = lp_player;
            TriggerExecute(libCOMI_gt_CM_DropPod_Zerg_DontWait, true, false);
        }
    }
    else {
    }
}

void libCOMI_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait) {
    bool autoFAF09496_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_buildingType, c_unitCreateIgnorePlacement, lp_player, lp_landingPoint);
    libCOMI_gv_cM_DropPod_TP_ZergBuilding = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    DataTableSetUnitGroup(false, libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName(), UnitLastCreatedGroup());
    autoFAF09496_val = lp_waitDontWait;
    if (autoFAF09496_val == true) {
        libCOMI_gf_CM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else if (autoFAF09496_val == false) {
        libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else {
    }
}

trigger auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger = null;
string auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
point auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
int auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_player;

void libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_buildingType = lp_buildingType;
    auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_landingPoint = lp_landingPoint;
    auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger == null) {
        auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger = TriggerCreate("auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_TriggerFunc (bool testConds, bool runActions) {
    string lp_buildingType = auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
    point lp_landingPoint = auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
    int lp_player = auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_player;

    // Implementation
    libCOMI_gf_CM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    return true;
}

void libCOMI_gf_CM_DropPodCreateZergBuilding_Wait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    // Variable Declarations
    unit lv_droppod;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_landingPoint, 270.0);
    lv_droppod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    UnitTypeMoveBlockersFromPoint(lp_buildingType, lp_player, lp_landingPoint, 0.0);
    Wait(1.25, c_timeReal);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(lp_landingPoint, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "ZergDropPodLarge") && (UnitGroupLoopCurrent() != UnitLastCreated())) {
            if (((UnitGetOwner(UnitGroupLoopCurrent()) == lp_player) || (libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(UnitGroupLoopCurrent()), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(UnitGroupLoopCurrent(), UnitTypePlacementFromPoint(lp_buildingType, UnitGetOwner(UnitGroupLoopCurrent()), lp_landingPoint, 4.0), true);
            }
            else {
                UnitKill(UnitGroupLoopCurrent());
            }
        }

    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(libCOMI_gv_cM_DropPod_TP_ZergBuilding, true);
    Wait(5.0, c_timeReal);
    UnitKill(lv_droppod);
}

string libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName () {
    // Implementation
    return "LASTDROPPODEDUNITS";
}

unitgroup libCOMI_gf_LastDroppedUnits () {
    // Implementation
    return DataTableGetUnitGroup(false, libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName());
}

unit libCOMI_gf_CM_NexusBestWorkerRallyMineral (unit lp_nexus) {
    unitgroup auto956D9CE4_g;
    int auto956D9CE4_u;
    unitgroup auto226EA3E5_g;
    int auto226EA3E5_u;

    // Variable Declarations
    unit lv_indexUnitOuter;
    unit lv_indexUnitInner;
    fixed lv_bestDistance;
    fixed lv_curDistance;
    region lv_searchArea;
    unitgroup lv_mineralGroup;
    unit lv_bestMineral;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    lv_searchArea = RegionCircle(UnitGetPosition(lp_nexus), 10.0);
    lv_mineralGroup = UnitGroup("MineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("RichMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("UmojanLabMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    auto956D9CE4_g = lv_mineralGroup;
    auto956D9CE4_u = 1;
    for ( ; auto956D9CE4_u <= UnitGroupCount(auto956D9CE4_g, c_unitCountAll) ; auto956D9CE4_u += BoolToInt(lv_indexUnitOuter == UnitGroupUnit(auto956D9CE4_g, auto956D9CE4_u)) ) {
        lv_indexUnitOuter = UnitGroupUnit(auto956D9CE4_g, auto956D9CE4_u);
        lv_curDistance = 0.0;
        auto226EA3E5_g = lv_mineralGroup;
        auto226EA3E5_u = 1;
        for ( ; auto226EA3E5_u <= UnitGroupCount(auto226EA3E5_g, c_unitCountAll) ; auto226EA3E5_u += BoolToInt(lv_indexUnitInner == UnitGroupUnit(auto226EA3E5_g, auto226EA3E5_u)) ) {
            lv_indexUnitInner = UnitGroupUnit(auto226EA3E5_g, auto226EA3E5_u);
            if ((lv_indexUnitOuter != lv_indexUnitInner)) {
                lv_curDistance += DistanceBetweenPoints(UnitGetPosition(lv_indexUnitOuter), UnitGetPosition(lv_indexUnitInner));
            }

        }
        if (((lv_bestDistance == 0.0) || (lv_curDistance < lv_bestDistance))) {
            lv_bestDistance = lv_curDistance;
            lv_bestMineral = lv_indexUnitOuter;
        }

    }
    return lv_bestMineral;
}

void libCOMI_gf_SetWorkerRallyPointforNexus (unit lp_nexus) {
    string autoE70E9910_val;

    // Variable Declarations
    unit lv_bestMineral;
    point lv_rallyPoint;

    // Variable Initialization

    // Implementation
    lv_bestMineral = libCOMI_gf_CM_NexusBestWorkerRallyMineral(lp_nexus);
    if ((lv_bestMineral != null)) {
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(UnitGetOwner(lp_nexus)) == 1)) {
            autoE70E9910_val = UnitGetType(lp_nexus);
            if (autoE70E9910_val == "Nexus") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyNexus", 1), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "CommandCenter") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 1), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "OrbitalCommand") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 1), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "PlanetaryFortress") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 1), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "Hatchery") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "Lair") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "Hive") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else {
            }
        }

    }

}

void libCOMI_gf_SetWorkerRallyPointsPlayersNexuses (int lp_player) {
    string auto1EA0163E_val;
    unitgroup auto01E01BBA_g;
    int auto01E01BBA_u;

    // Variable Declarations
    unit lv_indexNexus;
    unitgroup lv_nexusGroup;

    // Variable Initialization
    lv_nexusGroup = UnitGroupEmpty();

    // Implementation
    auto1EA0163E_val = PlayerRace(lp_player);
    if (auto1EA0163E_val == "Prot") {
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Nexus", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else if (auto1EA0163E_val == "Terr") {
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("CommandCenter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("OrbitalCommand", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("PlanetaryFortress", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else if (auto1EA0163E_val == "Zerg") {
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Hatchery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Lair", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Hive", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
    }
    auto01E01BBA_g = lv_nexusGroup;
    auto01E01BBA_u = 1;
    for ( ; auto01E01BBA_u <= UnitGroupCount(auto01E01BBA_g, c_unitCountAll) ; auto01E01BBA_u += BoolToInt(lv_indexNexus == UnitGroupUnit(auto01E01BBA_g, auto01E01BBA_u)) ) {
        lv_indexNexus = UnitGroupUnit(auto01E01BBA_g, auto01E01BBA_u);
        libCOMI_gf_SetWorkerRallyPointforNexus(lv_indexNexus);
    }
}

void libCOMI_gf_CM_UseUnitNameAsUnitTip (unit lp_unit) {
    // Implementation
    if (((UnitGetType(lp_unit) == "ZergDropPod") || (UnitGetType(lp_unit) == "ZergDropPodLarge") || (UnitGetType(lp_unit) == "TerranDropPod") || (UnitGetType(lp_unit) == "ZergDropPodCreep"))) {
        return ;
    }

    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_CM_ApplyCampaignTeachingToUnit (unit lp_teachUnit) {
    // Implementation
    if ((UnitGetType(lp_teachUnit) == "DrakkenLaserDrillCoop")) {
        TextTagCreate(StringExternal("Param/Value/lib_COMI_AFA9A35D"), 18, UnitGetPosition(lp_teachUnit), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(lp_teachUnit)));
        TextTagAttachToUnit(TextTagLastCreated(), lp_teachUnit, 2.5);
        libCOMI_gv_cM_DrillTextTagCreated = TextTagLastCreated();
        TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillSelected, true);
        TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillDamaged, true);
    }

    if ((UnitGetType(lp_teachUnit) == "SolarForge") && (TechTreeUpgradeCount(UnitGetOwner(lp_teachUnit), "KaraxCommander", c_techCountCompleteOnly) == 1)) {
        TextTagCreate(StringExternal("Param/Value/lib_COMI_00AC11D7"), 18, UnitGetPosition(lp_teachUnit), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(lp_teachUnit)));
        TextTagAttachToUnit(TextTagLastCreated(), lp_teachUnit, 2.5);
        libCOMI_gv_cM_SolarForgeTextTag = TextTagLastCreated();
        TriggerEnable(libCOMI_gt_CM_CampaignSolarForgeSelected, true);
    }

}

void libCOMI_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_3704A828", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_3704A828");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_50F2381C", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_50F2381C");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_1C88F6E4", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_1C88F6E4");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_08BB63F6", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_08BB63F6");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount) {
    // Implementation
    UnitBehaviorSpawn(lp_hatchery, "SpawnLarva", lp_larvaCount);
}

void libCOMI_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_terms;

    // Variable Initialization
    lv_terms = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_terms = ("ScopeContains " + lp_doodadType);
    }

    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_terms);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libCOMI_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Implementation
    libCOMI_gf_GivePlayerResources(UnitGetPosition(lp_cacheUnit), lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
    UnitKill(lp_cacheUnit);
}

void libCOMI_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    int auto8ED25223_val;

    // Variable Declarations
    text lv_text;

    // Variable Initialization

    // Implementation
    auto8ED25223_val = lp_resourceType;
    if (auto8ED25223_val == libCOMI_ge_CacheResourceType_Mineral) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto8ED25223_val == libCOMI_ge_CacheResourceType_Vespene) {
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else {
    }
    libCOMI_gf_DisplayRewardFloatingText(lp_location, lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
}

void libCOMI_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    int auto2128925C_val;
    int autoC4309F63_val;

    // Variable Declarations
    text lv_text;
    text lv_signPrefix;

    // Variable Initialization

    // Implementation
    if ((lp_resourceAmount >= 0)) {
        lv_signPrefix = StringExternal("Param/Value/lib_COMI_3E03BDBE");
    }

    auto2128925C_val = lp_resourceType;
    if (auto2128925C_val == libCOMI_ge_CacheResourceType_Mineral) {
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "A", StringToText(("Kicker_Minerals")));
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "SIGN", lv_signPrefix);
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_FA2F2D3B");
    }
    else if (auto2128925C_val == libCOMI_ge_CacheResourceType_Vespene) {
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "A", StringToText(("Kicker_Gas")));
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "SIGN", lv_signPrefix);
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_3D845762");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_261E2441", "A", StringToText(("Kicker_Zerg")));
        TextExpressionSetToken("Param/Expression/lib_COMI_261E2441", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_261E2441");
    }
    if ((lp_resourceIcon != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_F881F2B7", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_COMI_F881F2B7", "B", StringToText(lp_resourceIcon));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_F881F2B7");
    }
    else {
        autoC4309F63_val = lp_resourceType;
        if (autoC4309F63_val == libCOMI_ge_CacheResourceType_Mineral) {
            TextExpressionSetToken("Param/Expression/lib_COMI_C99B9DE4", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_C99B9DE4");
        }
        else if (autoC4309F63_val == libCOMI_ge_CacheResourceType_Vespene) {
            TextExpressionSetToken("Param/Expression/lib_COMI_6CB2A27A", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_6CB2A27A");
        }
        else {
        }
    }
    if (((lp_resourceText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_A8624C75", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_COMI_A8624C75", "B", lp_resourceText);
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_A8624C75");
    }

    if ((lp_resourceAmount >= 0)) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("UI_Mutator_MicroTransactions", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    TextTagCreate(lv_text, 24, lp_location, 2.0, true, false, PlayerGroupSingle(lp_player));
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

void libCOMI_gf_DisplayMissionObjectiveRewardFloatingText (point lp_location, string lp_objective, int lp_player) {
}

bool libCOMI_gf_CM_StartingWorkerAutoHarvestEnabled () {
    // Implementation
    return PlayerGetState(1, c_playerStateStartingRallyEnabled);
}

void libCOMI_gf_StartingWorkersAutoHarvest (region lp_regionMineralWorker, region lp_regionGasWorker) {
    unitgroup autoA8D4E691_g;
    int autoA8D4E691_u;
    unitgroup auto7A456887_g;
    int auto7A456887_u;
    unitgroup auto219ADB5D_g;
    int auto219ADB5D_u;
    unitgroup auto85EF0FC7_g;
    int auto85EF0FC7_u;

    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_resourceGroup;
    unit lv_indexResource;
    unitgroup lv_unitGroupHarvestMinerals;
    unitgroup lv_unitGroupHarvestGas;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();
    lv_unitGroupHarvestMinerals = UnitGroupEmpty();
    lv_unitGroupHarvestGas = UnitGroupEmpty();

    // Implementation
    if ((libCOMI_gf_CM_StartingWorkerAutoHarvestEnabled() == false)) {
        return ;
    }

    if ((lp_regionMineralWorker != null)) {
        lv_unitGroupHarvestMinerals = UnitGroup(null, c_playerAny, lp_regionMineralWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }

    if ((TechTreeUpgradeCount(1, "K5AutoExtractor", c_techCountQueuedOrBetter) > 0)) {
        UnitGroupAddUnitGroup(lv_unitGroupHarvestMinerals, UnitGroup(null, c_playerAny, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        if ((lp_regionGasWorker != null)) {
            lv_unitGroupHarvestGas = UnitGroup(null, c_playerAny, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    if ((lv_unitGroupHarvestMinerals != UnitGroupEmpty())) {
        autoA8D4E691_g = lv_unitGroupHarvestMinerals;
        autoA8D4E691_u = 1;
        for ( ; autoA8D4E691_u <= UnitGroupCount(autoA8D4E691_g, c_unitCountAll) ; autoA8D4E691_u += BoolToInt(lv_indexWorker == UnitGroupUnit(autoA8D4E691_g, autoA8D4E691_u)) ) {
            lv_indexWorker = UnitGroupUnit(autoA8D4E691_g, autoA8D4E691_u);
            UnitGroupClear(lv_resourceGroup);
            auto7A456887_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7A456887_u = 1;
            for ( ; auto7A456887_u <= UnitGroupCount(auto7A456887_g, c_unitCountAll) ; auto7A456887_u += BoolToInt(lv_indexResource == UnitGroupUnit(auto7A456887_g, auto7A456887_u)) ) {
                lv_indexResource = UnitGroupUnit(auto7A456887_g, auto7A456887_u);
                if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Minerals")) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
            }

        }
    }

    if ((lv_unitGroupHarvestGas != UnitGroupEmpty())) {
        auto219ADB5D_g = lv_unitGroupHarvestGas;
        auto219ADB5D_u = 1;
        for ( ; auto219ADB5D_u <= UnitGroupCount(auto219ADB5D_g, c_unitCountAll) ; auto219ADB5D_u += BoolToInt(lv_indexWorker == UnitGroupUnit(auto219ADB5D_g, auto219ADB5D_u)) ) {
            lv_indexWorker = UnitGroupUnit(auto219ADB5D_g, auto219ADB5D_u);
            UnitGroupClear(lv_resourceGroup);
            auto85EF0FC7_g = UnitGroup(null, UnitGetOwner(lv_indexWorker), RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto85EF0FC7_u = 1;
            for ( ; auto85EF0FC7_u <= UnitGroupCount(auto85EF0FC7_g, c_unitCountAll) ; auto85EF0FC7_u += BoolToInt(lv_indexResource == UnitGroupUnit(auto85EF0FC7_g, auto85EF0FC7_u)) ) {
                lv_indexResource = UnitGroupUnit(auto85EF0FC7_g, auto85EF0FC7_u);
                if (((UnitGetType(lv_indexResource) == "Refinery") || (UnitGetType(lv_indexResource) == "Extractor") || (UnitGetType(lv_indexResource) == "Assimilator"))) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
            }

        }
    }

}

bool libCOMI_gf_UnitMoverExists (string lp_unitType, string lp_mover) {
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "Mover", c_playerAny) == lp_mover)) {
        return true;
    }
    else {
        return false;
    }
}

fixed libCOMI_gf_ExpansionRockLife (int lp_rockType) {
    // Variable Declarations
    fixed lv_rockLife;
    int lv_difficulty;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_GetMissionDifficulty();
    if ((lp_rockType == libCOMI_ge_ExpansionRockType_GeyserRock)) {
        if (((lv_difficulty == 1) || (lv_difficulty == 2))) {
            lv_rockLife = 500.0;
        }
        else {
            lv_rockLife = 1000.0;
        }
    }

    if ((lp_rockType == libCOMI_ge_ExpansionRockType_TownHallRock)) {
        if (((lv_difficulty == 1) || (lv_difficulty == 2))) {
            lv_rockLife = 1000.0;
        }
        else {
            lv_rockLife = 2000.0;
        }
    }

    return lv_rockLife;
}

void libCOMI_gf_SleepWakeUpUnitCoop (unit lp_unit, bool lp_sleepWakeUp, int lp_alwaysExclusions) {
    // Variable Declarations
    string lv_typeOfSleepyUnit;

    // Variable Initialization

    // Implementation
    if ((lp_sleepWakeUp == true) && (lp_alwaysExclusions == libCOMI_ge_SleepWakeUpExcludeOption_RespectExclusions)) {
        if ((lv_typeOfSleepyUnit != "OrbitalCommand") && (lv_typeOfSleepyUnit != "CommandCenter")) {
            libNtve_gf_SleepUnit(lp_unit, lp_sleepWakeUp);
        }

    }
    else {
        libNtve_gf_SleepUnit(lp_unit, lp_sleepWakeUp);
    }
}

point libCOMI_gf_CM_NearbyGroundPathablePoint (point lp_initialDropPoint, fixed lp_distanceOffsetMin, fixed lp_distanceOffsetMax) {
    int auto773DC6B0_ae;
    int auto773DC6B0_ai;

    // Variable Declarations
    point lv_returnedDropPoint;
    point lv_testDropPoint;
    int lv_moveAttempts;

    // Variable Initialization

    // Implementation
    lv_returnedDropPoint = lp_initialDropPoint;
    auto773DC6B0_ae = 100;
    auto773DC6B0_ai = 1;
    lv_moveAttempts = 1;
    for ( ; ( (auto773DC6B0_ai >= 0 && lv_moveAttempts <= auto773DC6B0_ae) || (auto773DC6B0_ai <= 0 && lv_moveAttempts >= auto773DC6B0_ae) ) ; lv_moveAttempts += auto773DC6B0_ai ) {
        lv_testDropPoint = PointWithOffsetPolar(lp_initialDropPoint, RandomFixed(lp_distanceOffsetMin, lp_distanceOffsetMax), libNtve_gf_RandomAngle());
        if ((PathingType(lv_testDropPoint) == c_pathingGround) && (PointPathingIsConnected(lv_testDropPoint, lp_initialDropPoint) == true) && (PointPathingPassable(lv_testDropPoint) == true)) {
            lv_returnedDropPoint = lv_testDropPoint;
            break;
        }

    }
    return lv_returnedDropPoint;
}

void libCOMI_gf_CM_ChatBarSetMode (int lp_mode, playergroup lp_players) {
    int auto3055BBDE_val;

    // Implementation
    if ((libCOMI_gv_cM_FullScreenUpperContainer == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
        libCOMI_gv_cM_FullScreenUpperContainer = DialogControlLastCreated();
    }

    auto3055BBDE_val = lp_mode;
    if (auto3055BBDE_val == libCOMI_ge_CM_ChatBarMode_CM_ChatBarMutator) {
        DialogControlSetAnimationState(libCOMI_gv_cM_FullScreenUpperContainer, lp_players, "MutatorSelectionState", "Active");
    }
    else {
        DialogControlSetAnimationState(libCOMI_gv_cM_FullScreenUpperContainer, lp_players, "MutatorSelectionState", "Inactive");
    }
}

void libCOMI_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    int auto859F408A_val;

    // Implementation
    if ((lp_formatOrNot == libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        auto859F408A_val = lp_messageType;
        if (auto859F408A_val == libCOMI_ge_CampaignMessageType_Hint) {
            TextExpressionSetToken("Param/Expression/lib_COMI_64DF7A24", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_64DF7A24"));
            SoundPlayForPlayer(SoundLink("UI_TerranHint", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_SimpleHint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
            SoundPlayForPlayer(SoundLink("UI_TerranHint", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_Secret) {
            TextExpressionSetToken("Param/Expression/lib_COMI_C1624255", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_C1624255"));
            SoundPlayForPlayer(SoundLink("TUISecret", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewUnitAcquired) {
            TextExpressionSetToken("Param/Expression/lib_COMI_A49EDD0B", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A49EDD0B"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewUnitAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewUnitAvailable) {
            TextExpressionSetToken("Param/Expression/lib_COMI_BA0BF873", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_BA0BF873"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewUnitAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewTechAvailable) {
            TextExpressionSetToken("Param/Expression/lib_COMI_39320B7C", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_39320B7C"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewTechAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewUnitAvailable2) {
            TextExpressionSetToken("Param/Expression/lib_COMI_D6A0DA61", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_D6A0DA61"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewTechAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_Warning) {
            TextExpressionSetToken("Param/Expression/lib_COMI_19CBF466", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_19CBF466"));
            SoundPlayForPlayer(SoundLink("UI_ZergWarning", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_MissionFailed) {
            TextExpressionSetToken("Param/Expression/lib_COMI_A4179B16", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A4179B16"));
            SoundPlayForPlayer(SoundLink("UI_TerranMissionFailed", 1), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_MissionVictory) {
            TextExpressionSetToken("Param/Expression/lib_COMI_A60635A0", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A60635A0"));
            SoundPlayForPlayer(SoundLink("UI_MissionComplete", 3), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
    }
}

string libCOMI_gf_CM_ReticleModelOfStyle (int lp_type, int lp_size) {
    int autoCDEF28CD_val;
    int autoBEC58E6C_val;
    int auto993B9915_val;
    int auto1B271D82_val;

    // Variable Declarations
    string lv_model;

    // Variable Initialization

    // Implementation
    autoCDEF28CD_val = lp_size;
    if (autoCDEF28CD_val == libCOMI_ge_CampaginReticleSize_Large) {
        autoBEC58E6C_val = lp_type;
        if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libCOMI_ge_CampaginReticleSize_Medium) {
        auto993B9915_val = lp_type;
        if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libCOMI_ge_CampaginReticleSize_Small) {
        auto1B271D82_val = lp_type;
        if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libCOMI_gf_CM_ReticleTextFontOfStyle (int lp_type) {
    int auto4C012C4E_val;

    // Variable Declarations
    string lv_fontStyle;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto4C012C4E_val = lp_type;
    if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
        lv_fontStyle = "VoidReticleProtossBonusObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
        lv_fontStyle = "VoidReticleProtossEnemy";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
        lv_fontStyle = "VoidReticleProtossMainObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
        lv_fontStyle = "VoidReticleTerranBonusObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
        lv_fontStyle = "VoidReticleTerranEnemy";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
        lv_fontStyle = "VoidReticleTerranMainObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
        lv_fontStyle = "VoidReticleZergBonusObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
        lv_fontStyle = "VoidReticleZergEnemy";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
        lv_fontStyle = "VoidReticleZergMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libCOMI_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libCOMI_gf_CM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libCOMI_gf_CM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_COMI_C1B831B2", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_COMI_C1B831B2", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_C1B831B2"), 24, lp_location, 0.0, true, true, libCOOC_gf_HumanPlayers());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libCOMI_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libCOMI_gf_CM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnitInheritVisibility(lp_target, lv_model, lp_attachPoint);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libCOMI_gf_CM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_COMI_242FDFAD", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_COMI_242FDFAD", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_242FDFAD"), 24, UnitGetPosition(lp_target), 0.0, true, true, libCOOC_gf_HumanPlayers());
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 0.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

int libCOMI_gf_LeaderboardTimeScore (int lp_maxScore, int lp_parTimeMinutes) {
    // Variable Declarations
    int lv_parTimeSeconds;
    fixed lv_scoreModifierReal;
    int lv_scoreValue;
    fixed lv_scoreValueReal;
    int lv_adjustedMaxScore;

    // Variable Initialization

    // Implementation
    lv_parTimeSeconds = (lp_parTimeMinutes * 60);
    lv_adjustedMaxScore = (lp_maxScore + (lv_parTimeSeconds * 16));
    lv_scoreModifierReal = (IntToFixed(lp_maxScore) / IntToFixed(lv_parTimeSeconds));
    lv_scoreValueReal = (IntToFixed(lv_adjustedMaxScore) - (GameGetMissionTime() * lv_scoreModifierReal));
    lv_scoreValue = FixedToInt(lv_scoreValueReal);
    if ((lv_scoreValueReal > 0)) {
        return lv_scoreValue;
    }
    else {
        return 0;
    }
}

int libCOMI_gf_LeaderboardFinalScoreChecker (int lp_scoreValue, int lp_objective, bool lp_checkCompletion) {
    // Variable Declarations
    int lv_pityScore;

    // Variable Initialization
    lv_pityScore = 1000;

    // Implementation
    if ((lp_checkCompletion == true)) {
        if (((ObjectiveGetState(lp_objective) != c_objectiveStateCompleted))) {
            return 0;
        }
        else {
            if ((lp_scoreValue < lv_pityScore)) {
                return lv_pityScore;
            }
            else {
                return lp_scoreValue;
            }
        }
    }
    else {
        if ((ObjectiveGetState(lp_objective) == c_objectiveStateFailed)) {
            return 0;
        }
        else {
            if ((lp_scoreValue < lv_pityScore)) {
                return lv_pityScore;
            }
            else {
                return lp_scoreValue;
            }
        }
    }
}

int libCOMI_gf_LeaderboardObjectiveHealthScore (unit lp_objectiveUnit, int lp_maxScore) {
    // Variable Declarations
    int lv_scoreModifier;
    int lv_scoreValue;

    // Variable Initialization

    // Implementation
    lv_scoreModifier = (lp_maxScore / 100);
    lv_scoreValue = FixedToInt((UnitGetPropertyFixed(lp_objectiveUnit, c_unitPropLifePercent, c_unitPropCurrent) * lv_scoreModifier));
    if (((lv_scoreValue > 0) || (UnitIsAlive(lp_objectiveUnit) == true))) {
        return lv_scoreValue;
    }
    else {
        return 0;
    }
}

fixed libCOMI_gf_LeaderboardObjectDurationModifierValue (int lp_maxScore, int lp_maxDurationMinutes) {
    // Variable Declarations
    int lv_maxDurationSeconds;
    fixed lv_scoreModifier;

    // Variable Initialization

    // Implementation
    lv_maxDurationSeconds = (lp_maxDurationMinutes * (960));
    lv_scoreModifier = (IntToFixed(lp_maxScore) / IntToFixed(lv_maxDurationSeconds));
    return lv_scoreModifier;
}

void libCOMI_gf_CM_CampaignMissionInit () {
    playergroup autoFBC5769B_g;
    int autoFBC5769B_p;

    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cM_CampaignMissionPerfTest == true)) {
        PerfTestStart(StringExternal("Param/Value/lib_COMI_8A49EC89"));
        TriggerExecute(libCOMI_gt_CM_CampaignMissionPerfLog, true, false);
    }

    libCOMI_gv_cM_CombatTimer = TimerCreate();
    TimerStart(libCOMI_gv_cM_CombatTimer, 86400.0, false, c_timeGame);
    UnitEventSetNullVariableInvalid(true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    libCOUI_gv_cU_MissionUIContainer = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    if (((PlayerStatus(1) == c_playerStatusLeft) || (PlayerStatus(2) == c_playerStatusLeft))) {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    }
    else {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    }
    PlayerSetAlliance(1, c_allianceIdDefeat, 2, true);
    PlayerSetAlliance(2, c_allianceIdDefeat, 1, true);
    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
    if ((libCOOC_gf_CC_DifficultyIndex(PlayerDifficulty(3)) != 0)) {
        PlayerSetDifficulty(1, PlayerDifficulty(3));
    }

    if ((libCOOC_gf_CC_DifficultyIndex(PlayerDifficulty(4)) != 0)) {
        PlayerSetDifficulty(2, PlayerDifficulty(4));
    }

    GameSetSpeedLocked(true);
    if ((libCOMU_gf_CT_MutatorInCustom() == false)) {
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 4)) {
            GameSetSpeedValue(c_gameSpeedFaster);
        }
        else {
            GameSetSpeedValue(c_gameSpeedFast);
        }
    }

    libCOMU_gf_CT_InitializeAll();
    TriggerExecute(libCOMI_gt_CM_CampaignUnitTeaching, true, false);
    TriggerExecute(libCOMI_gt_CM_StartingTech, true, false);
    libCOMI_gf_EnableDisableZerglingRespawn(true);
    TriggerExecute(libCOMI_gt_CM_HatcheryPrimarySearch, false, false);
    TriggerExecute(libCOMI_gt_CM_HeroSpawn, true, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
    libCOUI_gv_cU_ObjectivePanel = DialogControlLastCreated();
    libCOUI_gf_CU_UpdateObjectivePanel();
    autoFBC5769B_g = libCOOC_gf_HumanPlayers(); 
    autoFBC5769B_p = 1;
    for ( ; autoFBC5769B_p <= PlayerGroupCount(autoFBC5769B_g) ; autoFBC5769B_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoFBC5769B_g, autoFBC5769B_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoFBC5769B_g, autoFBC5769B_p);
        MeleeSetOption(lv_indexPlayer, c_meleeOptionPoints, true);
        PlayerSetState(lv_indexPlayer, c_playerStateXPGain, true);
        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer), "InThisMission", 1, 1);
        libCOMI_gf_CM_DifficultyApplySettings(lv_indexPlayer);
    }
    if ((PlayerType(2) == c_playerTypeComputer)) {
        AIMeleeStart(2);
    }

    TriggerExecute(libCOMI_gt_CM_GlobalCasterInit, true, false);
    libCOUI_gf_CU_HelpInit();
    libCOMI_gf_CM_DataUtilInit();
    libCOMI_gf_CM_CommanderVOInit();
    libCOUI_gf_CU_MinimapAllyViewInit();
    libCOUI_gf_CU_MutatorListInit();
    libCOMI_gf_CM_ChatBarSetMode(libCOMI_ge_CM_ChatBarMode_CM_ChatBarNormal, PlayerGroupAll());
    libCOMI_gf_CM_GPRemindersInit();
}

void libCOMI_gf_CM_CampaignHelpPanelTempSetup () {
    // Implementation
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
}

void libCOMI_gf_CM_DifficultyApplySettings (int lp_player) {
    int autoC8030729_val;

    // Implementation
    autoC8030729_val = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (autoC8030729_val == 1) {
        PlayerModifyPropertyInt(lp_player, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Casual", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoC8030729_val == 2) {
        PlayerModifyPropertyInt(lp_player, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Normal", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoC8030729_val == 3) {
        PlayerModifyPropertyInt(lp_player, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Hard", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoC8030729_val == 4) {
        PlayerModifyPropertyInt(lp_player, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Brutal", "DamageTakenRatio", 1) * 100.0)));
    }
    else {
    }
}

void libCOMI_gf_PlayMapIntroZoom (bool lp_waitDontWait) {
    // Implementation
    TriggerExecute(libCOMI_gt_CM_CampaignMissionIntroZoomIn, true, lp_waitDontWait);
}

void libCOMI_gf_LoadCoopMission (string lp_map, trigger lp_startTrigger) {
    // Implementation
    libCOMI_gv_cM_CampaignMissionStartTrigger = lp_startTrigger;
    libCOOC_gf_LoadAlliedCommandersData(lp_map, libCOMI_gt_CM_CampaignMissionInitialize);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Void Ping Sound
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoidPingSound_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMU_gf_MutatorIsEnabled("BlackFog") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("UI_TerranPing", -1)), c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoidPingSound_Init () {
    libCOMI_gt_VoidPingSound = TriggerCreate("libCOMI_gt_VoidPingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAbathurBiomassReport
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugAbathurBiomassReport_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMI_684BFF34", "A", IntToText(libCOMI_gv_cM_DebugAbathurBiomassCollected));
    TextExpressionSetToken("Param/Expression/lib_COMI_684BFF34", "B", IntToText(libCOMI_gv_cM_DebugAbathurBiomassDroppedNormal));
    TextExpressionSetToken("Param/Expression/lib_COMI_684BFF34", "C", IntToText(libCOMI_gv_cM_DebugAbathurBiomassLost));
    TextExpressionSetToken("Param/Expression/lib_COMI_684BFF34", "D", IntToText(libCOMI_gv_cM_DebugAbathurBiomassDroppedRefund));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COMI_684BFF34"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugAbathurBiomassReport_Init () {
    libCOMI_gt_CM_DebugAbathurBiomassReport = TriggerCreate("libCOMI_gt_CM_DebugAbathurBiomassReport_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugAbathurBiomassReport, c_playerAny, "-bioreport", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAIPersonalityChange
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugAIPersonalityChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_CoopAIPlayer_CommanderShared = libCOUI_gf_CU_AIChoiceSelectedPersonality(1);
    libCOUI_gf_CU_AIChoiceClose(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugAIPersonalityChange_Init () {
    libCOMI_gt_CM_DebugAIPersonalityChange = TriggerCreate("libCOMI_gt_CM_DebugAIPersonalityChange_Func");
    libCOUI_gf_CU_AIChoiceClosed(libCOMI_gt_CM_DebugAIPersonalityChange);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugHeroReviveInstant
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugHeroReviveInstant_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "2")) {
        libNtve_gf_PlayerRemoveCooldown(2, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(2)));
    }
    else {
        libNtve_gf_PlayerRemoveCooldown(1, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(1)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugHeroReviveInstant_Init () {
    libCOMI_gt_CM_DebugHeroReviveInstant = TriggerCreate("libCOMI_gt_CM_DebugHeroReviveInstant_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugHeroReviveInstant, c_playerAny, "-revivenow", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugCommanderCooldowns
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugCommanderCooldowns_Func (bool testConds, bool runActions) {
    string auto864A12EB_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto864A12EB_val = PlayerCommander(EventPlayer());
    if (auto864A12EB_val == "Fenix") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenix");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenixDragoon");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenixArbiter");
    }
    else if (auto864A12EB_val == "Alarak") {
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "AlarakStructureOvercharge", "Abil/AlarakStructureOvercharge");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/AlarakACSummonDeathfleetTarget");
    }
    else if (auto864A12EB_val == "Artanis") {
        libNtve_gf_UnitRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOACaster");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SoASuperShield", "Abil/SoASuperShield");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAOrbitalStrikeActivate", "Abil/SOAOrbitalStrikeActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAStrafeAttack", "Abil/SOAStrafeAttack");
    }
    else if (auto864A12EB_val == "Vorazun") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOADarkPylon", "Abil/SOADarkPylon");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAShadowGuardCalldown", "Abil/SOAShadowGuardCalldown");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOATimeFreeze", "Abil/SOATimeFreeze");
    }
    else if (auto864A12EB_val == "Karax") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAThermalLanceActivate", "Abil/SOAThermalLanceActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAMapWideChrono", "Abil/SOAMapWideChrono");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAPurifierBeam", "Abil/SOAPurifierBeam");
    }
    else if (auto864A12EB_val == "Raynor") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/VoidCoopSummonHyperion");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/BansheeAirstrike");
    }
    else if (auto864A12EB_val == "Swann") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DrakkenLaserDrillBFG");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DrakkenLaserDrillNuke");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/SpecialDelivery");
    }
    else if (auto864A12EB_val == "Nova") {
        libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/NovaDefensiveMatrixDrone");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "NovaGriffinTransportLoadUnits", "Abil/NovaGriffinTransportLoadUnits");
    }
    else if (auto864A12EB_val == "Abathur") {
        libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/ToxicNestBuild");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "AbathurMend", "Abil/AbathurMend");
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "AbathurMend", "Abil/AbathurMend");
    }
    else if (auto864A12EB_val == "Stukov") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SIStukovInfestStructure", "Abil/SIStukovInfestStructure");
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SIStukovInfestStructureUpgraded", "Abil/SIStukovInfestStructureUpgraded");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/StukovSummonApocalisk");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/StukovSummonAleksander");
    }
    else {
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_COMI_86CE1B79") + IntToText(EventPlayer())), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugCommanderCooldowns_Init () {
    libCOMI_gt_CM_DebugCommanderCooldowns = TriggerCreate("libCOMI_gt_CM_DebugCommanderCooldowns_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugCommanderCooldowns, c_playerAny, "-coopcd", false);
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugCommanderCooldowns, c_playerAny, "cdr", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugApplySkin
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugApplySkin_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerApplySkin(EventPlayer(), (StringWord(EventChatMessage(false), 2)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugApplySkin_Init () {
    libCOMI_gt_CM_DebugApplySkin = TriggerCreate("libCOMI_gt_CM_DebugApplySkin_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugApplySkin, c_playerAny, "-skin", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CinematicModeOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CinematicModeOn_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CinematicModeOn_Init () {
    libCOMI_gt_CM_CinematicModeOn = TriggerCreate("libCOMI_gt_CM_CinematicModeOn_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_CinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CinematicModeOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CinematicModeOff_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CinematicModeOff_Init () {
    libCOMI_gt_CM_CinematicModeOff = TriggerCreate("libCOMI_gt_CM_CinematicModeOff_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_CinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AIManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AIManager_Func (bool testConds, bool runActions) {
    int autoE4C113EF_ae;
    int autoE4C113EF_ai;

    // Variable Declarations
    int lv_loopIndex;
    int lv_playerArrayIndex;
    bool lv_firstWave;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE4C113EF_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    autoE4C113EF_ai = 1;
    lv_loopIndex = 0;
    for ( ; ( (autoE4C113EF_ai >= 0 && lv_loopIndex <= autoE4C113EF_ae) || (autoE4C113EF_ai <= 0 && lv_loopIndex >= autoE4C113EF_ae) ) ; lv_loopIndex += autoE4C113EF_ai ) {
        lv_playerArrayIndex = (lv_loopIndex + (libCOMI_gv_cM_CoopAI_LastAIThinker + 1));
        lv_playerArrayIndex = ModI(lv_playerArrayIndex, (libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1));
        if ((libCOMI_gv_cM_CoopAIPlayer_Commander[lv_playerArrayIndex] != "None")) {
            libCOMI_gf_CM_AIThinkCoop(lv_playerArrayIndex);
            libCOMI_gv_cM_CoopAI_LastAIThinker = lv_playerArrayIndex;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AIManager_Init () {
    libCOMI_gt_CM_CoopAI_AIManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AIManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AIManager, 0.4375, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AttackWaveSetup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AttackWaveSetup_Func (bool testConds, bool runActions) {
    int auto5BD83473_ae;
    int auto5BD83473_ai;

    // Variable Declarations
    int lv_setupNextAttackWave;
    int lv_count;
    string lv_unitType;
    int lv_emptyWaveIndex;
    int lv_attackWaveIndex;
    wave lv_wave;
    int lv_startingTechStockIter;
    string lv_startingTechStockUnit;
    fixed lv_resourcesInWave;
    unit lv_resourceUnit;
    int lv_player;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_count = 1;
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_wave = EventPlayerWave();
    if ((lv_wave == null)) {
        return true;
    }

    lv_unitGroup = AIWaveGetUnits(EventPlayerWave());
    if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_player = UnitGetOwner(UnitGroupUnit(lv_unitGroup, 1));
    if ((PlayerGroupHasPlayer(libCOMI_gv_cM_CoopAI_Players, lv_player) == false)) {
        return true;
    }

    auto5BD83473_ae = libCOMI_gv_cMC_CoopAI_MaxWaveCount;
    auto5BD83473_ai = 1;
    lv_emptyWaveIndex = 0;
    for ( ; ( (auto5BD83473_ai >= 0 && lv_emptyWaveIndex <= auto5BD83473_ae) || (auto5BD83473_ai <= 0 && lv_emptyWaveIndex >= auto5BD83473_ae) ) ; lv_emptyWaveIndex += auto5BD83473_ai ) {
        if ((libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_player][lv_emptyWaveIndex] == null)) {
            if ((lv_emptyWaveIndex > libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark)) {
                libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark = lv_emptyWaveIndex;
            }

            libCOMI_gv_cM_CoopAI_WaveShowPing[lv_player][lv_emptyWaveIndex] = true;
            libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_player][lv_emptyWaveIndex] = EventPlayerWave();
            if ((libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count[lv_player] == 1)) {
                libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat[lv_player][lv_emptyWaveIndex] = 0;
            }
            else {
                libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat[lv_player][lv_emptyWaveIndex] = UserDataGetInt("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lv_player], "baseRetreatThreshold", 1);
            }
            break;
        }

    }
    libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count[lv_player] += 1;
    TriggerEnable(libCOMI_gt_CM_CoopAI_AttackWavePingManager, true);
    if ((libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection == false)) {
        UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAI_AIDetection_AttackWave, lv_unitGroup);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AttackWaveSetup_Init () {
    libCOMI_gt_CM_CoopAI_AttackWaveSetup = TriggerCreate("libCOMI_gt_CM_CoopAI_AttackWaveSetup_Func");
    TriggerAddEventPlayerAIWave(libCOMI_gt_CM_CoopAI_AttackWaveSetup, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AIDetectionManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AIDetectionManager_Func (bool testConds, bool runActions) {
    int auto6C9E8A6C_ae;
    int auto6C9E8A6C_ai;
    int auto7524CC91_ae;
    int auto7524CC91_ai;
    int auto7A411C1C_ae;
    int auto7A411C1C_ai;

    // Variable Declarations
    point[7] lv_cloakedAttackerLocation;
    point lv_cloakedAttacker_Current;
    int lv_cloakedAttackerIter;
    bool lv_aIHasSeenCloakedUnit;
    bool lv_newCloakedAttacker;
    unit lv_bestDetector;
    unit lv_nearbyDetector;
    unitgroup lv_nearbyDetectors;
    string[6] lv_detectors;
    int lv_detectorsIter;
    unit lv_lastAttacker;
    int lv_playerWavesIter;
    int lv_playerIter;

    // Variable Initialization
    lv_nearbyDetectors = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_detectors[1] = "Raven";
    lv_detectors[2] = "ScienceVessel";
    lv_detectors[3] = "Observer";
    lv_detectors[4] = "Oracle";
    lv_detectors[5] = "Overseer";
    PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupEnemy, 1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_aIHasSeenCloakedUnit = AISawCloakedUnit(PlayerGroupLoopCurrent());
        lv_cloakedAttacker_Current = AIGetCloakedAttacker(PlayerGroupLoopCurrent());
        if (((lv_aIHasSeenCloakedUnit == true) || (lv_cloakedAttacker_Current != null) || (libCOMI_gf_AISuspectDetectionDanger(PlayerGroupLoopCurrent()) == true))) {
            libCOMI_gv_cM_CoopAI_AIDetection_Build = true;
            libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection = true;
        }

        if ((lv_cloakedAttacker_Current != null)) {
            lv_newCloakedAttacker = true;
            IntLoopBegin(1, lv_cloakedAttackerIter);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((DistanceBetweenPoints(lv_cloakedAttacker_Current, lv_cloakedAttackerLocation[IntLoopCurrent()]) < 5.0)) {
                    lv_newCloakedAttacker = false;
                    break;
                }

            }
            IntLoopEnd();
            if ((lv_newCloakedAttacker == true)) {
                lv_cloakedAttackerIter += 1;
                lv_cloakedAttackerLocation[lv_cloakedAttackerIter] = lv_cloakedAttacker_Current;
            }

            lv_cloakedAttacker_Current = null;
        }

    }
    PlayerGroupLoopEnd();
    IntLoopBegin(1, lv_cloakedAttackerIter);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        PlayerGroupLoopBegin(libCOMI_gv_cM_CoopAI_Players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            auto6C9E8A6C_ae = 5;
            auto6C9E8A6C_ai = 1;
            lv_detectorsIter = 1;
            for ( ; ( (auto6C9E8A6C_ai >= 0 && lv_detectorsIter <= auto6C9E8A6C_ae) || (auto6C9E8A6C_ai <= 0 && lv_detectorsIter >= auto6C9E8A6C_ae) ) ; lv_detectorsIter += auto6C9E8A6C_ai ) {
                lv_nearbyDetector = AIGrabUnit(PlayerGroupLoopCurrent(), (lv_detectors[lv_detectorsIter]), c_prioStaticBully, lv_cloakedAttackerLocation[IntLoopCurrent()]);
                UnitGroupAdd(lv_nearbyDetectors, lv_nearbyDetector);
            }
        }
        PlayerGroupLoopEnd();
        lv_bestDetector = UnitGroupClosestToPoint(lv_nearbyDetectors, lv_cloakedAttackerLocation[IntLoopCurrent()]);
        if ((lv_bestDetector != null)) {
            libNtve_gf_AICast(lv_bestDetector, OrderTargetingPoint(AbilityCommand("attack", 0), lv_cloakedAttackerLocation[IntLoopCurrent()]));
            PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupEnemy, 1));
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                AIClearCloakedAttacker(PlayerGroupLoopCurrent(), lv_cloakedAttackerLocation[IntLoopCurrent()]);
            }
            PlayerGroupLoopEnd();
        }

        lv_nearbyDetectors = UnitGroupEmpty();
    }
    IntLoopEnd();
    if ((libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection == false)) {
        auto7524CC91_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
        auto7524CC91_ai = 1;
        lv_playerIter = 3;
        for ( ; ( (auto7524CC91_ai >= 0 && lv_playerIter <= auto7524CC91_ae) || (auto7524CC91_ai <= 0 && lv_playerIter >= auto7524CC91_ae) ) ; lv_playerIter += auto7524CC91_ai ) {
            auto7A411C1C_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
            auto7A411C1C_ai = 1;
            lv_playerWavesIter = 0;
            for ( ; ( (auto7A411C1C_ai >= 0 && lv_playerWavesIter <= auto7A411C1C_ae) || (auto7A411C1C_ai <= 0 && lv_playerWavesIter >= auto7A411C1C_ae) ) ; lv_playerWavesIter += auto7A411C1C_ai ) {
                UnitGroupLoopBegin(AIWaveGetUnits(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_playerIter][lv_playerWavesIter]));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_lastAttacker = AILastAttacker(UnitGroupLoopCurrent());
                    if ((lv_lastAttacker != null) && (UnitFilterMatch(lv_lastAttacker, UnitGetOwner(UnitGroupLoopCurrent()), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                        libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection = true;
                        break;
                    }

                }
                UnitGroupLoopEnd();
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AIDetectionManager_Init () {
    libCOMI_gt_CM_CoopAI_AIDetectionManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AIDetectionManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIDetectionManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AIDetectionManager, 2.8, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AttackWavePingManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AttackWavePingManager_Func (bool testConds, bool runActions) {
    int autoFAE2A104_ae;
    int autoFAE2A104_ai;
    playergroup autoB34DF2A3_g;
    int autoB34DF2A3_p;
    int autoDC457FFC_ae;
    int autoDC457FFC_ai;
    unitgroup auto8125420D_g;
    int auto8125420D_u;
    int autoC3A72AF9_ae;
    int autoC3A72AF9_ai;
    int auto57362279_ae;
    int auto57362279_ai;
    unitgroup auto04F62776_g;
    int auto04F62776_u;

    // Variable Declarations
    int lv_pingGroupIter;
    int lv_attackWavePlayerIterPrimary;
    int lv_attackWavePingIterPrimary;
    unit lv_pingableUnitIter;
    bool lv_addedUnitToGroup;
    bool lv_foundWorthyUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFAE2A104_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    autoFAE2A104_ai = 1;
    lv_pingGroupIter = 0;
    for ( ; ( (autoFAE2A104_ai >= 0 && lv_pingGroupIter <= autoFAE2A104_ae) || (autoFAE2A104_ai <= 0 && lv_pingGroupIter >= autoFAE2A104_ae) ) ; lv_pingGroupIter += autoFAE2A104_ai ) {
        UnitGroupClear(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]);
    }
    autoB34DF2A3_g = libCOMI_gv_cM_CoopAI_Players; 
    autoB34DF2A3_p = 1;
    for ( ; autoB34DF2A3_p <= PlayerGroupCount(autoB34DF2A3_g) ; autoB34DF2A3_p += BoolToInt(lv_attackWavePlayerIterPrimary == PlayerGroupPlayer(autoB34DF2A3_g, autoB34DF2A3_p)) ) {
        lv_attackWavePlayerIterPrimary = PlayerGroupPlayer(autoB34DF2A3_g, autoB34DF2A3_p);
        if ((PlayerGroupHasPlayer(libCOMI_gv_cM_CoopAI_DontPingPlayers, lv_attackWavePlayerIterPrimary) == true)) {
            continue;
        }

        autoDC457FFC_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
        autoDC457FFC_ai = 1;
        lv_attackWavePingIterPrimary = 0;
        for ( ; ( (autoDC457FFC_ai >= 0 && lv_attackWavePingIterPrimary <= autoDC457FFC_ae) || (autoDC457FFC_ai <= 0 && lv_attackWavePingIterPrimary >= autoDC457FFC_ae) ) ; lv_attackWavePingIterPrimary += autoDC457FFC_ai ) {
            if ((libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] == false) && (libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] != null) && (AIWaveGetUnits(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary]) != null)) {
                auto8125420D_g = AIWaveGetUnits(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary]);
                auto8125420D_u = 1;
                for ( ; auto8125420D_u <= UnitGroupCount(auto8125420D_g, c_unitCountAll) ; auto8125420D_u += BoolToInt(lv_pingableUnitIter == UnitGroupUnit(auto8125420D_g, auto8125420D_u)) ) {
                    lv_pingableUnitIter = UnitGroupUnit(auto8125420D_g, auto8125420D_u);
                    lv_addedUnitToGroup = false;
                    autoC3A72AF9_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
                    autoC3A72AF9_ai = 1;
                    lv_pingGroupIter = 0;
                    for ( ; ( (autoC3A72AF9_ai >= 0 && lv_pingGroupIter <= autoC3A72AF9_ae) || (autoC3A72AF9_ai <= 0 && lv_pingGroupIter >= autoC3A72AF9_ae) ) ; lv_pingGroupIter += autoC3A72AF9_ai ) {
                        if (((UnitGroupCount(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], c_unitCountAlive) == 0) || ((UnitGroupCount(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]), UnitGetPosition(lv_pingableUnitIter)) <= libCOMI_gv_cM_CoopAI_PingCombineDist)))) {
                            UnitGroupAdd(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], lv_pingableUnitIter);
                            lv_addedUnitToGroup = true;
                            break;
                        }

                    }
                    if ((lv_addedUnitToGroup == false)) {
                        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_B90F2179"), true);
                    }

                }
            }

        }
    }
    auto57362279_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    auto57362279_ai = 1;
    lv_pingGroupIter = 0;
    for ( ; ( (auto57362279_ai >= 0 && lv_pingGroupIter <= auto57362279_ae) || (auto57362279_ai <= 0 && lv_pingGroupIter >= auto57362279_ae) ) ; lv_pingGroupIter += auto57362279_ai ) {
        lv_foundWorthyUnit = false;
        auto04F62776_g = libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter];
        auto04F62776_u = 1;
        for ( ; auto04F62776_u <= UnitGroupCount(auto04F62776_g, c_unitCountAll) ; auto04F62776_u += BoolToInt(lv_pingableUnitIter == UnitGroupUnit(auto04F62776_g, auto04F62776_u)) ) {
            lv_pingableUnitIter = UnitGroupUnit(auto04F62776_g, auto04F62776_u);
            if ((libCOMI_gf_CM_CoopAI_PingWorthyUnit(lv_pingableUnitIter) == true)) {
                lv_foundWorthyUnit = true;
                break;
            }

        }
        if ((lv_foundWorthyUnit == true)) {
            if ((libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), PlayerStartLocation(UnitGetOwner(UnitGroupUnit(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], 1))), 270.0, "PingDiamond", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] = PingLastCreated();
                PingSetTooltip(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], StringExternal("Param/Value/lib_COMI_488AE332"));
                PingSetScale(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], 0.3);
            }

            PingSetPosition(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], UnitGroupCenterOfGroup(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]));
        }
        else {
            PingDestroy(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter]);
            libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] = c_invalidPingId;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AttackWavePingManager_Init () {
    libCOMI_gt_CM_CoopAI_AttackWavePingManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AttackWavePingManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AttackWavePingManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AttackWavePingManager, 0.5625, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_InitAIDebugging
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_InitAIDebugging_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(3, "CoopAIDebug.txt");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_InitAIDebugging_Init () {
    libCOMI_gt_CM_CoopAI_InitAIDebugging = TriggerCreate("libCOMI_gt_CM_CoopAI_InitAIDebugging_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle AI Debug Messages
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ToggleAIDebugMessages_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_showAIDebugging == true)) {
        libCOMI_gv_showAIDebugging = false;
    }
    else {
        libCOMI_gv_showAIDebugging = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ToggleAIDebugMessages_Init () {
    libCOMI_gt_ToggleAIDebugMessages = TriggerCreate("libCOMI_gt_ToggleAIDebugMessages_Func");
    TriggerAddEventChatMessage(libCOMI_gt_ToggleAIDebugMessages, c_playerAny, "togaidebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conjoined Vital Regen On/Off
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ConjoinedVitalRegenOnOff_Func (bool testConds, bool runActions) {
    unitgroup auto2A64ECBF_g;
    int auto2A64ECBF_u;

    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    unit lv_itUnit;
    unitgroup lv_group;
    unitgroup lv_groupA;
    unitgroup lv_groupB;
    unitgroup lv_groupC;
    int lv_stack;
    unit lv_caster;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();
    lv_group = UnitGroupEmpty();
    lv_groupA = UnitConjoinedGroup(lv_unit, "GreaterNydusWormConjoined");
    lv_groupB = UnitConjoinedGroup(lv_unit, "NydusNetworkConjoined");
    lv_groupC = UnitConjoinedGroup(lv_unit, "NydusWormConjoined");
    lv_stack = UnitBehaviorCount(lv_unit, lv_behavior);
    lv_caster = UnitBehaviorEffectUnit(lv_unit, lv_behavior, c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_group, lv_groupA);
    UnitGroupAddUnitGroup(lv_group, lv_groupB);
    UnitGroupAddUnitGroup(lv_group, lv_groupC);
    UnitGroupRemove(lv_group, lv_unit);
    auto2A64ECBF_g = lv_group;
    auto2A64ECBF_u = 1;
    for ( ; auto2A64ECBF_u <= UnitGroupCount(auto2A64ECBF_g, c_unitCountAll) ; auto2A64ECBF_u += BoolToInt(lv_itUnit == UnitGroupUnit(auto2A64ECBF_g, auto2A64ECBF_u)) ) {
        lv_itUnit = UnitGroupUnit(auto2A64ECBF_g, auto2A64ECBF_u);
        libNtve_gf_SetBehaviorCount(lv_itUnit, lv_behavior, lv_caster, lv_stack);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ConjoinedVitalRegenOnOff_Init () {
    libCOMI_gt_ConjoinedVitalRegenOnOff = TriggerCreate("libCOMI_gt_ConjoinedVitalRegenOnOff_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_ConjoinedVitalRegenOnOff, null, c_unitBehaviorFlagUser13, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_ConjoinedVitalRegenOnOff, null, c_unitBehaviorFlagUser13, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Anim Speed On
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ChronoAnimSpeedOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buff;
    unit lv_unit;
    fixed lv_scale;

    // Variable Initialization
    lv_buff = EventUnitBehavior();
    lv_unit = EventUnit();
    lv_scale = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_buff, "Modification.RateMultiplierArray[" + IntToString(0) + "]", UnitBehaviorEffectPlayer(lv_unit, lv_buff, c_effectPlayerCaster, 0)));

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimSetTimeScaleGlobal " + FixedToString(lv_scale, c_fixedPrecisionAny) + " " + (lv_buff))));
    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimSetTimeScaleGlobal " + FixedToString(lv_scale, c_fixedPrecisionAny) + " " + (lv_buff))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ChronoAnimSpeedOn_Init () {
    libCOMI_gt_ChronoAnimSpeedOn = TriggerCreate("libCOMI_gt_ChronoAnimSpeedOn_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOn, null, "SOAMapWideChronoPassiveTarget", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOn, null, "SOAMapWideChrono", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOn, null, "TimeWarpProduction", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Anim Speed Off
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ChronoAnimSpeedOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buff;
    unit lv_unit;

    // Variable Initialization
    lv_buff = EventUnitBehavior();
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimClearTimeScaleGlobal " + (lv_buff))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ChronoAnimSpeedOff_Init () {
    libCOMI_gt_ChronoAnimSpeedOff = TriggerCreate("libCOMI_gt_ChronoAnimSpeedOff_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOff, null, "SOAMapWideChronoPassiveTarget", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOff, null, "SOAMapWideChrono", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOff, null, "TimeWarpProduction", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Same Place Revive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SamePlaceRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;
    point lv_beaconPoint;
    unit lv_hero;
    fixed lv_facing;
    point lv_rally;

    // Variable Initialization
    lv_beacon = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_beaconPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_facing = UnitGetFacing(lv_beacon);
    lv_rally = UnitRallyPointTargetPoint(lv_beacon, 1, 1);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    Wait(0.125, c_timeGame);
    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    if ((lv_rally != null)) {
        UnitIssueOrder(lv_hero, OrderTargetingPoint(AbilityCommand("attack", 0), lv_rally), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SamePlaceRevive_Init () {
    libCOMI_gt_SamePlaceRevive = TriggerCreate("libCOMI_gt_SamePlaceRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SamePlaceRevive, c_playerAny, "PortToMyCenter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MU_CandyBowlMassBuy
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MU_CandyBowlMassBuy_Func (bool testConds, bool runActions) {
    int autoD4B71CE1_ae;
    int autoD4B71CE1_ai;

    // Variable Declarations
    order lv_order;
    int lv_p;
    unit lv_u;
    int lv_i;
    fixed lv_charge;

    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_p = OrderGetPlayer(lv_order);
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((OrderGetFlag(lv_order, c_cmdQueued) == true)) {
        lv_order = Order(OrderGetAbilityCommand(lv_order));
        OrderSetPlayer(lv_order,lv_p);
        TriggerEnable(TriggerGetCurrent(), false);
        autoD4B71CE1_ae = 9;
        autoD4B71CE1_ai = 1;
        lv_i = 1;
        for ( ; ( (autoD4B71CE1_ai >= 0 && lv_i <= autoD4B71CE1_ae) || (autoD4B71CE1_ai <= 0 && lv_i >= autoD4B71CE1_ae) ) ; lv_i += autoD4B71CE1_ai ) {
            if ((UnitOrderIsValid(lv_u, lv_order) == true)) {
                UnitIssueOrder(lv_u, lv_order, c_orderQueueAddToEnd);
            }
            else {
                break;
            }
        }
        ActorCreate(ActorScopeFromUnit(lv_u), "CandyBowlCandyX", null, null, null);
        ActorSend(libNtve_gf_ActorLastCreated(), (("SetText " + ("+" + IntToString(lv_i)))));
        TriggerEnable(TriggerGetCurrent(), true);
        Wait(0.0, c_timeGame);
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Signal CandyCountHide");
    }

    Wait(0.0625, c_timeGame);
    lv_charge = UnitAbilityChargeInfo(lv_u, libCOMI_gv_candyChargeCmd, c_unitAbilChargeCountLeft);
    if ((lv_charge == 0.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply A");
    }
    else if ((lv_charge < 25.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply B");
    }
    else if ((lv_charge < 50.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply C");
    }
    else if ((lv_charge == 50.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply D");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MU_CandyBowlMassBuy_Init () {
    libCOMI_gt_MU_CandyBowlMassBuy = TriggerCreate("libCOMI_gt_MU_CandyBowlMassBuy_Func");
    TriggerAddEventUnitOrder(libCOMI_gt_MU_CandyBowlMassBuy, null, libCOMI_gv_candyChargeCmd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_InstantRevive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_InstantRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(lv_p, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lv_p)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_InstantRevive_Init () {
    libCOMI_gt_CM_InstantRevive = TriggerCreate("libCOMI_gt_CM_InstantRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_InstantRevive, c_playerAny, "HeroInstantRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Train
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SupplicantWarpTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_actualCreator;
    unit lv_warpGate;
    point lv_p;
    order lv_order1;
    order lv_order2;
    int lv_player;

    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpGate = EventUnit();
    lv_p = UnitGetPosition(lv_u);
    lv_order1 = OrderTargetingPoint(libCOMI_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, -0.5, 0.0));
    lv_order2 = OrderTargetingPoint(libCOMI_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, 0.5, 0.0));
    lv_player = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_u) == libCOMI_gv_supplicantWarpTrainDummyUnitLink))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, libCOMI_gv_supplicantWarpTrainCreatorUnitLink, c_unitCreateIgnorePlacement, lv_player, lv_p, 270.0);
    lv_actualCreator = UnitLastCreated();
    if ((UnitOrderIsValid(lv_actualCreator, lv_order1) == false) && (UnitOrderIsValid(lv_actualCreator, lv_order2) == false)) {
        UnitAbilityAddChargeUsed(lv_warpGate, libCOMI_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_actualCreator);
        return true;
    }

    UnitIssueOrder(lv_actualCreator, lv_order1, c_orderQueueAddToFront);
    UnitIssueOrder(lv_actualCreator, lv_order2, c_orderQueueAddToFront);
    UnitBehaviorAdd(lv_actualCreator, libCOMI_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, lv_warpGate, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SupplicantWarpTrain_Init () {
    libCOMI_gt_SupplicantWarpTrain = TriggerCreate("libCOMI_gt_SupplicantWarpTrain_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_SupplicantWarpTrain, null, libCOMI_gv_warpGateTrainAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Actual Train
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SupplicantActualTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_warpSource;

    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpSource = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, libCOMI_gv_supplicantWarpTrainWarpPowerCheckBehaviorLink, lv_warpSource, 1);
    UnitBehaviorAdd(lv_u, libCOMI_gv_supplicantWarpTrainCreatorFinderBehaviorLink, lv_warpSource, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SupplicantActualTrain_Init () {
    libCOMI_gt_SupplicantActualTrain = TriggerCreate("libCOMI_gt_SupplicantActualTrain_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_SupplicantActualTrain, null, libCOMI_gv_supplicantWarpTrainActualAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Finish
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SupplicantWarpFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;

    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_supplicant, libCOMI_gv_supplicantWarpTrainCreatorFinderBehaviorLink) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_creator = UnitBehaviorEffectUnit(lv_supplicant, libCOMI_gv_supplicantWarpTrainCreatorFinderBehaviorLink, c_effectUnitCaster, 0);
    UnitBehaviorRemove(lv_supplicant, libCOMI_gv_supplicantWarpTrainCreatorFinderBehaviorLink, 1);
    UnitRemove(lv_creator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SupplicantWarpFinish_Init () {
    libCOMI_gt_SupplicantWarpFinish = TriggerCreate("libCOMI_gt_SupplicantWarpFinish_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SupplicantWarpFinish, c_playerAny, libCOMI_gv_supplicantWarpTrainActualUnitBirthEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Cancel
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SupplicantWarpCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;
    unit lv_warpGate;

    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_creator = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_creator, libCOMI_gv_supplicantWarpTrainWarpRefundBehaviorLink) > 0)) {
        lv_warpGate = UnitBehaviorEffectUnit(lv_creator, libCOMI_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, c_effectUnitCaster, 0);
        UnitAbilityAddChargeUsed(lv_warpGate, libCOMI_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_creator);
    }
    else {
        UnitBehaviorAdd(lv_creator, libCOMI_gv_supplicantWarpTrainWarpRefundBehaviorLink, lv_supplicant, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SupplicantWarpCancel_Init () {
    libCOMI_gt_SupplicantWarpCancel = TriggerCreate("libCOMI_gt_SupplicantWarpCancel_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SupplicantWarpCancel, c_playerAny, libCOMI_gv_supplicantWarpTrainActualUnitCancelEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov - Snare Behavior Off
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_StukovSnareBehaviorOn2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_defaultHeight;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_defaultHeight = UnitTypeGetProperty(UnitGetType(lv_unit), c_unitPropHeight);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_unit, lv_defaultHeight, libCOMI_gv_StukovInfestedWraithSnareBehavior3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_StukovSnareBehaviorOn2_Init () {
    libCOMI_gt_StukovSnareBehaviorOn2 = TriggerCreate("libCOMI_gt_StukovSnareBehaviorOn2_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_StukovSnareBehaviorOn2, null, libCOMI_gv_StukovInfestedWraithSnareBehavior, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CargoDeath
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CargoDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cargoUnit;

    // Variable Initialization
    lv_cargoUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_cargoUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(lv_cargoUnit, false);
    UnitSetPropertyFixed(lv_cargoUnit, c_unitPropShields, 0.0);
    UnitCreateEffectUnit(lv_cargoUnit, libCOMI_gv_cM_CargoDeathKillEffect, lv_cargoUnit);
    if ((UnitIsValid(lv_cargoUnit) == true)) {
        libNtve_gf_ShowHideUnit(lv_cargoUnit, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CargoDeath_Init () {
    libCOMI_gt_CM_CargoDeath = TriggerCreate("libCOMI_gt_CM_CargoDeath_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_CargoDeath, c_playerAny, libCOMI_gv_cM_CargoDeathNotifyEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roach Drop Scale
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_RoachDropScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scaleModifier;
    fixed lv_upgradeCount;
    fixed lv_newScale;

    // Variable Initialization
    lv_scaleModifier = 0.02;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_upgradeCount = TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly);
    lv_newScale = (1+(lv_upgradeCount*lv_scaleModifier));
    TextExpressionSetToken("Param/Expression/lib_COMI_39D2BF93", "A", FixedToText(lv_newScale, c_fixedPrecisionAny));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_COMI_39D2BF93"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_RoachDropScale_Init () {
    libCOMI_gt_RoachDropScale = TriggerCreate("libCOMI_gt_RoachDropScale_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_RoachDropScale, null, "ZagaraVoidCoopInfestedPodsTimedLife", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryVorazunDarkPylonRadius
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MasteryVorazunDarkPylonRadius_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_level;
    fixed lv_scale;
    unit lv_u;
    string lv_link;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_level = TechTreeUpgradeCount(lv_p, libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusUpgradeLink, c_techCountCompleteOnly);
    lv_scale = ((lv_level * 0.02) + 1.0);
    lv_u = EventUnit();
    lv_link = (libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusPowerSourceBaseString + IntToString(lv_level));

    // Conditions
    if (testConds) {
        if (!((lv_level > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSendTo(libNtve_gf_MainActorofUnit(lv_u), libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusActorLink, ("SetScale 0.45"));
    ActorSendTo(libNtve_gf_MainActorofUnit(lv_u), libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusActorLink, (("SetScale " + FixedToString(lv_scale, 2) + " 1")));
    UnitBehaviorRemove(lv_u, libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusPowerSourceNoMasteryLink, c_unitBehaviorCountAll);
    UnitBehaviorAdd(lv_u, (lv_link), lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MasteryVorazunDarkPylonRadius_Init () {
    libCOMI_gt_CM_MasteryVorazunDarkPylonRadius = TriggerCreate("libCOMI_gt_CM_MasteryVorazunDarkPylonRadius_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_MasteryVorazunDarkPylonRadius, null, "DarkPylonCloakAura", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementRaynorBansheesUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementRaynorBansheesUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderRaynorTheThunderCombine", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementRaynorBansheesUsed_Init () {
    libCOMI_gt_CM_AchievementRaynorBansheesUsed = TriggerCreate("libCOMI_gt_CM_AchievementRaynorBansheesUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementRaynorBansheesUsed, null, AbilityCommand("BansheeAirstrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementSwannCombatDropUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementSwannCombatDropUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderSwannCombatReady", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementSwannCombatDropUsed_Init () {
    libCOMI_gt_CM_AchievementSwannCombatDropUsed = TriggerCreate("libCOMI_gt_CM_AchievementSwannCombatDropUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementSwannCombatDropUsed, null, AbilityCommand("SpecialDelivery", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementVorazunBlackHoleUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementVorazunBlackHoleUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderVorazun1Shot15Kills", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementVorazunBlackHoleUsed_Init () {
    libCOMI_gt_CM_AchievementVorazunBlackHoleUsed = TriggerCreate("libCOMI_gt_CM_AchievementVorazunBlackHoleUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementVorazunBlackHoleUsed, null, AbilityCommand("VoidSentryBlackHole", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementArtanisSolarBombardmentUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderArtanisArtanisWMD", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed_Init () {
    libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed = TriggerCreate("libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed, null, AbilityCommand("SOAStrafeAttack", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementKaraxSolarLanceUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementKaraxSolarLanceUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderKaraxPurifierBeam", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementKaraxSolarLanceUsed_Init () {
    libCOMI_gt_CM_AchievementKaraxSolarLanceUsed = TriggerCreate("libCOMI_gt_CM_AchievementKaraxSolarLanceUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementKaraxSolarLanceUsed, null, AbilityCommand("SOAPurifierBeam", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementFenixChampionAllExist
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementFenixChampionAllExist_Func (bool testConds, bool runActions) {
    int autoE1C4C2D7_ae;
    int autoE1C4C2D7_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    autoE1C4C2D7_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
    autoE1C4C2D7_ai = 1;
    lv_i = 1;
    for ( ; ( (autoE1C4C2D7_ai >= 0 && lv_i <= autoE1C4C2D7_ae) || (autoE1C4C2D7_ai <= 0 && lv_i >= autoE1C4C2D7_ae) ) ; lv_i += autoE1C4C2D7_ai ) {
        if ((UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionUnit[lv_i]) == false)) {
            return true;
        }

    }
    AchievementAward(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), "CommanderFenixAllChampions");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementFenixChampionAllExist_Init () {
    libCOMI_gt_CM_AchievementFenixChampionAllExist = TriggerCreate("libCOMI_gt_CM_AchievementFenixChampionAllExist_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_AchievementFenixChampionAllExist, c_playerAny, "FenixChampionSwapImpactUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Build
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CreepTumorBuild_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CreepTumorExhausted", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CreepTumorBuild_Init () {
    libCOMI_gt_CreepTumorBuild = TriggerCreate("libCOMI_gt_CreepTumorBuild_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CreepTumorBuild, null, AbilityCommand("CreepTumorBuild", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugVictoryS
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugVictoryS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_cineTrigger;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libCOMI_gf_HideCampaignTransmissionPortrait();
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libCOMI_gv_cM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    lv_cineTrigger = TriggerCreate("gt_VictorySequence_Func");
    TriggerExecute(lv_cineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugVictoryS_Init () {
    libCOMI_gt_CM_DebugVictoryS = TriggerCreate("libCOMI_gt_CM_DebugVictoryS_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugVictoryS, c_playerAny, "VICTORYS", true);
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugVictoryS, c_playerAny, "VICTORYSEQUENCE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugGiveOfflineControl
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugGiveOfflineControl_Func (bool testConds, bool runActions) {
    playergroup auto253A2D71_g;
    int auto253A2D71_p;
    playergroup autoA54BC7AF_g;
    int autoA54BC7AF_p;

    // Variable Declarations
    int lv_indexPlayerOuter;
    int lv_indexPlayerInner;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto253A2D71_g = PlayerGroupAll(); 
    auto253A2D71_p = 1;
    for ( ; auto253A2D71_p <= PlayerGroupCount(auto253A2D71_g) ; auto253A2D71_p += BoolToInt(lv_indexPlayerOuter == PlayerGroupPlayer(auto253A2D71_g, auto253A2D71_p)) ) {
        lv_indexPlayerOuter = PlayerGroupPlayer(auto253A2D71_g, auto253A2D71_p);
        if ((PlayerType(lv_indexPlayerOuter) == c_playerTypeUser)) {
            autoA54BC7AF_g = PlayerGroupAll(); 
            autoA54BC7AF_p = 1;
            for ( ; autoA54BC7AF_p <= PlayerGroupCount(autoA54BC7AF_g) ; autoA54BC7AF_p += BoolToInt(lv_indexPlayerInner == PlayerGroupPlayer(autoA54BC7AF_g, autoA54BC7AF_p)) ) {
                lv_indexPlayerInner = PlayerGroupPlayer(autoA54BC7AF_g, autoA54BC7AF_p);
                if ((PlayerType(lv_indexPlayerInner) == c_playerTypeNone) && (libNtve_gf_PlayerIsEnemy(lv_indexPlayerInner, lv_indexPlayerOuter, libNtve_ge_PlayerRelation_Ally) == true)) {
                    libNtve_gf_SetAlliance(lv_indexPlayerOuter, lv_indexPlayerInner, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugGiveOfflineControl_Init () {
    libCOMI_gt_CM_DebugGiveOfflineControl = TriggerCreate("libCOMI_gt_CM_DebugGiveOfflineControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MindControlSupplyOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MindControlSupplyOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_u;

    // Variable Initialization
    lv_supply = 6.0;
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(lv_u, "HybridUnitDummy") == true))) {
    }
    else {
        lv_supply = UnitTypeGetProperty(UnitGetType(lv_u), c_unitPropSuppliesUsed);
    }
    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperAdd, lv_supply);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MindControlSupplyOn_Init () {
    libCOMI_gt_MindControlSupplyOn = TriggerCreate("libCOMI_gt_MindControlSupplyOn_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_MindControlSupplyOn, null, "DarkArchonMindControl", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MindControlSupplyOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MindControlSupplyOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_u;

    // Variable Initialization
    lv_supply = 6.0;
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(lv_u, "HybridUnitDummy") == true))) {
    }
    else {
        lv_supply = UnitTypeGetProperty(UnitGetType(lv_u), c_unitPropSuppliesUsed);
    }
    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperSubtract, lv_supply);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MindControlSupplyOff_Init () {
    libCOMI_gt_MindControlSupplyOff = TriggerCreate("libCOMI_gt_MindControlSupplyOff_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_MindControlSupplyOff, null, "DarkArchonMindControl", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_TriggersInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassDrop, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassRefund, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassScaler, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassTrain, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassPickup, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassManualUpdate, true);
    TriggerEnable(libCOMI_gt_CM_DebugAbathurBiomassLost, true);
    if ((TechTreeUpgradeCount(libCOOC_gf_CC_CommanderPlayer("ZergAbathur"), "AbathurEnemyDeathCreateLocusts", c_techCountQueuedOrBetter) > 0)) {
        TriggerEnable(libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_TriggersInit_Init () {
    libCOMI_gt_CM_Abathur_TriggersInit = TriggerCreate("libCOMI_gt_CM_Abathur_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassDrop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassDrop_Func (bool testConds, bool runActions) {
    playergroup auto2D811EA1_g;
    int auto2D811EA1_p;

    // Variable Declarations
    int lv_biomassUnitCount;
    int lv_indexPlayer;
    int lv_biomassBaseAmount;
    int lv_biomassCasualMultiplier;
    int lv_biomassNormalMultiplier;
    fixed lv_biomassHardMultiplier;
    int lv_biomassBrutalMultiplier;
    int lv_biomassToxicNestMultiplier;
    int lv_dyingUnitSupply;

    // Variable Initialization
    lv_biomassCasualMultiplier = 2;
    lv_biomassNormalMultiplier = 2;
    lv_biomassHardMultiplier = 1.5;
    lv_biomassBrutalMultiplier = 1;
    lv_biomassToxicNestMultiplier = 2;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMU_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }

        if (!(((libNtve_gf_KillingPlayer() == 1) || (libNtve_gf_KillingPlayer() == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2D811EA1_g = libCOOC_gf_HumanPlayers(); 
    auto2D811EA1_p = 1;
    for ( ; auto2D811EA1_p <= PlayerGroupCount(auto2D811EA1_g) ; auto2D811EA1_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto2D811EA1_g, auto2D811EA1_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto2D811EA1_g, auto2D811EA1_p);
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "ZergAbathur")) {
            lv_dyingUnitSupply = FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)));
            if (((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true) || (UnitHasBehavior2(EventUnit(), "CritterExplode") == true))) {
                lv_biomassBaseAmount = 1;
            }
            else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
                lv_biomassBaseAmount = 12;
            }
            else if ((lv_dyingUnitSupply == -1)) {
                lv_biomassBaseAmount = 2;
            }
            else if ((lv_dyingUnitSupply == -2)) {
                lv_biomassBaseAmount = 4;
            }
            else if ((lv_dyingUnitSupply == -3)) {
                lv_biomassBaseAmount = 6;
            }
            else if ((lv_dyingUnitSupply == -4)) {
                lv_biomassBaseAmount = 8;
            }
            else if ((lv_dyingUnitSupply < -4)) {
                lv_biomassBaseAmount = 12;
            }
            if ((TechTreeUpgradeCount(lv_indexPlayer, "AbathurToxicNestIcreasedBiomass", c_techCountCompleteOnly) == 1) && (UnitHasBehavior2(EventUnit(), "ToxicNestVirulentNest") == true)) {
                lv_biomassUnitCount = (libNtve_gf_DifficultyValueInt((lv_biomassBaseAmount * lv_biomassCasualMultiplier), (lv_biomassBaseAmount * lv_biomassNormalMultiplier), FixedToInt(Ceiling((lv_biomassBaseAmount * lv_biomassHardMultiplier))), (lv_biomassBaseAmount * lv_biomassBrutalMultiplier)) * lv_biomassToxicNestMultiplier);
            }
            else {
                lv_biomassUnitCount = libNtve_gf_DifficultyValueInt((lv_biomassBaseAmount * lv_biomassCasualMultiplier), (lv_biomassBaseAmount * lv_biomassNormalMultiplier), FixedToInt(Ceiling((lv_biomassBaseAmount * lv_biomassHardMultiplier))), (lv_biomassBaseAmount * lv_biomassBrutalMultiplier));
            }
            if ((lv_biomassUnitCount > 0)) {
                libCOMI_gv_cM_DebugAbathurBiomassDroppedNormal += lv_biomassUnitCount;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "BiomassPickup", c_unitCreateIgnorePlacement, libCOOC_gf_CC_CommanderPlayer("ZergAbathur"), UnitGetPosition(EventUnit()));
                libCOMI_gf_CM_Abathur_BiomassSetStack(UnitLastCreated(), lv_biomassUnitCount);
                UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
                libCOMI_gf_CM_Abathur_BiomassScale(UnitLastCreated(), true);
                libCOMI_gf_CM_Abathur_BiomassMerge(UnitLastCreated(), lv_biomassUnitCount);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassDrop_Init () {
    libCOMI_gt_CM_Abathur_BiomassDrop = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassDrop_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassDrop, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Abathur_BiomassDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassPickup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassCountTargetTotal;
    int lv_biomassCountStored;
    int lv_biomassCountStoredTemp;
    int lv_biomass100Stacks;
    int lv_biomass10Stacks;
    int lv_biomass1Stacks;
    int lv_i;

    // Variable Initialization
    lv_biomassCountStored = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_biomassCountStoredTemp = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassCountTargetTotal = (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100") * 100);
    lv_biomassCountTargetTotal += (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10") * 10);
    lv_biomassCountTargetTotal += UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1");
    lv_biomass100Stacks = TruncI((lv_biomassCountStoredTemp / 100));
    lv_biomassCountStoredTemp -= (lv_biomass100Stacks * 100);
    lv_biomass10Stacks = TruncI((lv_biomassCountStoredTemp / 10));
    lv_biomassCountStoredTemp -= (lv_biomass10Stacks * 10);
    lv_biomass1Stacks = lv_biomassCountStoredTemp;
    if (((lv_biomassCountStored + lv_biomassCountTargetTotal) > 100)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassPickupLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        lv_biomassCountStoredTemp = (100 - lv_biomassCountTargetTotal);
        libCOMI_gf_CM_Abathur_BiomassSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), FixedToInt((UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63) - lv_biomassCountStoredTemp)));
        libCOMI_gf_CM_Abathur_BiomassScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), false);
        libCOMI_gv_cM_DebugAbathurBiomassCollected += lv_biomassCountStoredTemp;
        lv_biomass100Stacks = TruncI((lv_biomassCountStoredTemp / 100));
        lv_biomassCountStoredTemp -= (lv_biomass100Stacks * 100);
        lv_biomass10Stacks = TruncI((lv_biomassCountStoredTemp / 10));
        lv_biomassCountStoredTemp -= (lv_biomass10Stacks * 10);
        lv_biomass1Stacks = lv_biomassCountStoredTemp;
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass100Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass10Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass1Stacks);
    }
    else {
        libCOMI_gv_cM_DebugAbathurBiomassCollected += lv_biomassCountStored;
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassTravelling", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassPickupFullLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass100Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass10Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass1Stacks);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassPickup_Init () {
    libCOMI_gt_CM_Abathur_BiomassPickup = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassPickup_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassPickup, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Abathur_BiomassPickup, c_playerAny, "BiomassPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassRefund
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_indexPlayer;
    point lv_position;
    int lv_biomassCountTotal;
    fixed lv_biomassRefundChance;
    fixed lv_biomassRefundChanceMastery;
    int lv_biomassRefundScaling;
    int lv_biomassRefundAmount;
    int lv_biomassDropCountLarge;
    int lv_biomassDropCountSmall;

    // Variable Initialization
    lv_biomassRefundChance = 0.5;
    lv_biomassRefundScaling = 1;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) != "Locust") && (UnitGetOwner(EventUnit()) == libCOOC_gf_CC_CommanderPlayer("ZergAbathur")) && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true)) && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == true) && ((libNtve_gf_UnitIsHidden(EventUnit()) == false) || (EventUnitDamageEffect() == libCOMI_gv_cM_CargoDeathKillEffect)) && (TechTreeUpgradeCount(libCOOC_gf_CC_CommanderPlayer("ZergAbathur"), "AbathurBiomassRefund", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassRefundChanceMastery = ((UserDataGetFixed("MasteryUpgrades", "AbathurMastery4", "PointIncrement", 1) / 100.0) * TechTreeUpgradeCount(EventPlayer(), "MasteryAbathurBiomassRefund", c_techCountCompleteOnly));
    lv_biomassRefundChance += lv_biomassRefundChanceMastery;
    if ((lv_biomassRefundChance >= RandomFixed(0.0, 1.0))) {
        lv_biomassCountTotal = (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
        lv_biomassCountTotal += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
        lv_biomassCountTotal += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
        lv_biomassRefundAmount = FixedToInt((lv_biomassCountTotal / lv_biomassRefundScaling));
        libCOMI_gv_cM_DebugAbathurBiomassDroppedRefund += lv_biomassRefundAmount;
        libCOMI_gv_cM_DebugAbathurBiomassLost -= lv_biomassRefundAmount;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BiomassPickup", c_unitCreateIgnorePlacement, libCOOC_gf_CC_CommanderPlayer("ZergAbathur"), UnitGetPosition(EventUnit()));
        libCOMI_gf_CM_Abathur_BiomassSetStack(UnitLastCreated(), lv_biomassRefundAmount);
        UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
        libCOMI_gf_CM_Abathur_BiomassScale(UnitLastCreated(), true);
        libCOMI_gf_CM_Abathur_BiomassMerge(UnitLastCreated(), lv_biomassRefundAmount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassRefund_Init () {
    libCOMI_gt_CM_Abathur_BiomassRefund = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassRefund_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassRefund, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Abathur_BiomassRefund, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAbathurBiomassLost
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugAbathurBiomassLost_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) != "Locust") && (UnitGetOwner(EventUnit()) == libCOOC_gf_CC_CommanderPlayer("ZergAbathur")) && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_C5670D9B", "A", UnitGetName(EventUnit()));
        TextExpressionSetToken("Param/Expression/lib_COMI_C5670D9B", "B", IntToText((UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100)));
        TextExpressionSetToken("Param/Expression/lib_COMI_C5670D9B", "C", IntToText((UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10)));
        TextExpressionSetToken("Param/Expression/lib_COMI_C5670D9B", "D", IntToText(UnitBehaviorCount(EventUnit(), "BiomassBuff1")));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_C5670D9B"), false);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_564A19C7", "A", UnitGetName(EventUnit()));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_564A19C7"), false);
        return true;
    }
    libCOMI_gv_cM_DebugAbathurBiomassLost += (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
    libCOMI_gv_cM_DebugAbathurBiomassLost += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
    libCOMI_gv_cM_DebugAbathurBiomassLost += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugAbathurBiomassLost_Init () {
    libCOMI_gt_CM_DebugAbathurBiomassLost = TriggerCreate("libCOMI_gt_CM_DebugAbathurBiomassLost_Func");
    TriggerEnable(libCOMI_gt_CM_DebugAbathurBiomassLost, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_DebugAbathurBiomassLost, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassTrain
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_trainUnit;
    int lv_biomassBuff100Count;
    int lv_biomassBuff10Count;
    int lv_biomassBuff1Count;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == libCOOC_gf_CC_CommanderPlayer("ZergAbathur")) && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true)) && ((libNtve_gf_TriggeringProgressUnitType() == "RavagerAbathur") || (libNtve_gf_TriggeringProgressUnitType() == "GuardianMP") || (libNtve_gf_TriggeringProgressUnitType() == "Devourer"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexPlayer = UnitGetOwner(EventUnit());
    lv_trainUnit = EventUnitProgressUnit();
    lv_biomassBuff100Count = UnitBehaviorCount(EventUnit(), "BiomassBuff100");
    lv_biomassBuff10Count = UnitBehaviorCount(EventUnit(), "BiomassBuff10");
    lv_biomassBuff1Count = UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    libCOMI_gf_CM_Abathur_BiomassTransfer(lv_indexPlayer, lv_trainUnit, lv_biomassBuff100Count, lv_biomassBuff10Count, lv_biomassBuff1Count);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassTrain_Init () {
    libCOMI_gt_CM_Abathur_BiomassTrain = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassTrain_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassTrain, false);
    TriggerAddEventUnitTrainProgress(libCOMI_gt_CM_Abathur_BiomassTrain, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassManualUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassManualUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Abathur_BiomassSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    libCOMI_gf_CM_Abathur_BiomassScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    libCOMI_gf_CM_Abathur_BiomassMerge(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassManualUpdate_Init () {
    libCOMI_gt_CM_Abathur_BiomassManualUpdate = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassManualUpdate_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassManualUpdate, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Abathur_BiomassManualUpdate, c_playerAny, "BiomassCreatedDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassScaler
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassScaler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassCountTotal;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (UnitGetOwner(EventUnit()) == libCOOC_gf_CC_CommanderPlayer("ZergAbathur")) && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassCountTotal = (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
    lv_biomassCountTotal += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
    lv_biomassCountTotal += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    if ((lv_biomassCountTotal > 100)) {
        lv_biomassCountTotal = 100;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((0.0025 * lv_biomassCountTotal) + 1.25), 3))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassScaler_Init () {
    libCOMI_gt_CM_Abathur_BiomassScaler = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassScaler_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassScaler, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Abathur_BiomassScaler, null, "BiomassBuff1", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Abathur_BiomassScaler, null, "BiomassBuff10", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Abathur_BiomassScaler, null, "BiomassBuff100", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_Enemy_Death_Create_Locusts
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_locustUnitType;
    int lv_rand;
    fixed lv_foodCompare;

    // Variable Initialization
    lv_locustUnitType = "Locust";
    lv_rand = RandomInt(1, 100);
    lv_foodCompare = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)) * -16.0);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(libCOOC_gf_CC_CommanderPlayer("ZergAbathur"), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!(((libNtve_gf_KillingPlayer() == 1) || (libNtve_gf_KillingPlayer() == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetHeight(EventUnit()) >= 1)) {
        lv_locustUnitType = "LocustFlying";
    }

    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_foodCompare = 8;
    }

    if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_foodCompare = 96;
    }

    if (((FixedToInt(lv_foodCompare) + libCOMI_gv_cM_Abathur_Enemy_Death_Create_Locusts_Random_Modifier) >= lv_rand)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_locustUnitType, c_unitCreateIgnorePlacement, libCOOC_gf_CC_CommanderPlayer("ZergAbathur"), UnitGetPosition(EventUnit()));
        PlayerCreateEffectUnit(libCOOC_gf_CC_CommanderPlayer("ZergAbathur"), "AbathurLocustTimedLife", UnitLastCreated());
        libCOMI_gv_cM_Abathur_Enemy_Death_Create_Locusts_Random_Modifier = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts_Init () {
    libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts = TriggerCreate("libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_ToxicNest
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_ToxicNest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "AbathurCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_GlobalCasterUnitGroup[lv_casterPlayer], OrderTargetingPoint(AbilityCommand("SpawnToxicNest", 0), UnitGetPosition(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"))), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_ToxicNest_Init () {
    libCOMI_gt_CM_Abathur_ToxicNest = TriggerCreate("libCOMI_gt_CM_Abathur_ToxicNest_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Abathur_ToxicNest, null, AbilityCommand("SpawnToxicNest", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_Sacrific_Scale
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_Sacrific_Scale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sacrificCount;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (UnitGetOwner(EventUnit()) == libCOOC_gf_CC_CommanderPlayer("ProtossAlarak")) && (UnitHasBehavior2(EventUnit(), "AscendantSacrificeSelfBuff") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sacrificCount = UnitBehaviorCount(EventUnit(), "AscendantSacrificeSelfBuff");
    if ((lv_sacrificCount > 10)) {
        lv_sacrificCount = 10;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((0.05 * lv_sacrificCount) + 1.0), 3))));
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal(IntToString(lv_sacrificCount)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_Sacrific_Scale_Init () {
    libCOMI_gt_CM_Alarak_Sacrific_Scale = TriggerCreate("libCOMI_gt_CM_Alarak_Sacrific_Scale_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Alarak_Sacrific_Scale, null, "AscendantSacrificeSelfBuff", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AlarakLightningStrikes_FlashOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AlarakLightningStrikes_FlashOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupSingle(lv_p), AbilityCommand("AlarakACDeadlyCharge", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AlarakLightningStrikes_FlashOn_Init () {
    libCOMI_gt_CM_AlarakLightningStrikes_FlashOn = TriggerCreate("libCOMI_gt_CM_AlarakLightningStrikes_FlashOn_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_AlarakLightningStrikes_FlashOn, null, "AlarakLightningStrikes", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AlarakLightningStrikes_FlashOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AlarakLightningStrikes_FlashOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupSingle(lv_p), AbilityCommand("AlarakACDeadlyCharge", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AlarakLightningStrikes_FlashOff_Init () {
    libCOMI_gt_CM_AlarakLightningStrikes_FlashOff = TriggerCreate("libCOMI_gt_CM_AlarakLightningStrikes_FlashOff_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_AlarakLightningStrikes_FlashOff, null, "AlarakLightningStrikes", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AlarakLightningStrikes_Sacriface
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AlarakLightningStrikes_Sacriface_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_alarak;

    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());
    lv_alarak = libCOMI_gv_cM_HeroUnit[lv_p];

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_alarak) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_alarak) == "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_alarak, libCOMI_gv_cM_AlarakLightningStrikes_Behavior, lv_alarak, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AlarakLightningStrikes_Sacriface_Init () {
    libCOMI_gt_CM_AlarakLightningStrikes_Sacriface = TriggerCreate("libCOMI_gt_CM_AlarakLightningStrikes_Sacriface_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AlarakLightningStrikes_Sacriface, null, libCOMI_gv_cM_AlarakLightningStrikes_SacrificeCmd, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_SoulAbsorption_Impact
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_SoulAbsorption_Impact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    unit lv_alarak;
    fixed lv_amout;
    int lv_p;

    // Variable Initialization
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_alarak = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_amout = UnitGetCustomValue(lv_missile, 63);
    lv_p = UnitGetOwner(lv_alarak);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Effect,SoulAbsorptionMU,VitalArray[Life].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    CatalogReferenceSet("Effect,SoulAbsorptionMU,VitalArray[Shields].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    UnitCreateEffectUnit(lv_alarak, libCOMI_gv_cM_Alarak_SoulAbsorption_ScoreTrackerEffect, lv_alarak);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_SoulAbsorption_Impact_Init () {
    libCOMI_gt_CM_Alarak_SoulAbsorption_Impact = TriggerCreate("libCOMI_gt_CM_Alarak_SoulAbsorption_Impact_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Alarak_SoulAbsorption_Impact, c_playerAny, libCOMI_gv_cM_Alarak_SoulAbsorption_ImpactEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_SoulAbsorption_Launch
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_SoulAbsorption_Launch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_victimType;
    unit lv_missile;

    // Variable Initialization
    lv_victimType = EventPlayerEffectUsedUnitType(c_effectUnitTarget);
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(lv_missile, 63, (UnitTypeGetProperty(lv_victimType, c_unitPropSuppliesUsed) * libCOMI_gv_cM_Alarak_SoulAbsorption_FoodFactor));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_SoulAbsorption_Launch_Init () {
    libCOMI_gt_CM_Alarak_SoulAbsorption_Launch = TriggerCreate("libCOMI_gt_CM_Alarak_SoulAbsorption_Launch_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Alarak_SoulAbsorption_Launch, c_playerAny, libCOMI_gv_cM_Alarak_SoulAbsorption_LaunchEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerAdd
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((((lv_p >= 1) && (lv_p <= 2)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_p], lv_u);
    if ((TriggerIsEnabled(libCOMI_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMI_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerAdd_Init () {
    libCOMI_gt_CM_Alarak_EmpowerAdd = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerAdd_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Alarak_EmpowerAdd, c_playerAny, libCOMI_gv_cM_Alarak_EmpowerAuraTargetPlayerStartEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerRemove
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((((lv_p >= 1) && (lv_p <= 2)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_p], lv_u);
    ActorScopeSend(ActorScopeFromUnit(lv_u), (("Signal " + "Destroy" + IntToString(lv_p))));
    if ((TriggerIsEnabled(libCOMI_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMI_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerRemove_Init () {
    libCOMI_gt_CM_Alarak_EmpowerRemove = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerRemove_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Alarak_EmpowerRemove, c_playerAny, libCOMI_gv_cM_Alarak_EmpowerAuraTargetPlayerFinalEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerWorshiperAdd
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((((lv_p >= 1) && (lv_p <= 2)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Alarak_EmpowerWorshipers[lv_p], lv_u);
    if ((TriggerIsEnabled(libCOMI_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMI_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd_Init () {
    libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd, null, "WorshipAlarak", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerWorshiperRemove
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libCOMI_gv_cM_Alarak_EmpowerWorshipers[1], lv_u);
    UnitGroupRemove(libCOMI_gv_cM_Alarak_EmpowerWorshipers[2], lv_u);
    if ((TriggerIsEnabled(libCOMI_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMI_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove_Init () {
    libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove, null, "WorshipAlarak", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerUpdate_Func (bool testConds, bool runActions) {
    int auto52747C9D_ae;
    int auto52747C9D_ai;
    unitgroup autoB921BE57_g;
    int autoB921BE57_u;
    unitgroup auto84427305_g;
    int auto84427305_u;

    // Variable Declarations
    unit lv_slave;
    fixed[3] lv_totalSupply;
    int lv_player;
    fixed lv_abilityPower;
    fixed lv_attackDamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.0625, c_timeGame);
    auto52747C9D_ae = 2;
    auto52747C9D_ai = 1;
    lv_player = 1;
    for ( ; ( (auto52747C9D_ai >= 0 && lv_player <= auto52747C9D_ae) || (auto52747C9D_ai <= 0 && lv_player >= auto52747C9D_ae) ) ; lv_player += auto52747C9D_ai ) {
        autoB921BE57_g = libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_player];
        autoB921BE57_u = 1;
        for ( ; autoB921BE57_u <= UnitGroupCount(autoB921BE57_g, c_unitCountAll) ; autoB921BE57_u += BoolToInt(lv_slave == UnitGroupUnit(autoB921BE57_g, autoB921BE57_u)) ) {
            lv_slave = UnitGroupUnit(autoB921BE57_g, autoB921BE57_u);
            if ((UnitHasBehavior2(lv_slave, libCOMI_gv_cM_Alarak_EmpowerAuraTarget) == true)) {
                if ((UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) == 0.0) && (UnitTypeTestAttribute(UnitGetType(lv_slave), c_unitAttributeHeroic) == true)) {
                    lv_totalSupply[lv_player] += 3.0;
                }
                else {
                    lv_totalSupply[lv_player] += UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed);
                }
            }
            else {
                UnitGroupRemove(libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_player], lv_slave);
            }
        }
        auto84427305_g = libCOMI_gv_cM_Alarak_EmpowerWorshipers[lv_player];
        auto84427305_u = 1;
        for ( ; auto84427305_u <= UnitGroupCount(auto84427305_g, c_unitCountAll) ; auto84427305_u += BoolToInt(lv_slave == UnitGroupUnit(auto84427305_g, auto84427305_u)) ) {
            lv_slave = UnitGroupUnit(auto84427305_g, auto84427305_u);
            if ((UnitHasBehavior2(lv_slave, libCOMI_gv_cM_Alarak_EmpowerWorshiperTarget) == true)) {
                lv_totalSupply[lv_player] += UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed);
            }
            else {
                UnitGroupRemove(libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_player], lv_slave);
            }
        }
        if ((lv_totalSupply[lv_player] <= 100.0)) {
            lv_attackDamage = (libCOMI_gv_cM_Alarak_EmpowerBaseDmgInc * lv_totalSupply[lv_player]);
            lv_abilityPower = (libCOMI_gv_cM_Alarak_EmpowerBaseSpellDmgeIncPercent * lv_totalSupply[lv_player]);
        }
        else {
            lv_attackDamage = (libCOMI_gv_cM_Alarak_EmpowerBaseDmgInc * lv_totalSupply[lv_player]);
            lv_abilityPower = (((libCOMI_gv_cM_Alarak_EmpowerBaseSpellDmgeIncPercent * libCOMI_gv_cM_Alarak_EmpowerDiminishingReturnsMultiplier) * (lv_totalSupply[lv_player] - libCOMI_gv_cM_Alarak_EmpowerDiminishingReturnsSupplyThreshold)) + (libCOMI_gv_cM_Alarak_EmpowerBaseSpellDmgeIncPercent * libCOMI_gv_cM_Alarak_EmpowerDiminishingReturnsSupplyThreshold));
        }
        CatalogFieldValueSet(c_gameCatalogBehavior, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, "Modification.DamageDealtFraction[Spell]", lv_player, FixedToString(lv_abilityPower, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Melee]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Ranged]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        if ((lv_totalSupply[lv_player] > 0.0)) {
            TechTreeBehaviorAllow(lv_player, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, true);
        }
        else {
            TechTreeBehaviorAllow(lv_player, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, false);
        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerUpdate_Init () {
    libCOMI_gt_CM_Alarak_EmpowerUpdate = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_AchievementCarrierAmount
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_AchievementCarrierAmount_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Carrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_fenixAchievementCarrierAmount += 1;
    if ((libCOMI_gv_fenixAchievementCarrierAmount == 4) && (libCOMI_gv_fenixAchievementCarrierResearched == true) && (GameGetMissionTime() <= 600.0)) {
        AchievementAward(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), "CommanderFenixCarrier");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_AchievementCarrierAmount_Init () {
    libCOMI_gt_CM_Fenix_AchievementCarrierAmount = TriggerCreate("libCOMI_gt_CM_Fenix_AchievementCarrierAmount_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_AchievementCarrierAmount, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_AchievementCarrierAmount, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_AchievementCarrierResearched
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_AchievementCarrierResearched_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "FenixChampionClolarionCarrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_fenixAchievementCarrierResearched = true;
    if ((libCOMI_gv_fenixAchievementCarrierAmount == 4) && (libCOMI_gv_fenixAchievementCarrierResearched == true) && (GameGetMissionTime() <= 600.0)) {
        AchievementAward(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), "CommanderFenixCarrier");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_AchievementCarrierResearched_Init () {
    libCOMI_gt_CM_Fenix_AchievementCarrierResearched = TriggerCreate("libCOMI_gt_CM_Fenix_AchievementCarrierResearched_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_AchievementCarrierResearched, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_AchievementCarrierResearched, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_SentryNullShield
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_SentryNullShield_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), "FenixSentryNullShieldReflect", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - (EventUnitDamageAbsorbed() / 2.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_SentryNullShield_Init () {
    libCOMI_gt_CM_Fenix_SentryNullShield = TriggerCreate("libCOMI_gt_CM_Fenix_SentryNullShield_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_SentryNullShield, false);
    TriggerAddEventUnitDamageAbsorbed(libCOMI_gt_CM_Fenix_SentryNullShield, null, "SentryFenixNullShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_TaldarinDetonationStore
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_TaldarinDetonationStore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDone;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventUnitDamageSourcePlayer(), "FenixImmortalDetonationShot", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventUnitDamageSourcePlayer(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageDone = EventUnitDamageAttempted();
    UnitSetCustomValue(EventUnit(), 62, (UnitGetCustomValue(EventUnit(), 62) + lv_damageDone));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_TaldarinDetonationStore_Init () {
    libCOMI_gt_CM_Fenix_TaldarinDetonationStore = TriggerCreate("libCOMI_gt_CM_Fenix_TaldarinDetonationStore_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_TaldarinDetonationStore, false);
    TriggerAddEventUnitDamaged(libCOMI_gt_CM_Fenix_TaldarinDetonationStore, null, c_unitDamageTypeAny, c_unitDamageEither, "FenixTaldarinImmortalPhaseDisruptors");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_TaldarinDetonationRelease
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_TaldarinDetonationRelease_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    fixed lv_fraction;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "FenixImmortalDetonation") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fraction = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FenixTaldarinImmortalDetonationDummyFraction", "Amount", libCOOC_gf_CC_CommanderPlayer("ProtossFenix")));
    lv_amount = (UnitGetCustomValue(EventUnit(), 62) * lv_fraction);
    CatalogFieldValueSet(c_gameCatalogEffect, "FenixImmortalDetonationDamage", "Amount", libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), FixedToString(lv_amount, c_fixedPrecisionAny));
    if ((UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionUnit[4]) == true)) {
        UnitCreateEffectPoint(libCOMI_gv_cM_Fenix_ChampionUnit[4], "FenixImmortalDetonationSearchArea", UnitGetPosition(EventUnit()));
    }
    else {
        PlayerCreateEffectPoint(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), "FenixImmortalDetonationSearchArea", UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_TaldarinDetonationRelease_Init () {
    libCOMI_gt_CM_Fenix_TaldarinDetonationRelease = TriggerCreate("libCOMI_gt_CM_Fenix_TaldarinDetonationRelease_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_TaldarinDetonationRelease, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_TaldarinDetonationRelease, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_InitialDummySpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_InitialDummySpawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy1", c_unitCreateIgnorePlacement, libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), Point(0.0, 0.0));
    UnitGroupAdd(libCOMI_gv_cM_Fenix_DummyGroup, UnitLastCreated());
    libCOMI_gv_cM_Fenix_Suits[1] = UnitLastCreated();
    libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[1], libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy2", c_unitCreateIgnorePlacement, libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), Point(0.0, 0.0));
    UnitGroupAdd(libCOMI_gv_cM_Fenix_DummyGroup, UnitLastCreated());
    libCOMI_gv_cM_Fenix_Suits[2] = UnitLastCreated();
    libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[2], libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), 2);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy3", c_unitCreateIgnorePlacement, libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), Point(0.0, 0.0));
    UnitGroupAdd(libCOMI_gv_cM_Fenix_DummyGroup, UnitLastCreated());
    libCOMI_gv_cM_Fenix_Suits[3] = UnitLastCreated();
    libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[3], libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), 3);
    libCOMI_gv_cM_Fenix_AbilCmdArray[1] = "SOASummonFenix";
    libCOMI_gv_cM_Fenix_AbilCmdArray[2] = "SOASummonFenixDragoon";
    libCOMI_gv_cM_Fenix_AbilCmdArray[3] = "SOASummonFenixArbiter";
    if ((TechTreeUpgradeCount(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), "FenixOfflineSuitRegen", c_techCountCompleteOnly) == 1)) {
        libCOMI_gv_cM_Fenix_OfflineHealthRegen *= libCOMI_gv_cM_Fenix_OfflineVitalRegenMultiplier;
        libCOMI_gv_cM_Fenix_OfflineShieldRegen *= libCOMI_gv_cM_Fenix_OfflineVitalRegenMultiplier;
    }

    libCOMI_gv_cM_Fenix_OfflineEnergyRegen *= ((TechTreeUpgradeCount(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), "MasteryFenixSuitEnergyRegen", c_techCountCompleteOnly) / 100.0) + 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_InitialDummySpawn_Init () {
    libCOMI_gt_CM_Fenix_InitialDummySpawn = TriggerCreate("libCOMI_gt_CM_Fenix_InitialDummySpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_HeroSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_HeroSpawn_Func (bool testConds, bool runActions) {
    string auto057CC64D_val;
    int auto97938278_ae;
    int auto97938278_ai;
    int autoCED00EAD_ae;
    int autoCED00EAD_ai;
    int autoCD058B6B_ae;
    int autoCD058B6B_ai;

    // Variable Declarations
    int lv_i;
    int lv_kills;
    unit lv_fenixUnit;

    // Variable Initialization
    lv_fenixUnit = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Fenix_HeroGroup, EventUnitCreatedUnit());
    if ((libCOMI_gv_cM_Fenix_KilledSelf[UnitGetOwner(EventUnit())] == false)) {
        UnitBehaviorAdd(lv_fenixUnit, "FenixExplode", lv_fenixUnit, 1);
    }

    libCOMI_gv_cM_Fenix_ActiveHero = EventUnitCreatedUnit();
    UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropEnergyRegen, 0.0);
    libCOMI_gv_cM_Fenix_ActiveHero_Abil = EventUnitCreatedAbil();
    UnitGroupLoopBegin(libCOMI_gv_cM_Fenix_HeroGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            lv_kills += libNtve_gf_UnitGetPropertyKills(UnitGroupLoopCurrent(), c_unitPropCurrent);
        }

    }
    UnitGroupLoopEnd();
    if ((lv_kills > 0)) {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropKills, lv_kills);
        libCOMI_gv_cM_Fenix_KillCount[UnitGetOwner(EventUnit())] = lv_kills;
    }
    else {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropKills, libCOMI_gv_cM_Fenix_KillCount[UnitGetOwner(EventUnit())]);
    }
    DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[1][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), false);
    DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[2][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), false);
    DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[3][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), false);
    auto057CC64D_val = UnitGetType(EventUnitCreatedUnit());
    if (auto057CC64D_val == "FenixCoop") {
        libCOMI_gv_cM_Fenix_ActiveHero_Slot = 1;
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropLife, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropShields, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropEnergy, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1], c_unitPropEnergy, c_unitPropCurrent));
        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_ActiveHero, libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), 1);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOUI_gv_cU_GPCutscene[libCOOC_gf_CC_CommanderPlayer("ProtossFenix")]), "WorkStart");
        auto97938278_ae = 3;
        auto97938278_ai = 1;
        lv_i = 1;
        for ( ; ( (auto97938278_ai >= 0 && lv_i <= auto97938278_ae) || (auto97938278_ai <= 0 && lv_i >= auto97938278_ae) ) ; lv_i += auto97938278_ai ) {
            if (((PlayerGetCooldown(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i])) <= 0.0) && ((libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]) != (libCOMI_gv_cM_Fenix_ActiveHero_Abil)))) {
                PlayerAddCooldown(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]), libCOMI_gv_cM_Fenix_SuitSwapCooldown);
            }

        }
    }
    else if (auto057CC64D_val == "FenixDragoon") {
        libCOMI_gv_cM_Fenix_ActiveHero_Slot = 2;
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropLife, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropShields, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropEnergy, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2], c_unitPropEnergy, c_unitPropCurrent));
        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_ActiveHero, libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), 2);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOUI_gv_cU_GPCutscene[libCOOC_gf_CC_CommanderPlayer("ProtossFenix")]), "WorkStart");
        autoCED00EAD_ae = 3;
        autoCED00EAD_ai = 1;
        lv_i = 1;
        for ( ; ( (autoCED00EAD_ai >= 0 && lv_i <= autoCED00EAD_ae) || (autoCED00EAD_ai <= 0 && lv_i >= autoCED00EAD_ae) ) ; lv_i += autoCED00EAD_ai ) {
            if (((PlayerGetCooldown(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i])) <= 0.0) && ((libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]) != (libCOMI_gv_cM_Fenix_ActiveHero_Abil)))) {
                PlayerAddCooldown(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]), libCOMI_gv_cM_Fenix_SuitSwapCooldown);
            }

        }
    }
    else if (auto057CC64D_val == "FenixArbiter") {
        libCOMI_gv_cM_Fenix_ActiveHero_Slot = 3;
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropLife, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropShields, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero, c_unitPropEnergy, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3], c_unitPropEnergy, c_unitPropCurrent));
        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_ActiveHero, libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), 3);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOUI_gv_cU_GPCutscene[libCOOC_gf_CC_CommanderPlayer("ProtossFenix")]), "WorkStart");
        autoCD058B6B_ae = 3;
        autoCD058B6B_ai = 1;
        lv_i = 1;
        for ( ; ( (autoCD058B6B_ai >= 0 && lv_i <= autoCD058B6B_ae) || (autoCD058B6B_ai <= 0 && lv_i >= autoCD058B6B_ae) ) ; lv_i += autoCD058B6B_ai ) {
            if (((PlayerGetCooldown(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i])) <= 0.0) && ((libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]) != (libCOMI_gv_cM_Fenix_ActiveHero_Abil)))) {
                PlayerAddCooldown(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]), libCOMI_gv_cM_Fenix_SuitSwapCooldown);
            }

        }
    }
    else {
    }
    libCOMI_gf_CM_Fenix_SetActiveHeroUIState(EventUnitCreatedUnit(), true);
    libCOUI_gf_SetHeroPanelUnit(1, EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_HeroSpawn_Init () {
    libCOMI_gt_CM_Fenix_HeroSpawn = TriggerCreate("libCOMI_gt_CM_Fenix_HeroSpawn_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_HeroSpawn, null, "SOASummonFenix", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_HeroSpawn, null, "SOASummonFenixArbiter", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_HeroSpawn, null, "SOASummonFenixDragoon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_HeroSpawnCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_HeroSpawnCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    UnitGroupLoopBegin(libCOMI_gv_cM_Fenix_HeroGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGroupLoopCurrent() != libCOMI_gv_cM_Fenix_ActiveHero))) {
            libCOMI_gf_CM_Fenix_VitalMatch(UnitGroupLoopCurrent());
            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "SOASummonFenixWarpOutAnimation", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), 1);
            Wait(0.67, c_timeGame);
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_HeroSpawnCleanup_Init () {
    libCOMI_gt_CM_Fenix_HeroSpawnCleanup = TriggerCreate("libCOMI_gt_CM_Fenix_HeroSpawnCleanup_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Fenix_HeroSpawnCleanup, c_playerAny, "SOASummonFenixHeroSummonCleanupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_HeroKilled
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_HeroKilled_Func (bool testConds, bool runActions) {
    string auto735B6DBB_val;

    // Variable Declarations
    int lv_player;
    string lv_unitType;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_unitType = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOMI_gv_cM_Fenix_HeroGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "FenixCoop")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_FEB870A6"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[1][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), false);
    }

    if ((UnitGetType(EventUnit()) == "FenixDragoon")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_7E24D489"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[2][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), false);
    }

    if ((UnitGetType(EventUnit()) == "FenixArbiter")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_ACE8A237"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[3][libCOOC_gf_CC_CommanderPlayer("ProtossFenix")], PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), false);
    }

    libCOMI_gf_CM_Fenix_VitalMatch(EventUnit());
    libCOMI_gv_cM_Fenix_KillCount[UnitGetOwner(EventUnit())] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
    UnitCreateEffectUnit(libCOMI_gv_cM_SoACasterUnit[EventPlayer()], "SOASummonFenixHeroSummonCasterBehaviorCleanup", libCOMI_gv_cM_SoACasterUnit[EventPlayer()]);
    libCOUI_gv_cU_HeroExists[UnitGetOwner(EventUnit())] = false;
    if ((libNtve_gf_KillingUnit() == EventUnit()) && (libCOMI_gv_cM_Fenix_KilledSelf[lv_player] == false)) {
        libCOMI_gv_cM_Fenix_KilledSelf[lv_player] = true;
        libCOMI_gv_cM_Fenix_KillCount[lv_player] += 1;
        TechTreeBehaviorAllow(lv_player, "FenixExplode", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AStrongHeart", 1);
        SoundChannelStop(PlayerGroupSingle(lv_player), c_soundCategoryVoice);
        auto735B6DBB_val = lv_unitType;
        if (auto735B6DBB_val == "FenixArbiter") {
            libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenixArbiter", 0), EventUnitDamageSourcePoint());
        }
        else if (auto735B6DBB_val == "FenixCoop") {
            libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenix", 0), EventUnitDamageSourcePoint());
        }
        else if (auto735B6DBB_val == "FenixDragoon") {
            libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenixDragoon", 0), EventUnitDamageSourcePoint());
        }
        else {
            libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenix", 0), EventUnitDamageSourcePoint());
        }
    }
    else {
        PlayerAddCooldown(libCOOC_gf_CC_CommanderPlayer("ProtossFenix"), (libCOMI_gv_cM_Fenix_ActiveHero_Abil), 180.0);
    }
    libCOMI_gv_cM_Fenix_ActiveHero_Abil = "";
    libCOMI_gf_CM_Fenix_SetActiveHeroUIState(EventUnit(), false);
    libCOUI_gf_CU_ShowHideHeroPanel(false);
    CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOUI_gv_cU_GPCutscene[libCOOC_gf_CC_CommanderPlayer("ProtossFenix")]), "WorkEnd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_HeroKilled_Init () {
    libCOMI_gt_CM_Fenix_HeroKilled = TriggerCreate("libCOMI_gt_CM_Fenix_HeroKilled_Func");
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_HeroKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_SuicideUpdateVital
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_SuicideUpdateVital_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Fenix_SuicideLife[EventPlayer()] = EventPlayerEffectUsedAmountFixed(c_effectAmountShieldsChanged, true);
    libCOMI_gv_cM_Fenix_SuicideShield[EventPlayer()] = EventPlayerEffectUsedAmountFixed(c_effectAmountLifeChanged, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_SuicideUpdateVital_Init () {
    libCOMI_gt_CM_Fenix_SuicideUpdateVital = TriggerCreate("libCOMI_gt_CM_Fenix_SuicideUpdateVital_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Fenix_SuicideUpdateVital, c_playerAny, "FenixSuicide");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ResearchRemoveSuicide
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ResearchRemoveSuicide_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Fenix_KilledSelf[EventPlayer()] = true;
    UnitBehaviorRemove(libCOMI_gv_cM_Fenix_ActiveHero, "FenixExplode", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ResearchRemoveSuicide_Init () {
    libCOMI_gt_CM_Fenix_ResearchRemoveSuicide = TriggerCreate("libCOMI_gt_CM_Fenix_ResearchRemoveSuicide_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Fenix_ResearchRemoveSuicide, null, AbilityCommand("ForgeResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionInitialSetup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionInitialSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Fenix_ChampionUnitType[1] = "FenixKaldalisZealot";
    libCOMI_gv_cM_Fenix_ChampionUnitType[2] = "FenixTalisAdept";
    libCOMI_gv_cM_Fenix_ChampionUnitType[3] = "FenixMojoScout";
    libCOMI_gv_cM_Fenix_ChampionUnitType[4] = "FenixTaldarinImmortal";
    libCOMI_gv_cM_Fenix_ChampionUnitType[5] = "FenixWarbringerColossus";
    libCOMI_gv_cM_Fenix_ChampionUnitType[6] = "FenixClolarionCarrier";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[1] = "ZealotPurifier";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[2] = "AdeptFenix";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[3] = "Scout";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[4] = "Immortal";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[5] = "ColossusPurifier";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[6] = "Carrier";
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[1] = AbilityCommand("FenixKaldalisZealotMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[2] = AbilityCommand("FenixTalisAdeptMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[3] = AbilityCommand("FenixMojoScoutMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[4] = AbilityCommand("FenixTaldarinImmortalMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[5] = AbilityCommand("FenixWarbringerColossusMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[6] = AbilityCommand("FenixClolarionCarrierMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[1] = "FenixNetworkedSuperiorityZealot";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[2] = "FenixNetworkedSuperiorityAdept";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[3] = "FenixNetworkedSuperiorityScout";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[4] = "FenixNetworkedSuperiorityImmortal";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[5] = "FenixNetworkedSuperiorityColossus";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[6] = "FenixNetworkedSuperiorityCarrier";
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionUpgradeResearched, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionMorphed, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ProbiusSwap, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionInitialSetup_Init () {
    libCOMI_gt_CM_Fenix_ChampionInitialSetup = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionInitialSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Potential Voluteer Trained
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Func (bool testConds, bool runActions) {
    int autoF8A13B7A_ae;
    int autoF8A13B7A_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[1]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[2]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[3]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[4]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[5]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitCreatedAbil() == "WarpGateTrain") || (EventUnitCreatedAbil() == "StargateTrain"))) {
        Wait(5.0, c_timeGame);
    }

    if ((UnitIsAlive(EventUnitCreatedUnit()) == true)) {
        autoF8A13B7A_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
        autoF8A13B7A_ai = 1;
        lv_i = 1;
        for ( ; ( (autoF8A13B7A_ai >= 0 && lv_i <= autoF8A13B7A_ae) || (autoF8A13B7A_ai <= 0 && lv_i >= autoF8A13B7A_ae) ) ; lv_i += autoF8A13B7A_ai ) {
            if ((UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[lv_i])) {
                UnitGroupAdd(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[lv_i], EventUnitCreatedUnit());
                libCOMI_gf_CM_Fenix_UpdateNetworkValues(lv_i, UnitGetOwner(EventUnitCreatedUnit()));
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Init () {
    libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "GatewayTrain", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "WarpGateTrain", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "StargateTrain", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "RoboticsFacilityTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Building ReBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Fenix_ChampionStructure = EventUnitCreatedUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt_Init () {
    libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt, null, "ProtossBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Upgrade Researched
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionUpgradeResearched_Func (bool testConds, bool runActions) {
    string auto012E2DC1_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto012E2DC1_val = libNtve_gf_TriggeringProgressUpgrade();
    if (auto012E2DC1_val == "FenixChampionKaldalisZealot") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[1] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionTalisAdept") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[2] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionMojoScout") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[3] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionTaldarinImmortal") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[4] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionWarbringerColossus") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[5] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionClolarionCarrier") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[6] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionUpgradeResearched_Init () {
    libCOMI_gt_CM_Fenix_ChampionUpgradeResearched = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionUpgradeResearched_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionUpgradeResearched, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ChampionUpgradeResearched, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionStructure"), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Timers
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionTimers_Func (bool testConds, bool runActions) {
    int auto795BEB7B_ae;
    int auto795BEB7B_ai;
    int auto21F69CB8_ae;
    int auto21F69CB8_ai;

    // Variable Declarations
    unit lv_volunteer;
    int lv_i;
    fixed lv_foundUnitRange;
    unit lv_foundUnit;

    // Variable Initialization
    lv_foundUnitRange = 500.0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto795BEB7B_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
    auto795BEB7B_ai = 1;
    lv_i = 1;
    for ( ; ( (auto795BEB7B_ai >= 0 && lv_i <= auto795BEB7B_ae) || (auto795BEB7B_ai <= 0 && lv_i >= auto795BEB7B_ae) ) ; lv_i += auto795BEB7B_ai ) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[lv_i] -= 1.0;
    }
    if (((UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionStructure) == true) && (UnitGetType(libCOMI_gv_cM_Fenix_ChampionStructure) == "FenixAltarOfPsiStorms"))) {
        auto21F69CB8_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
        auto21F69CB8_ai = 1;
        lv_i = 1;
        for ( ; ( (auto21F69CB8_ai >= 0 && lv_i <= auto21F69CB8_ae) || (auto21F69CB8_ai <= 0 && lv_i >= auto21F69CB8_ae) ) ; lv_i += auto21F69CB8_ai ) {
            if (((libCOMI_gv_cM_Fenix_ChampionAvailable[lv_i] == true) && (UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionUnit[lv_i]) == false) && (libCOMI_gv_cM_Fenix_ChampionRespawnTimer[lv_i] <= 0.0))) {
                lv_volunteer = null;
                UnitGroupLoopBegin(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[lv_i]);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitIsAlive(UnitGroupLoopCurrent()) == true) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), libCOMI_gv_cM_Fenix_ChampionDeathPosition[lv_i]) < lv_foundUnitRange)) {
                        lv_volunteer = UnitGroupLoopCurrent();
                        lv_foundUnitRange = DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), libCOMI_gv_cM_Fenix_ChampionDeathPosition[lv_i]);
                    }

                }
                UnitGroupLoopEnd();
                if ((lv_volunteer != null)) {
                    UnitIssueOrder(lv_volunteer, Order(libCOMI_gv_cM_Fenix_ChampionMorphAbil[lv_i]), c_orderQueueAddToFront);
                }

            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionTimers_Init () {
    libCOMI_gt_CM_Fenix_ChampionTimers = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionTimers_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_Fenix_ChampionTimers, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionMorphed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionMorphed_Func (bool testConds, bool runActions) {
    int autoCA982A4A_ae;
    int autoCA982A4A_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCA982A4A_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
    autoCA982A4A_ai = 1;
    lv_i = 1;
    for ( ; ( (autoCA982A4A_ai >= 0 && lv_i <= autoCA982A4A_ae) || (autoCA982A4A_ai <= 0 && lv_i >= autoCA982A4A_ae) ) ; lv_i += autoCA982A4A_ai ) {
        if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == libCOMI_gv_cM_Fenix_ChampionUnitType[lv_i])) {
            PlayerCreateEffectPoint(UnitGetOwner(libCOMI_gv_cM_Fenix_ChampionStructure), "FenixChampionSwapLaunch", UnitGetPosition(libCOMI_gv_cM_Fenix_ChampionStructure));
            libCOMI_gv_cM_Fenix_ChampionUnit[lv_i] = EventPlayerEffectUsedUnit(c_effectUnitCaster);
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ChampionUnit[lv_i], c_unitPropKills, libCOMI_gv_cM_Fenix_ChampionKills[lv_i]);
            UnitBehaviorAdd(libCOMI_gv_cM_Fenix_ChampionUnit[lv_i], "FenixChampionSwapBoost", libCOMI_gv_cM_Fenix_ChampionUnit[lv_i], 1);
            UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[lv_i], EventPlayerEffectUsedUnit(c_effectUnitCaster));
            libCOMI_gf_CM_Fenix_UpdateNetworkValues(lv_i, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionMorphed_Init () {
    libCOMI_gt_CM_Fenix_ChampionMorphed = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionMorphed_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionMorphed, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Fenix_ChampionMorphed, c_playerAny, "FenixChampionSwapImpactUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionDies_Func (bool testConds, bool runActions) {
    string auto391C7C17_val;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(UnitGetOwner(EventUnit()), "FenixChampionSwapLaunch", UnitGetPosition(EventUnit()));
    auto391C7C17_val = UnitGetType(EventUnit());
    if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[1]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[1] = 5.0;
        libCOMI_gv_cM_Fenix_ChampionKills[1] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[1] = UnitGetPosition(EventUnit());
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[2]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[2] = 5.0;
        libCOMI_gv_cM_Fenix_ChampionKills[2] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[2] = UnitGetPosition(EventUnit());
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[3]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[3] = 5.0;
        libCOMI_gv_cM_Fenix_ChampionKills[3] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[3] = UnitGetPosition(EventUnit());
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[4]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[4] = 5.0;
        libCOMI_gv_cM_Fenix_ChampionKills[4] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[4] = UnitGetPosition(EventUnit());
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[5]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[5] = 5.0;
        libCOMI_gv_cM_Fenix_ChampionKills[5] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[5] = UnitGetPosition(EventUnit());
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[6]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[6] = 5.0;
        libCOMI_gv_cM_Fenix_ChampionKills[6] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[6] = UnitGetPosition(EventUnit());
    }
    else {
    }
    if ((UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionStructure) == true)) {
        PlayerCreateEffectPoint(UnitGetOwner(libCOMI_gv_cM_Fenix_ChampionStructure), "FenixChampionSwapImpact", UnitGetPosition(libCOMI_gv_cM_Fenix_ChampionStructure));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionDies_Init () {
    libCOMI_gt_CM_Fenix_ChampionDies = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionDies_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionDies, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_ChampionDies, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionUnit[1]"));
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_ChampionDies, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionUnit[2]"));
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_ChampionDies, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionUnit[3]"));
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_ChampionDies, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionUnit[4]"));
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_ChampionDies, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionUnit[5]"));
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_ChampionDies, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionUnit[6]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_NetworkedUnitDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_NetworkedUnitDies_Func (bool testConds, bool runActions) {
    string auto0E65C66C_val;

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == libCOOC_gf_CC_CommanderPlayer("ProtossFenix")) && ((UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[1]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[2]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[3]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[4]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[5]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[6]))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E65C66C_val = UnitGetType(EventUnit());
    if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[1]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[1], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(1, UnitGetOwner(EventUnit()));
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[2]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[2], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(2, UnitGetOwner(EventUnit()));
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[3]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[3], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(3, UnitGetOwner(EventUnit()));
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[4]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[4], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(4, UnitGetOwner(EventUnit()));
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[5]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[5], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(5, UnitGetOwner(EventUnit()));
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[6]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[6], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(6, UnitGetOwner(EventUnit()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_NetworkedUnitDies_Init () {
    libCOMI_gt_CM_Fenix_NetworkedUnitDies = TriggerCreate("libCOMI_gt_CM_Fenix_NetworkedUnitDies_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_NetworkedUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ProbiusSwap
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ProbiusSwap_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Probe"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionKaldalisZealot", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionClolarionCarrier", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionMojoScout", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionTalisAdept", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionTaldarinImmortal", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionWarbringerColossus", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(UnitGetOwner(libCOMI_gv_cM_Fenix_ChampionStructure), "FenixChampionSwapLaunch", UnitGetPosition(libCOMI_gv_cM_Fenix_ChampionStructure));
    PlayerCreateEffectPoint(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionSwapImpactSet", UnitGetPosition(EventUnitCreatedUnit()));
    UnitBehaviorAdd(EventUnitCreatedUnit(), "FenixProbiusProbe", EventUnitCreatedUnit(), 1);
    UnitBehaviorAdd(EventUnitCreatedUnit(), "FenixChampionMorphStun", EventUnitCreatedUnit(), 1);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "Create FenixProbiusProbe");
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ProbiusSwap_Init () {
    libCOMI_gt_CM_Fenix_ProbiusSwap = TriggerCreate("libCOMI_gt_CM_Fenix_ProbiusSwap_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ProbiusSwap, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ProbiusSwap, null, "NexusTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ConclaiveTrainStart
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ConclaiveTrainStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMI_48E58677", "UpgradeName", StringExternal((libNtve_gf_TriggeringProgressUpgrade())));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_COMI_48E58677"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ConclaiveTrainStart_Init () {
    libCOMI_gt_CM_Fenix_ConclaiveTrainStart = TriggerCreate("libCOMI_gt_CM_Fenix_ConclaiveTrainStart_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ConclaiveTrainStart, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStart, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionStructure"), c_unitProgressStageStart);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStart, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionStructure"), c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ConclaiveTrainStop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ConclaiveTrainStop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMI_4E78EA33", "UpgradeName", StringExternal((libNtve_gf_TriggeringProgressUpgrade())));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_COMI_4E78EA33"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ConclaiveTrainStop_Init () {
    libCOMI_gt_CM_Fenix_ConclaiveTrainStop = TriggerCreate("libCOMI_gt_CM_Fenix_ConclaiveTrainStop_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionStructure"), c_unitProgressStagePause);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionStructure"), c_unitProgressStageCancel);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionStructure"), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionAugmentAbilitySoundTrigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) > 8.0)) {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_Fenix_ChampionUnit[3], "Signal TargetLongRange");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_Fenix_ChampionUnit[3], "Signal TargetShortRange");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Init () {
    libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionUnit[1]"), AbilityCommand("FenixKaldalisZealotCharge", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionUnit[2]"), AbilityCommand("FenixTalisAdeptBounceShot", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, UnitRefFromVariable("libCOMI_gv_cM_Fenix_ChampionUnit[3]"), AbilityCommand("FenixMojoMissiles", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charged Buster On Cost
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ChargedBusterOnCost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "ChargedBuster", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogAbil, "FenixDragoonAirBomb", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ChargedBusterOnCost_Init () {
    libCOMI_gt_ChargedBusterOnCost = TriggerCreate("libCOMI_gt_ChargedBusterOnCost_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChargedBusterOnCost, null, "ChargeBuster", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charged Buster Off Cost
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ChargedBusterOffCost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "ChargedBuster", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 1.0, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "FenixDragoonAirBomb", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 1.0, c_upgradeOperationMultiply);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ChargedBusterOffCost_Init () {
    libCOMI_gt_ChargedBusterOffCost = TriggerCreate("libCOMI_gt_ChargedBusterOffCost_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChargedBusterOffCost, null, "ChargeBuster", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_TriggersInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMI_gt_CM_Fenix_InitialDummySpawn, true, false);
    TriggerExecute(libCOMI_gt_CM_Fenix_ChampionInitialSetup, true, false);
    TriggerEnable(libCOMI_gt_CM_Fenix_SentryNullShield, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_TaldarinDetonationStore, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_TaldarinDetonationRelease, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_AchievementCarrierResearched, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_AchievementCarrierAmount, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ConclaiveTrainStart, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_TriggersInit_Init () {
    libCOMI_gt_CM_Fenix_TriggersInit = TriggerCreate("libCOMI_gt_CM_Fenix_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_KaraxUnitReviveBarrier
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_KaraxUnitReviveBarrier_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(libCOMI_gf_CM_GlobalCasterUnitForCommander("ProtossKarax")), "KaraxUnitSpawnBarrier", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "KaraxUnitSpawnBarrier", libCOMI_gf_CM_GlobalCasterUnitForCommander("ProtossKarax"), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_KaraxUnitReviveBarrier_Init () {
    libCOMI_gt_CM_KaraxUnitReviveBarrier = TriggerCreate("libCOMI_gt_CM_KaraxUnitReviveBarrier_Func");
    TriggerEnable(libCOMI_gt_CM_KaraxUnitReviveBarrier, false);
    TriggerAddEventUnitRevive(libCOMI_gt_CM_KaraxUnitReviveBarrier, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_KaraxSolarForgeSOAEnergy
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_KaraxSolarForgeSOAEnergy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "KaraxCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel3", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency3MU", libCOMI_gf_CM_GlobalCasterUnitForCommander("ProtossKarax"));
        libCOUI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel2", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency2MU", libCOMI_gf_CM_GlobalCasterUnitForCommander("ProtossKarax"));
        libCOUI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel1", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency1MU", libCOMI_gf_CM_GlobalCasterUnitForCommander("ProtossKarax"));
        libCOUI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_KaraxSolarForgeSOAEnergy_Init () {
    libCOMI_gt_CM_KaraxSolarForgeSOAEnergy = TriggerCreate("libCOMI_gt_CM_KaraxSolarForgeSOAEnergy_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_KaraxSolarForgeSOAEnergy, c_playerAny, "SolarForgeBeamImpactDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryKerriganInstantReviveCooldown
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[lv_p], "KerriganInstantReviveCooldown", libCOMI_gv_cM_HeroUnit[lv_p], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown_Init () {
    libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown = TriggerCreate("libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown, c_playerAny, "MasteryKerriganInstantReviveChanced");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Psi Strike
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_KerriganPsiStrike_Func (bool testConds, bool runActions) {
    int autoABE5947F_ae;
    int autoABE5947F_ai;

    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    autoABE5947F_ae = 14;
    autoABE5947F_ai = 1;
    lv_i = 1;
    for ( ; ( (autoABE5947F_ai >= 0 && lv_i <= autoABE5947F_ae) || (autoABE5947F_ai <= 0 && lv_i >= autoABE5947F_ae) ) ; lv_i += autoABE5947F_ai ) {
        libCOMI_gv_kerriganPsiStrikeFacing = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libCOMI_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)) && (libCOMI_gv_kerriganPsiStrikeFacing > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libCOMI_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) && (libCOMI_gv_kerriganPsiStrikeFacing < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libCOMI_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) || (libCOMI_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_KerriganPsiStrike_Init () {
    libCOMI_gt_KerriganPsiStrike = TriggerCreate("libCOMI_gt_KerriganPsiStrike_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_KerriganPsiStrike, null, AbilityCommand("PsiStrikeWalk", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Econ Drop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_KerriganEconDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "KerriganVoidCoopEconDrop") == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDropLT1", 0, 1, lv_position);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDropLT1", 0, 2, lv_position);
    }
    else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop5", 0, 1, lv_position);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop5", 0, 2, lv_position);
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop1", 0, 1, lv_position);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop1", 0, 2, lv_position);
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -2)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop2", 0, 1, lv_position);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop2", 0, 2, lv_position);
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -3)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop3", 0, 1, lv_position);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop3", 0, 2, lv_position);
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -4)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop4", 0, 1, lv_position);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop4", 0, 2, lv_position);
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) < -4)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop5", 0, 1, lv_position);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganVoidCoopEconDrop5", 0, 2, lv_position);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_KerriganEconDrop_Init () {
    libCOMI_gt_KerriganEconDrop = TriggerCreate("libCOMI_gt_KerriganEconDrop_Func");
    TriggerAddEventUnitDied(libCOMI_gt_KerriganEconDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillBFGActivate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_LaserDrillBFGActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laserDrillUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMI_gv_cM_LaserDrillUnit)), libCOMI_gv_cM_LaserDrillUnitGroup, OrderTargetingPoint(AbilityCommand("DrakkenLaserDrillBFG", 0), UnitGetPosition(libCOMI_gv_cM_LaserDrillUnit)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_LaserDrillBFGActivate_Init () {
    libCOMI_gt_CM_LaserDrillBFGActivate = TriggerCreate("libCOMI_gt_CM_LaserDrillBFGActivate_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_LaserDrillBFGActivate, null, AbilityCommand("DrakkenLaserDrillConcentratedBeamIssueOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillNukeActivate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_LaserDrillNukeActivate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMI_gv_cM_LaserDrillUnit)), libCOMI_gv_cM_LaserDrillUnitGroup, OrderTargetingPoint(AbilityCommand("DrakkenLaserDrillNuke", 0), UnitGetPosition(libCOMI_gv_cM_LaserDrillUnit)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_LaserDrillNukeActivate_Init () {
    libCOMI_gt_CM_LaserDrillNukeActivate = TriggerCreate("libCOMI_gt_CM_LaserDrillNukeActivate_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_LaserDrillNukeActivate, null, AbilityCommand("DrakkenLaserDrillPulseCannonIssueOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillBFG
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_LaserDrillBFG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    point lv_abilityTargetPoint;

    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abilityTargetPoint = libCOMI_gf_CM_LaserDrillTargetPoint(lv_targetPoint, lv_casterPoint, RegionPlayableMap());
    if ((lv_abilityTargetPoint != null)) {
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGDummyCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMI_gv_cM_LaserDrillDistance / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMI_gv_cM_LaserDrillDistance / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", EventPlayer(), IntToString(libCOMI_gv_cM_LaserDrillDistance), c_upgradeOperationSet);
        UnitCreateEffectPoint(EventUnit(), "DrakkenLaserDrillBFGSet", lv_abilityTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_LaserDrillBFG_Init () {
    libCOMI_gt_CM_LaserDrillBFG = TriggerCreate("libCOMI_gt_CM_LaserDrillBFG_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_LaserDrillBFG, null, AbilityCommand("DrakkenLaserDrillBFG", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Drill Beam Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillBeamSoundRegionClear_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillSoundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillSoundRegionActor), "Signal StopSound");
        libCOMI_gv_laserDrillSoundRegion = RegionEmpty();
        libCOMI_gv_laserDrillSoundRegionCreated = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillBeamSoundRegionClear_Init () {
    libCOMI_gt_LaserDrillBeamSoundRegionClear = TriggerCreate("libCOMI_gt_LaserDrillBeamSoundRegionClear_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillBeamSoundRegionClear, c_playerAny, "LaserDrillTripodCoopFinalPersistentEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Drill Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillBeamSoundFiring_Func (bool testConds, bool runActions) {
    int auto4F31BA37_ae;
    int auto4F31BA37_ai;

    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillSoundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillSoundRegionActor), "Signal StopSound");
        libCOMI_gv_laserDrillSoundRegion = RegionEmpty();
        libCOMI_gv_laserDrillSoundRegionCreated = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMI_gv_laserDrillSoundRegion = RegionCircle(Point(lv_x, lv_y), 1.0);
    auto4F31BA37_ae = lv_di;
    auto4F31BA37_ai = 1;
    lv_i = 1;
    for ( ; ( (auto4F31BA37_ai >= 0 && lv_i <= auto4F31BA37_ae) || (auto4F31BA37_ai <= 0 && lv_i >= auto4F31BA37_ae) ) ; lv_i += auto4F31BA37_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMI_gv_laserDrillSoundRegion, true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "LaserDrillCoopBeamRegion", libCOMI_gv_laserDrillSoundRegion);
    libCOMI_gv_laserDrillSoundRegionActor = libNtve_gf_ActorLastCreated();
    libCOMI_gv_laserDrillSoundRegionCreated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillBeamSoundFiring_Init () {
    libCOMI_gt_LaserDrillBeamSoundFiring = TriggerCreate("libCOMI_gt_LaserDrillBeamSoundFiring_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillBeamSoundFiring, c_playerAny, "LaserDrillTripodCoopFinalPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LaserDrillBFG Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillBFGBeamSoundFiring_Func (bool testConds, bool runActions) {
    int autoCBCE54E5_ae;
    int autoCBCE54E5_ai;

    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillBFGSoundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillBFGSoundRegionActor), "Signal StopSound");
        libCOMI_gv_laserDrillBFGSoundRegion = RegionEmpty();
        libCOMI_gv_laserDrillBFGSoundRegionCreated = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMI_gv_laserDrillBFGSoundRegion = RegionCircle(Point(lv_x, lv_y), 1.0);
    autoCBCE54E5_ae = lv_di;
    autoCBCE54E5_ai = 1;
    lv_i = 1;
    for ( ; ( (autoCBCE54E5_ai >= 0 && lv_i <= autoCBCE54E5_ae) || (autoCBCE54E5_ai <= 0 && lv_i >= autoCBCE54E5_ae) ) ; lv_i += autoCBCE54E5_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMI_gv_laserDrillBFGSoundRegion, true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "LaserDrillCoopConcentratedBeamRegion", libCOMI_gv_laserDrillBFGSoundRegion);
    libCOMI_gv_laserDrillBFGSoundRegionActor = libNtve_gf_ActorLastCreated();
    libCOMI_gv_laserDrillBFGSoundRegionCreated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillBFGBeamSoundFiring_Init () {
    libCOMI_gt_LaserDrillBFGBeamSoundFiring = TriggerCreate("libCOMI_gt_LaserDrillBFGBeamSoundFiring_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillBFGBeamSoundFiring, c_playerAny, "DrakkenLaserDrillBFGCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LaserDrillNuke Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillNukeBeamSoundFiring_Func (bool testConds, bool runActions) {
    int auto19534EEF_ae;
    int auto19534EEF_ai;

    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillNukeSoundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillNukeSoundRegionActor), "Signal StopSound");
        libCOMI_gv_laserDrillNukeSoundRegion = RegionEmpty();
        libCOMI_gv_laserDrillNukeSoundRegionCreated = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMI_gv_laserDrillNukeSoundRegion = RegionCircle(Point(lv_x, lv_y), 1.0);
    auto19534EEF_ae = lv_di;
    auto19534EEF_ai = 1;
    lv_i = 1;
    for ( ; ( (auto19534EEF_ai >= 0 && lv_i <= auto19534EEF_ae) || (auto19534EEF_ai <= 0 && lv_i >= auto19534EEF_ae) ) ; lv_i += auto19534EEF_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMI_gv_laserDrillNukeSoundRegion, true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "PulseCannonBeamRegion", libCOMI_gv_laserDrillNukeSoundRegion);
    libCOMI_gv_laserDrillNukeSoundRegionActor = libNtve_gf_ActorLastCreated();
    libCOMI_gv_laserDrillNukeSoundRegionCreated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillNukeBeamSoundFiring_Init () {
    libCOMI_gt_LaserDrillNukeBeamSoundFiring = TriggerCreate("libCOMI_gt_LaserDrillNukeBeamSoundFiring_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillNukeBeamSoundFiring, c_playerAny, "DrakkenLaserDrillNukeDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser DrillNuke Beam Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillNukeBeamSoundRegionClear_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillNukeSoundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillNukeSoundRegionActor), "Signal StopSound");
        libCOMI_gv_laserDrillNukeSoundRegion = RegionEmpty();
        libCOMI_gv_laserDrillNukeSoundRegionCreated = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillNukeBeamSoundRegionClear_Init () {
    libCOMI_gt_LaserDrillNukeBeamSoundRegionClear = TriggerCreate("libCOMI_gt_LaserDrillNukeBeamSoundRegionClear_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillNukeBeamSoundRegionClear, c_playerAny, "DrakkenLaserDrillNukeSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_GenerateNameList
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaUnitNames_GenerateNameList_Func (bool testConds, bool runActions) {
    int autoD93B8E07_ae;
    int autoD93B8E07_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD93B8E07_ae = libCOMI_gv_cMC_NovaUnitName_CountMax;
    autoD93B8E07_ai = 1;
    lv_i = 1;
    for ( ; ( (autoD93B8E07_ai >= 0 && lv_i <= autoD93B8E07_ae) || (autoD93B8E07_ai <= 0 && lv_i >= autoD93B8E07_ae) ) ; lv_i += autoD93B8E07_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COMI_474CC3E3", "Name", libCOMI_gf_CC_StoryArmyUnitUnitType(lv_i));
        libCOMI_gv_cM_NovaUnitName_Text[lv_i] = TextExpressionAssemble("Param/Expression/lib_COMI_474CC3E3");
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaUnitNames_GenerateNameList_Init () {
    libCOMI_gt_NovaUnitNames_GenerateNameList = TriggerCreate("libCOMI_gt_NovaUnitNames_GenerateNameList_Func");
    TriggerEnable(libCOMI_gt_NovaUnitNames_GenerateNameList, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_Assign
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaUnitNames_Assign_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_novaUnitName_Player;
    unit lv_novaUnitName_Unit;

    // Variable Initialization
    lv_novaUnitName_Player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_novaUnitName_Unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lv_novaUnitName_Player) == true))) {
            return false;
        }

        if (!((libCOOC_gf_ActiveCommanderForPlayer(lv_novaUnitName_Player) == "TerranNova"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 63, IntToFixed(libCOMI_gv_cM_NovaUnitName_CountCurrentPosition));
    libCOMI_gf_NovaUnitNames_KillUpdateText(lv_novaUnitName_Unit, libCOMI_gv_cM_NovaUnitName_CountCurrentPosition);
    libCOMI_gv_cM_NovaUnitName_CountCurrentPosition += libCOMI_gv_cM_NovaUnitName_CountStep;
    if ((libCOMI_gv_cM_NovaUnitName_CountCurrentPosition > libCOMI_gv_cMC_NovaUnitName_CountMax)) {
        libCOMI_gv_cM_NovaUnitName_CountCurrentPosition -= libCOMI_gv_cMC_NovaUnitName_CountMax;
    }

    if ((libCOMI_gv_cM_NovaUnitName_CountCurrentPosition < 1)) {
        libCOMI_gv_cM_NovaUnitName_CountCurrentPosition += libCOMI_gv_cMC_NovaUnitName_CountMax;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaUnitNames_Assign_Init () {
    libCOMI_gt_NovaUnitNames_Assign = TriggerCreate("libCOMI_gt_NovaUnitNames_Assign_Func");
    TriggerEnable(libCOMI_gt_NovaUnitNames_Assign, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_NovaUnitNames_Assign, c_playerAny, "BarracksOrbitalStrikeAssignRally");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_NovaUnitNames_Assign, c_playerAny, "MercAirDropApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_KillCountUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaUnitNames_KillCountUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_customValue63;

    // Variable Initialization
    lv_customValue63 = FixedToInt(UnitGetCustomValue(libNtve_gf_KillingUnit(), 63));

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == libCOOC_gf_CC_CommanderPlayer("TerranNova")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_customValue63 != 0)) {
        libCOMI_gf_NovaUnitNames_KillUpdateText(libNtve_gf_KillingUnit(), lv_customValue63);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaUnitNames_KillCountUpdate_Init () {
    libCOMI_gt_NovaUnitNames_KillCountUpdate = TriggerCreate("libCOMI_gt_NovaUnitNames_KillCountUpdate_Func");
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdate, false);
    TriggerAddEventUnitDied(libCOMI_gt_NovaUnitNames_KillCountUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_KillCountUpdateLaserTurret
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_customValue63;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == libCOOC_gf_CC_CommanderPlayer("TerranNova")))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "NovaACLaserTurret"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_customValue63 = FixedToInt(UnitGetCustomValue(UnitBehaviorEffectUnit(libNtve_gf_KillingUnit(), "AutoTurret_BlackOpsTimedLife", c_effectUnitCaster, 0), 63));
    libCOMI_gf_NovaUnitNames_KillUpdateText(UnitBehaviorEffectUnit(libNtve_gf_KillingUnit(), "AutoTurret_BlackOpsTimedLife", c_effectUnitCaster, 0), lv_customValue63);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret_Init () {
    libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret = TriggerCreate("libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret_Func");
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret, false);
    TriggerAddEventUnitDied(libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportActived
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportActived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCOMI_gv_cM_NovaGriffinTransportUnit = EventUnit();
    libCOMI_gv_cM_NovaGriffinTransportUnitGroup = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libCOMI_gv_cM_NovaGriffinTranportLoadPoint = UnitGetPosition(libCOMI_gv_cM_NovaGriffinTransportUnit);
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMI_gv_cM_NovaGriffinTransportUnit)), libCOMI_gv_cM_NovaGriffinTransportUnitGroup, OrderTargetingPoint(AbilityCommand("NovaGriffinTransportUnloadUnits", 0), UnitGetPosition(libCOMI_gv_cM_NovaGriffinTransportUnit)), false);
    UnitSetState(libCOMI_gv_cM_GlobalCasterUnit[lv_p], c_unitStateSilenced, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportActived_Init () {
    libCOMI_gt_CM_NovaGriffinTransportActived = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportActived_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinTransportActived, null, "NovaGriffinTransportActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportStop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(libCOMI_gv_cM_GlobalCasterUnit[lv_p], c_unitStateSilenced, false);
    Wait(0.0625, c_timeGame);
    if ((UnitHasBehavior2(libCOMI_gv_cM_NovaGriffinTransportUnit, "NovaGriffinTransportUnloadUnitsDespawnDelay") == false)) {
        UnitCreateEffectUnit(libCOMI_gv_cM_NovaGriffinTransportUnit, "NovaGriffinTransportCancelUnloadSet", libCOMI_gv_cM_NovaGriffinTransportUnit);
    }

    UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_p], "NovaGriffinGCD", libCOMI_gv_cM_GlobalCasterUnit[lv_p]);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportStop_Init () {
    libCOMI_gt_CM_NovaGriffinTransportStop = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportStop_Func");
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_NovaGriffinTransportStop, 1, AbilityCommand("NovaGriffinTransportUnloadUnits", 0), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_NovaGriffinTransportStop, 2, AbilityCommand("NovaGriffinTransportUnloadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportTimeOut
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportTimeOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_p], "NovaGriffinGCD", libCOMI_gv_cM_GlobalCasterUnit[lv_p]);
    UnitSetState(libCOMI_gv_cM_GlobalCasterUnit[lv_p], c_unitStateSilenced, false);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportTimeOut_Init () {
    libCOMI_gt_CM_NovaGriffinTransportTimeOut = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportTimeOut_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_NovaGriffinTransportTimeOut, c_playerAny, "NovaGriffinTransportUnloadUnitsDespawnDelayTimeOut");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportAirBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied_Init () {
    libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied, null, "NovaGriffinTransportAirUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportGroundBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Init () {
    libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied, null, "NovaGriffinTransportGroundUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportTeleportUnload
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportTeleportUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unloadPoint;
    fixed lv_angle;
    fixed lv_distance;

    // Variable Initialization
    lv_unloadPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(libCOMI_gv_cM_NovaGriffinTranportLoadPoint, lv_unloadPoint);
    lv_distance = DistanceBetweenPoints(libCOMI_gv_cM_NovaGriffinTranportLoadPoint, lv_unloadPoint);
    UnitGroupLoopBegin(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), lv_distance, lv_angle), false);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportAirUnitsRB", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), lv_distance, lv_angle)) == true)) {
            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), lv_distance, lv_angle), false);
        }
        else {
            UnitSetPosition(UnitGroupLoopCurrent(), lv_unloadPoint, false);
        }
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportUnhideUnitsSet", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportTeleportUnload_Init () {
    libCOMI_gt_CM_NovaGriffinTransportTeleportUnload = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportTeleportUnload_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_NovaGriffinTransportTeleportUnload, c_playerAny, "NovaGriffinTransportUnloadUnitsCompletionSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinBombingRunActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinBombingRunActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "NovaGriffinBombingRunActivate";
    libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("NovaGriffinBombingRunExecute", 0);
    libCOMI_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/NovaGriffinBombingRunActivate";
    libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "NovaGriffinBombingRunActivate";
    libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer] = "NovaGriffinBombingRunTargetingModel";
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] = "NovaGriffinBombingRunTargeter";
    libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 1;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_87E8D5EE");
    libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_A2913642");
    libCOMI_gv_cM_NovaGriffinBombingRunCost = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, "NovaGriffinBombingRunActivate", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lv_casterPlayer));
    libCOMI_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinBombingRunActivated_Init () {
    libCOMI_gt_CM_NovaGriffinBombingRunActivated = TriggerCreate("libCOMI_gt_CM_NovaGriffinBombingRunActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinBombingRunActivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "NovaGriffinBombingRunActivate", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinBombingRunActivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "NovaGriffinBombingRunActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinBombingRunFinish
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinBombingRunFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetCooldown(libCOMI_gv_cM_GlobalCasterUnit[lv_p], "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate") > 1.0)) {
        UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_p], "NovaGriffinGCD", libCOMI_gv_cM_GlobalCasterUnit[lv_p]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinBombingRunFinish_Init () {
    libCOMI_gt_CM_NovaGriffinBombingRunFinish = TriggerCreate("libCOMI_gt_CM_NovaGriffinBombingRunFinish_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinBombingRunFinish, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinBombingRunFinish, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Nova_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Nova_TriggersInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMI_gt_NovaUnitNames_GenerateNameList, false, false);
    TriggerEnable(libCOMI_gt_NovaUnitNames_Assign, true);
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdate, true);
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Nova_TriggersInit_Init () {
    libCOMI_gt_CM_Nova_TriggersInit = TriggerCreate("libCOMI_gt_CM_Nova_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Siege Mode Progressive Range Increase Apply
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaSiegeModeProgressiveRangeIncreaseApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_siegeTankUnitGroup;

    // Variable Initialization
    lv_siegeTankUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_siegeTankUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SiegeTankSieged_BlackOps", "", "", UnitGetOwner(EventUnit()), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_siegeTankUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "SiegeTankSiegeModeProgressiveRangeIncease", EventUnit(), 1);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaSiegeModeProgressiveRangeIncreaseApply_Init () {
    libCOMI_gt_NovaSiegeModeProgressiveRangeIncreaseApply = TriggerCreate("libCOMI_gt_NovaSiegeModeProgressiveRangeIncreaseApply_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_NovaSiegeModeProgressiveRangeIncreaseApply, null, AbilityCommand("FactoryTechLabResearch", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Psi Strike
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaPsiStrike_Func (bool testConds, bool runActions) {
    int autoDB53ABA4_ae;
    int autoDB53ABA4_ai;

    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    autoDB53ABA4_ae = 14;
    autoDB53ABA4_ai = 1;
    lv_i = 1;
    for ( ; ( (autoDB53ABA4_ai >= 0 && lv_i <= autoDB53ABA4_ae) || (autoDB53ABA4_ai <= 0 && lv_i >= autoDB53ABA4_ae) ) ; lv_i += autoDB53ABA4_ai ) {
        libCOMI_gv_NovaPsiStrikeFacing = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libCOMI_gv_NovaPsiStrikeFacing < (lv_facing - 90.0)) && (libCOMI_gv_NovaPsiStrikeFacing > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libCOMI_gv_NovaPsiStrikeFacing > (lv_facing + 90.0)) && (libCOMI_gv_NovaPsiStrikeFacing < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libCOMI_gv_NovaPsiStrikeFacing > (lv_facing + 90.0)) || (libCOMI_gv_NovaPsiStrikeFacing < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaPsiStrike_Init () {
    libCOMI_gt_NovaPsiStrike = TriggerCreate("libCOMI_gt_NovaPsiStrike_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_NovaPsiStrike, null, AbilityCommand("NovaPsiStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Completed Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BuildingCompletedTrigger_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitProgressUnit()), "NovaCommander", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Barracks") && (libCOMI_gv_novaBarrackBuilt == 0))) {
        libCOMI_gf_CM_ModifyCooldown("BarracksTrainNovaMarine", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("BarracksTrainMarauderNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("BarracksTrainGhostNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gv_novaBarrackBuilt = 1;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Factory") && (libCOMI_gv_novaFactoryBuilt == 0))) {
        libCOMI_gf_CM_ModifyCooldown("FactoryTrainGoliathNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("FactoryTrainSiegeTankNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("FactoryTrainHellbatNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gv_novaFactoryBuilt = 1;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Starport") && (libCOMI_gv_novaFactoryBuilt == 0))) {
        libCOMI_gf_CM_ModifyCooldown("StarportTrainBansheeNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("StarportTrainRavenNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("StarportTrainLiberatorNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gv_novaStarportBuilt = 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BuildingCompletedTrigger_Init () {
    libCOMI_gt_BuildingCompletedTrigger = TriggerCreate("libCOMI_gt_BuildingCompletedTrigger_Func");
    TriggerAddEventUnitConstructProgress(libCOMI_gt_BuildingCompletedTrigger, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HyperionMinimapIconDynamicFacingDisplay
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawnedHyperion;
    int lv_hyperionPing;

    // Variable Initialization
    lv_hyperionPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnedHyperion = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingHyperion_AC", UnitGetPosition(lv_spawnedHyperion), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_spawnedHyperion);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_COMI_C1673EE3"));
    lv_hyperionPing = PingLastCreated();
    while ((UnitIsAlive(lv_spawnedHyperion) == true)) {
        PingSetRotation(lv_hyperionPing, UnitGetFacing(lv_spawnedHyperion));
        Wait(0.125, c_timeGame);
    }
    PingDestroy(lv_hyperionPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Init () {
    libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay = TriggerCreate("libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay, c_playerAny, "HyperionVoidCoopSpawnAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Construction Auto - User
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AdvancedConstructionAutoUser_Func (bool testConds, bool runActions) {
    int auto160BF7D1_ae;
    int auto160BF7D1_ai;

    // Variable Declarations
    order lv_orderDummy;
    unit lv_sCV;
    unit lv_target;
    bool lv_isUserOrder;
    bool lv_isSetAutoCastStateOrder;
    bool lv_isQueuedOrder;
    string lv_ut;
    abilcmd lv_cmd;
    order lv_order;
    int lv_c;
    int lv_i;

    // Variable Initialization
    lv_orderDummy = EventUnitOrder();
    lv_sCV = EventUnit();
    lv_target = OrderGetTargetUnit(lv_orderDummy);
    lv_isUserOrder = OrderGetFlag(lv_orderDummy, c_cmdUser);
    lv_isSetAutoCastStateOrder = OrderGetFlag(lv_orderDummy, c_cmdSetAutoCast);
    lv_isQueuedOrder = OrderGetFlag(lv_orderDummy, c_cmdQueued);
    lv_ut = UnitGetType(lv_target);
    lv_c = TechTreeUnitProducedAbilCmdCount(lv_ut);

    // Conditions
    if (testConds) {
        if (!((lv_isUserOrder == true))) {
            return false;
        }

        if (!((lv_isSetAutoCastStateOrder == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_sCV, "CancelOrderAdvancedConstructionAuto", lv_sCV);
    auto160BF7D1_ae = (lv_c - 1);
    auto160BF7D1_ai = 1;
    lv_i = 0;
    for ( ; ( (auto160BF7D1_ai >= 0 && lv_i <= auto160BF7D1_ae) || (auto160BF7D1_ai <= 0 && lv_i >= auto160BF7D1_ae) ) ; lv_i += auto160BF7D1_ai ) {
        lv_cmd = TechTreeUnitProducedAbilCmd(lv_ut, lv_i);
        lv_order = OrderTargetingUnit(lv_cmd, lv_target);
        OrderSetFlag(lv_order, c_cmdSmartClick, true);
        OrderSetFlag(lv_order, c_cmdQueued, lv_isQueuedOrder);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == true)) {
            UnitIssueOrder(lv_sCV, lv_order, c_orderQueueReplace);
            return true;
        }

    }
    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Error/CannotAdvancedConstruction"), SoundLink("UI_GenericError", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AdvancedConstructionAutoUser_Init () {
    libCOMI_gt_AdvancedConstructionAutoUser = TriggerCreate("libCOMI_gt_AdvancedConstructionAutoUser_Func");
    TriggerAddEventUnitOrder(libCOMI_gt_AdvancedConstructionAutoUser, null, AbilityCommand("AdvancedConstructionAuto", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Construction Auto - Auto Cast
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AdvancedConstructionAutoAutoCast_Func (bool testConds, bool runActions) {
    int auto3A2F8F84_ae;
    int auto3A2F8F84_ai;

    // Variable Declarations
    order lv_orderDummy;
    unit lv_sCV;
    unit lv_target;
    bool lv_isUserOrder;
    bool lv_isQueuedOrder;
    string lv_ut;
    abilcmd lv_cmd;
    order lv_order;
    int lv_c;
    int lv_i;

    // Variable Initialization
    lv_orderDummy = UnitOrder(EventUnit(), 0);
    lv_sCV = EventUnit();
    lv_target = OrderGetTargetUnit(lv_orderDummy);
    lv_isUserOrder = OrderGetFlag(lv_orderDummy, c_cmdUser);
    lv_isQueuedOrder = OrderGetFlag(lv_orderDummy, c_cmdQueued);
    lv_ut = UnitGetType(lv_target);
    lv_c = TechTreeUnitProducedAbilCmdCount(lv_ut);

    // Conditions
    if (testConds) {
        if (!((lv_isUserOrder == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_sCV, "CancelOrderAdvancedConstructionAuto", lv_sCV);
    auto3A2F8F84_ae = (lv_c - 1);
    auto3A2F8F84_ai = 1;
    lv_i = 0;
    for ( ; ( (auto3A2F8F84_ai >= 0 && lv_i <= auto3A2F8F84_ae) || (auto3A2F8F84_ai <= 0 && lv_i >= auto3A2F8F84_ae) ) ; lv_i += auto3A2F8F84_ai ) {
        lv_cmd = TechTreeUnitProducedAbilCmd(lv_ut, lv_i);
        lv_order = OrderTargetingUnit(lv_cmd, lv_target);
        OrderSetFlag(lv_order, c_cmdSmartClick, true);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == true)) {
            UnitIssueOrder(lv_sCV, lv_order, c_orderQueueAddToFront);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AdvancedConstructionAutoAutoCast_Init () {
    libCOMI_gt_AdvancedConstructionAutoAutoCast = TriggerCreate("libCOMI_gt_AdvancedConstructionAutoAutoCast_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_AdvancedConstructionAutoAutoCast, null, AbilityCommand("AdvancedConstructionAuto", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Vespene Drone Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SwannVespeneDroneTrigger_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(1, "VespeneDroneGrantResourcesTrigger", PlayerStartLocation(1));
    PlayerCreateEffectPoint(2, "VespeneDroneGrantResourcesTrigger", PlayerStartLocation(2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SwannVespeneDroneTrigger_Init () {
    libCOMI_gt_SwannVespeneDroneTrigger = TriggerCreate("libCOMI_gt_SwannVespeneDroneTrigger_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SwannVespeneDroneTrigger, 1, "VespeneDroneImpactSet");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SwannVespeneDroneTrigger, 2, "VespeneDroneImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Siege Tank Rebuild Controller
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SwannSiegeTankRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Variable Initialization
    lv_morphTime = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SwannSiegeTankRebuildController_Init () {
    libCOMI_gt_SwannSiegeTankRebuildController = TriggerCreate("libCOMI_gt_SwannSiegeTankRebuildController_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_SwannSiegeTankRebuildController, null, AbilityCommand("SiegeTankReborn", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Thor Rebuild Controller
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SwannThorRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Variable Initialization
    lv_morphTime = 12.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SwannThorRebuildController_Init () {
    libCOMI_gt_SwannThorRebuildController = TriggerCreate("libCOMI_gt_SwannThorRebuildController_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_SwannThorRebuildController, null, AbilityCommand("ThorRebornSwann", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FullSupplyCheat
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_FullSupplyCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aleksander;
    int lv_p;

    // Variable Initialization
    lv_aleksander = EventUnit();
    lv_p = UnitGetOwner(lv_aleksander);

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(lv_aleksander) == true)) {
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, true);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 0)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 1)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 2)), c_orderQueueAddToEnd);
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, false);
        }
        else {
            return true;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_FullSupplyCheat_Init () {
    libCOMI_gt_FullSupplyCheat = TriggerCreate("libCOMI_gt_FullSupplyCheat_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_FullSupplyCheat, null, "StukovSummonAleksanderCrashedTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StukovAutoCreepTumor
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_StukovAutoCreepTumor_Func (bool testConds, bool runActions) {
    int autoDF46F2F9_ae;
    int autoDF46F2F9_ai;

    // Variable Declarations
    int lv_player;
    int lv_i;
    fixed lv_angle;
    unitgroup lv_creepTumorGroup;
    fixed lv_placementX;
    fixed lv_placementY;
    region lv_mapSize;
    fixed lv_waitTime;
    int lv_count;
    fixed lv_angleIncrement;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_angle = libNtve_gf_RandomAngle();
    lv_creepTumorGroup = UnitGroupEmpty();
    lv_mapSize = RegionEntireMap();
    lv_waitTime = 1.0;
    lv_count = 72;
    lv_angleIncrement = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDF46F2F9_ae = lv_count;
    autoDF46F2F9_ai = 1;
    lv_i = 1;
    for ( ; ( (autoDF46F2F9_ai >= 0 && lv_i <= autoDF46F2F9_ae) || (autoDF46F2F9_ai <= 0 && lv_i >= autoDF46F2F9_ae) ) ; lv_i += autoDF46F2F9_ai ) {
        lv_placementX = PointGetX(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 13.0, lv_angle));
        lv_placementY = PointGetY(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 13.0, lv_angle));
        if (((lv_placementX > 1) && (lv_placementY > 1) && (lv_placementX < libNtve_gf_WidthOfRegion(lv_mapSize)) && (lv_placementY < libNtve_gf_HeightOfRegion(lv_mapSize)))) {
            if ((CreepIsPresent(Point(lv_placementX, lv_placementY)) == true)) {
                lv_creepTumorGroup = UnitGroupEmpty();
                UnitGroupLoopBegin(UnitGroup("CreepTumorStukov", c_playerAny, RegionCircle(Point(lv_placementX, lv_placementY), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupAdd(lv_creepTumorGroup, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                if ((UnitGroupCount(lv_creepTumorGroup, c_unitCountAlive) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorStukov", c_unitCreateIgnorePlacement, 0, Point(lv_placementX, lv_placementY));
                }

            }

        }

        lv_angle += lv_angleIncrement;
        Wait(lv_waitTime, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_StukovAutoCreepTumor_Init () {
    libCOMI_gt_StukovAutoCreepTumor = TriggerCreate("libCOMI_gt_StukovAutoCreepTumor_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_StukovAutoCreepTumor, c_playerAny, "CreepTumorStukovSpread");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_StukovAutoCreepTumor, c_playerAny, "CreepTumorStukovSpreadCC");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedStructureInitialSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Stukov_InfestedStructure = EventUnit();
    UnitModifyCooldown(libCOMI_gv_cM_Stukov_InfestedStructure, "Abil/SICivilianStructureSpawnCivilian", 180.0, c_cooldownOperationSet);
    UnitBehaviorAdd(EventUnit(), "SICivilianStructureSpawnCivilianGlobalTimerInitial", EventUnit(), 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn_Init () {
    libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn, null, "SICivilianStructureSpawnCivilian", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedStructureRebuilt
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedStructureRebuilt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SISCV") && (libNtve_gf_TriggeringProgressUnitType() == "SICivilianStructure")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Stukov_InfestedStructure = EventUnitProgressUnit();
    UnitBehaviorAdd(EventUnitProgressUnit(), "SICivilianStructureSpawnCivilianGlobalTimerRebuild", EventUnitProgressUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedStructureRebuilt_Init () {
    libCOMI_gt_CM_Stukov_InfestedStructureRebuilt = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedStructureRebuilt_Func");
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_Stukov_InfestedStructureRebuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveSpawner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_HordeWaveSpawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libCOMI_gv_cM_Stukov_HordeCurrentWave);
    UnitCreateEffectUnit(libCOMI_gv_cM_Stukov_InfestedStructure, "SIBarracksTrainInfestedSpawnSet", libCOMI_gv_cM_Stukov_InfestedStructure);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_HordeWaveSpawner_Init () {
    libCOMI_gt_CM_Stukov_HordeWaveSpawner = TriggerCreate("libCOMI_gt_CM_Stukov_HordeWaveSpawner_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_HordeWaveSpawner, c_playerAny, "SICivilianStructureSpawnCivilianGlobalTimerDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_HordeWaveCreated_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeGroup, EventUnitCreatedUnit());
    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeCurrentWave, EventUnitCreatedUnit());
    libCOMI_gv_cM_Stukov_HordeCount = UnitGroupCount(libCOMI_gv_cM_Stukov_HordeGroup, c_unitCountAlive);
    libCOMI_gf_CM_Stukov_SingleUnitGoToRally(EventUnitCreatedUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_HordeWaveCreated_Init () {
    libCOMI_gt_CM_Stukov_HordeWaveCreated = TriggerCreate("libCOMI_gt_CM_Stukov_HordeWaveCreated_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_HordeWaveCreated, null, "SIMorphtoInfestedCivilian", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_HordeWaveCreated, null, "SIMorphtoInfestedMarine", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_HordeWaveCreated, null, "SIMorphtoInfestedAberration", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_HordeWaveCreated, null, "StukovAleksanderCrashedTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveExploderCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_HordeWaveExploderCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeGroup, lv_unit);
    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeCurrentWave, lv_unit);
    libCOMI_gv_cM_Stukov_HordeCount = UnitGroupCount(libCOMI_gv_cM_Stukov_HordeGroup, c_unitCountAlive);
    libCOMI_gf_CM_Stukov_SingleUnitGoToRally(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_HordeWaveExploderCreated_Init () {
    libCOMI_gt_CM_Stukov_HordeWaveExploderCreated = TriggerCreate("libCOMI_gt_CM_Stukov_HordeWaveExploderCreated_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_HordeWaveExploderCreated, c_playerAny, "SIBarracksTrainTimedLifeABInfestedExploder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveInteruptionReissueOrder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SIInfestedCivilian") || (UnitGetType(EventUnit()) == "SIInfestedMarine") || (UnitGetType(EventUnit()) == "SIInfestedTrooper") || (UnitGetType(EventUnit()) == "SIVolatileInfested")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCOMI_gf_CM_Stukov_SingleUnitGoToRally(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Init () {
    libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder = TriggerCreate("libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder, null, "MutatorDeathPullModifySpeed", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_RallyPlaced
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_RallyPlaced_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Stukov_RallyTarget = null;
    libCOMI_gv_cM_Stukov_RallyPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(libCOMI_gv_cM_Stukov_RallyPoint, 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ExpansionRocks") == true)) {
            libCOMI_gv_cM_Stukov_RallyTarget = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((libCOMI_gv_cM_Stukov_RallyBeaconUnit != null)) {
        UnitRemove(libCOMI_gv_cM_Stukov_RallyBeaconUnit);
    }

    if ((libCOMI_gv_cM_Stukov_RallyTarget != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libCOMI_gv_cM_Stukov_RallyPoint);
        libCOMI_gv_cM_Stukov_RallyBeaconUnit = UnitLastCreated();
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libCOMI_gv_cM_Stukov_RallyPoint);
        libCOMI_gv_cM_Stukov_RallyBeaconUnit = UnitLastCreated();
    }
    UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_BunkerGroup, OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libCOMI_gv_cM_Stukov_RallyPoint), c_orderQueueReplace);
    libCOMI_gf_CM_Stukov_HordeGoToRally();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_RallyPlaced_Init () {
    libCOMI_gt_CM_Stukov_RallyPlaced = TriggerCreate("libCOMI_gt_CM_Stukov_RallyPlaced_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_RallyPlaced, c_playerAny, "SIStukovPlaceHordeRallyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_RallyToUnitDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_RallyToUnitDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_cM_Stukov_RallyTarget == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Stukov_RallyTarget = null;
    libCOMI_gv_cM_Stukov_RallyPoint = UnitGetPosition(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_RallyToUnitDies_Init () {
    libCOMI_gt_CM_Stukov_RallyToUnitDies = TriggerCreate("libCOMI_gt_CM_Stukov_RallyToUnitDies_Func");
    TriggerAddEventUnitDied(libCOMI_gt_CM_Stukov_RallyToUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_TriggersInit_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_TriggersInit_Init () {
    libCOMI_gt_CM_Stukov_TriggersInit = TriggerCreate("libCOMI_gt_CM_Stukov_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerAutoLoad
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;
    int lv_p;
    unit lv_newUnit;
    point lv_point;

    // Variable Initialization
    lv_bunker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_p = EventPlayer();
    lv_point = UnitGetPosition(lv_bunker);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCargoValue(lv_bunker, c_unitCargoSpaceFree) > 0)) {
        UnitCargoCreate(lv_bunker, "SIInfestedTrooper", 1);
        lv_newUnit = UnitCargoLastCreated();
    }
    else {
        if ((libCOMI_gv_cM_Stukov_RallyPoint != null)) {
            lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, 1.0, libCOMI_gv_cM_Stukov_RallyPoint);
        }

        UnitCreate(1, "SIInfestedTrooper", 0, lv_p, lv_point, 270.0);
        lv_newUnit = UnitLastCreated();
        SoundPlayOnUnitForPlayer(SoundLink("Medivac_Unload", -1), EventPlayer(), PlayerGroupAll(), lv_newUnit, 0.0, 100.0, 0.0);
    }
    UnitSetState(lv_newUnit, c_unitStateUsingSupply, false);
    libCOMI_gf_CM_Stukov_NewBunkerUnitProcess(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad_Init () {
    libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad, c_playerAny, "SIInfestedBunkerAutoSpawnerDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedTimedLifeFoodHackBurrow
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Init () {
    libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedTrooperUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedTrooperDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedCivilianUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedCivilianDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIVolatileInfestedDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIVolatileInfestedUp", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedTimedLifeFoodHackTrain
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnitCreatedUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Init () {
    libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, null, "SIMorphtoInfestedCivilian", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerUnloadRally
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_newUnit;

    // Variable Initialization
    lv_newUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Stukov_NewBunkerUnitProcess(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally_Init () {
    libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally, c_playerAny, "SIInfestedBunkerBunkerUnloadSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerRegister
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedBunkerRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Stukov_BunkerGroup, lv_u);
    if ((libCOMI_gv_cM_Stukov_RallyPoint != null)) {
        UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_BunkerGroup, OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libCOMI_gv_cM_Stukov_RallyPoint), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedBunkerRegister_Init () {
    libCOMI_gt_CM_Stukov_InfestedBunkerRegister = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedBunkerRegister_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_InfestedBunkerRegister, c_playerAny, "SIInfestedBunkerCreation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerInitialSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn_Func (bool testConds, bool runActions) {
    unitgroup auto592E3BD4_g;
    int auto592E3BD4_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SISCV") && (libNtve_gf_TriggeringProgressUnitType() == "SIInfestedBunker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "SIInfestedBunkerUpgraded", c_techCountCompleteOnly) == 1)) {
        UnitCargoCreate(EventUnitProgressUnit(), "SIInfestedTrooper", 6);
    }
    else {
        UnitCargoCreate(EventUnitProgressUnit(), "SIInfestedTrooper", 4);
    }
    auto592E3BD4_g = UnitCargoLastCreatedGroup();
    auto592E3BD4_u = 1;
    for ( ; auto592E3BD4_u <= UnitGroupCount(auto592E3BD4_g, c_unitCountAll) ; auto592E3BD4_u += BoolToInt(lv_u == UnitGroupUnit(auto592E3BD4_g, auto592E3BD4_u)) ) {
        lv_u = UnitGroupUnit(auto592E3BD4_g, auto592E3BD4_u);
        UnitSetState(lv_u, c_unitStateUsingSupply, false);
        libCOMI_gf_CM_Stukov_NewBunkerUnitProcess(lv_u);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn_Init () {
    libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn_Func");
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Cost Refund
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UnitCostRefund_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(1) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UnitCostRefund_Init () {
    libCOMI_gt_UnitCostRefund = TriggerCreate("libCOMI_gt_UnitCostRefund_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_UnitCostRefund, c_playerAny, "CocoonCreateLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PickupMinerals50
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PickupMinerals50_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(libCOOC_gv_cC_HumanPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != PlayerGroupLoopCurrent())) {
            libCOMI_gf_ResourcePickupAlly(PlayerGroupLoopCurrent(), 50, 0);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PickupMinerals50_Init () {
    libCOMI_gt_PickupMinerals50 = TriggerCreate("libCOMI_gt_PickupMinerals50_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupMinerals50, c_playerAny, "PickupMinerals50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupMinerals50, c_playerAny, "PickupEnvelopeMinerals50");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PickupMinerals100
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PickupMinerals100_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(libCOOC_gv_cC_HumanPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != PlayerGroupLoopCurrent())) {
            libCOMI_gf_ResourcePickupAlly(PlayerGroupLoopCurrent(), 100, 0);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PickupMinerals100_Init () {
    libCOMI_gt_PickupMinerals100 = TriggerCreate("libCOMI_gt_PickupMinerals100_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupMinerals100, c_playerAny, "PickupMinerals100");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PickupMinerals250
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PickupMinerals250_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(libCOOC_gv_cC_HumanPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != PlayerGroupLoopCurrent())) {
            libCOMI_gf_ResourcePickupAlly(PlayerGroupLoopCurrent(), 250, 0);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PickupMinerals250_Init () {
    libCOMI_gt_PickupMinerals250 = TriggerCreate("libCOMI_gt_PickupMinerals250_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupMinerals250, c_playerAny, "PickupMinerals250");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PickupMinerals500
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PickupMinerals500_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(libCOOC_gv_cC_HumanPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != PlayerGroupLoopCurrent())) {
            libCOMI_gf_ResourcePickupAlly(PlayerGroupLoopCurrent(), 500, 0);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PickupMinerals500_Init () {
    libCOMI_gt_PickupMinerals500 = TriggerCreate("libCOMI_gt_PickupMinerals500_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupMinerals500, c_playerAny, "PickupPalletMinerals");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PickupGas50
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PickupGas50_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(libCOOC_gv_cC_HumanPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != PlayerGroupLoopCurrent())) {
            libCOMI_gf_ResourcePickupAlly(PlayerGroupLoopCurrent(), 0, 50);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PickupGas50_Init () {
    libCOMI_gt_PickupGas50 = TriggerCreate("libCOMI_gt_PickupGas50_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupGas50, c_playerAny, "PickupGas50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupGas50, c_playerAny, "PickupEnvelopeGas50");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PickupGas100
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PickupGas100_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(libCOOC_gv_cC_HumanPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != PlayerGroupLoopCurrent())) {
            libCOMI_gf_ResourcePickupAlly(PlayerGroupLoopCurrent(), 0, 100);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PickupGas100_Init () {
    libCOMI_gt_PickupGas100 = TriggerCreate("libCOMI_gt_PickupGas100_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupGas100, c_playerAny, "PickupGas100");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PickupGas200
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PickupGas200_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(libCOOC_gv_cC_HumanPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != PlayerGroupLoopCurrent())) {
            libCOMI_gf_ResourcePickupAlly(PlayerGroupLoopCurrent(), 0, 200);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PickupGas200_Init () {
    libCOMI_gt_PickupGas200 = TriggerCreate("libCOMI_gt_PickupGas200_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupGas200, c_playerAny, "PickupGas200");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PickupGas500
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PickupGas500_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(libCOOC_gv_cC_HumanPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != PlayerGroupLoopCurrent())) {
            libCOMI_gf_ResourcePickupAlly(PlayerGroupLoopCurrent(), 0, 500);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PickupGas500_Init () {
    libCOMI_gt_PickupGas500 = TriggerCreate("libCOMI_gt_PickupGas500_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PickupGas500, c_playerAny, "PickupPalletGas");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingForceOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingForceOff_Func (bool testConds, bool runActions) {
    playergroup autoDA5C7614_g;
    int autoDA5C7614_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_SoATargetingCancel, false);
    TriggerEnable(libCOMI_gt_CM_SoATargetingPointChosen, false);
    TriggerEnable(libCOMI_gt_CM_SoATargetingDirectionChosen, false);
    libCOMI_gv_cM_SoAExitInstantly = true;
    autoDA5C7614_g = libCOOC_gf_HumanPlayers(); 
    autoDA5C7614_p = 1;
    for ( ; autoDA5C7614_p <= PlayerGroupCount(autoDA5C7614_g) ; autoDA5C7614_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoDA5C7614_g, autoDA5C7614_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoDA5C7614_g, autoDA5C7614_p);
        if ((libCOMI_gv_cM_SoATargetingPhase[lv_indexPlayer] != libCOMI_ge_CM_SoATargetingPhaseType_None)) {
            libCOMI_gv_cM_SoATargetingTransitioning[lv_indexPlayer] = false;
            UISetTargetingOrder(PlayerGroupSingle(lv_indexPlayer), libCOMI_gv_cM_SoACasterGroup[lv_indexPlayer], null, false);
            libCOMI_gf_CM_SoATargetingCancel(lv_indexPlayer);
        }

    }
    libCOMI_gv_cM_SoATargetingUsageCount = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingForceOff_Init () {
    libCOMI_gt_CM_SoATargetingForceOff = TriggerCreate("libCOMI_gt_CM_SoATargetingForceOff_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_SoATargetingForceOff, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingDeactivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingDeactivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoACasterGroup[lv_casterPlayer], null, false);
    libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] = 0;
    libCOMI_gf_CM_SoATargetingModeExit(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingDeactivated_Init () {
    libCOMI_gt_CM_SoATargetingDeactivated = TriggerCreate("libCOMI_gt_CM_SoATargetingDeactivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "SOAOrbitalStrikeActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "SOAGravitonBombActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "SOAThermalLanceActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "SOAStrafeAttackActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "SOAOrbitalStrikeActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "SOAGravitonBombActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "SOAThermalLanceActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "SOAStrafeAttackActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingPointChosen
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingPointChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    int lv_casterPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gv_cM_SoATargetingPhase[EventPlayer()] == libCOMI_ge_CM_SoATargetingPhaseType_Location))) {
            return false;
        }

        if (!((libCOMI_gv_cM_SoATargetingChargesSpent[EventPlayer()] < libCOMI_gv_cM_SoATargetingChargesTotal[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    lv_casterPlayer = EventPlayer();
    if ((VisIsVisibleForPlayer(lv_casterPlayer, lv_targetPoint) == false)) {
        return true;
    }

    libCOMI_gv_cM_SoATargetingCycling[lv_casterPlayer] = true;
    libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] += 1;
    libNtve_gf_CreateActorAtPoint(libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer], lv_targetPoint);
    libCOMI_gv_cM_SoATargetingActors[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
    if ((libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] == null)) {
        UnitIssueOrder(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer], OrderTargetingPoint(libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer], lv_targetPoint), c_orderQueueAddToEnd);
        libCOUI_gf_CU_TargetingSetCharges((libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer]-libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]), libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer], lv_casterPlayer);
        if ((libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] == libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer])) {
            Wait(0.125, c_timeGame);
            UnitBehaviorRemove(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer], libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer], 1);
        }
        else {
            Wait(0.1, c_timeGame);
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoACasterGroup[lv_casterPlayer], libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer], false);
        }
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer], 0, lv_casterPlayer, lv_targetPoint);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer] = UnitLastCreated();
        libCOMI_gv_cM_SoATargetingDirectionGroup[lv_casterPlayer] = libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]);
        Wait(0.1, c_timeGame);
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoATargetingDirectionGroup[lv_casterPlayer], OrderTargetingPoint(libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer], UnitGetPosition(libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer])), false);
        libCOUI_gf_CU_TargetingSetInstructionText(libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer], lv_casterPlayer);
        libCOMI_gv_cM_SoATargetingPhase[lv_casterPlayer] = libCOMI_ge_CM_SoATargetingPhaseType_Direction;
    }
    libCOMI_gv_cM_SoATargetingCycling[lv_casterPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingPointChosen_Init () {
    libCOMI_gt_CM_SoATargetingPointChosen = TriggerCreate("libCOMI_gt_CM_SoATargetingPointChosen_Func");
    TriggerEnable(libCOMI_gt_CM_SoATargetingPointChosen, false);
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingPointChosen, null, AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingPointChosen, null, AbilityCommand("SOAThermalLanceTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingPointChosen, null, AbilityCommand("SOAGravitonBomb", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingPointChosen, null, AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingDirectionChosen
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingDirectionChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    int lv_casterPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gv_cM_SoATargetingPhase[EventPlayer()] == libCOMI_ge_CM_SoATargetingPhaseType_Direction))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = EventPlayer();
    libCOMI_gv_cM_SoATargetingCycling[lv_casterPlayer] = true;
    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
    ActorSend(libCOMI_gv_cM_SoATargetingActors[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer], "Signal Destroy");
    libNtve_gf_MakeUnitFacePoint(libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer], lv_targetPoint, 0.0);
    libCOUI_gf_CU_TargetingSetCharges((libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer]-libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]), libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer], lv_casterPlayer);
    if ((libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] == libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer])) {
        UnitBehaviorRemove(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer], libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer], 1);
        Wait(0.1, c_timeGame);
    }
    else {
        libCOUI_gf_CU_TargetingSetInstructionText(libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer], lv_casterPlayer);
        Wait(0.1, c_timeGame);
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoACasterGroup[lv_casterPlayer], libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer], false);
        libCOMI_gv_cM_SoATargetingPhase[lv_casterPlayer] = libCOMI_ge_CM_SoATargetingPhaseType_Location;
    }
    libCOMI_gv_cM_SoATargetingCycling[lv_casterPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingDirectionChosen_Init () {
    libCOMI_gt_CM_SoATargetingDirectionChosen = TriggerCreate("libCOMI_gt_CM_SoATargetingDirectionChosen_Func");
    TriggerEnable(libCOMI_gt_CM_SoATargetingDirectionChosen, false);
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingDirectionChosen, null, AbilityCommand("SOAThermalLanceExecute", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingDirectionChosen, null, AbilityCommand("NovaGriffinBombingRunExecute", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingEffectFired
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingEffectFired_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingEffectFired_Init () {
    libCOMI_gt_CM_SoATargetingEffectFired = TriggerCreate("libCOMI_gt_CM_SoATargetingEffectFired_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATargetingEffectFired, c_playerAny, "SOAOrbitalStrikeCP");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATargetingEffectFired, c_playerAny, "SOAGravitonBombLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCancel
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingCancel_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_cM_SoATargetingCycling[EventPlayer()] == false))) {
            return false;
        }

        if (!(((EventTargetModeAbilCmd() == AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAThermalLanceTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAGravitonBomb", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAThermalLanceExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("NovaGriffinBombingRunExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingCancel(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingCancel_Init () {
    libCOMI_gt_CM_SoATargetingCancel = TriggerCreate("libCOMI_gt_CM_SoATargetingCancel_Func");
    TriggerEnable(libCOMI_gt_CM_SoATargetingCancel, false);
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_SoATargetingCancel, 1, null, c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_SoATargetingCancel, 2, null, c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCancelFromUI
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingCancelFromUI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingCancel(libCOUI_gf_CU_TargetingTriggeringPlayer());
    UISetTargetingOrder(PlayerGroupSingle(libCOUI_gf_CU_TargetingTriggeringPlayer()), libCOMI_gv_cM_GlobalCasterUnitGroup[libCOUI_gf_CU_TargetingTriggeringPlayer()], null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingCancelFromUI_Init () {
    libCOMI_gt_CM_SoATargetingCancelFromUI = TriggerCreate("libCOMI_gt_CM_SoATargetingCancelFromUI_Func");
    libCOUI_gf_CU_TargetingCancel(libCOMI_gt_CM_SoATargetingCancelFromUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCameraShake
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingCameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_effectTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cameraTargetPoint = CameraGetTarget(lv_player);
    lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
    lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
    CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 2.5, 100.0, 0.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingCameraShake_Init () {
    libCOMI_gt_CM_SoATargetingCameraShake = TriggerCreate("libCOMI_gt_CM_SoATargetingCameraShake_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATargetingCameraShake, c_playerAny, "SOAOrbitalStrikeImpactSearch");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATargetingCameraShake, c_playerAny, "SOAGravitonBombCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAOrbitalStrikeActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAOrbitalStrikeActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "SOAOrbitalStrikeActivate";
    libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAOrbitalStrikeExecute", 0);
    libCOMI_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/SOAOrbitalStrikeActivate";
    libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "SOAOrbitalStrikeActivate";
    libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer] = "SOAOrbitalStrikeTargetModel";
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] = null;
    libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 5;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_84BC1D9B");
    libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = null;
    libCOMI_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAOrbitalStrikeActivated_Init () {
    libCOMI_gt_CM_SoAOrbitalStrikeActivated = TriggerCreate("libCOMI_gt_CM_SoAOrbitalStrikeActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoAOrbitalStrikeActivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "SOAOrbitalStrikeActivate", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoAOrbitalStrikeActivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "SOAOrbitalStrikeActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAOrbitalStrikeActivatedKarax
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "KaraxCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeKarax", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoACasterGroup[lv_casterPlayer], libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax_Init () {
    libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax = TriggerCreate("libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax, 1, "SOAOrbitalStrikeCP");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax, 2, "SOAOrbitalStrikeCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAGravitonBombActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAGravitonBombActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "SOAGravitonBombActivate";
    libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAGravitonBombExecute", 0);
    libCOMI_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/SOAGravitonBombActivate";
    libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "SOAGravitonBombActivate";
    libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer] = "SOAGravitonBombTargetModel";
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAGravitonBomb", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] = null;
    libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 3;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_92A6D619");
    libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = null;
    libCOMI_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAGravitonBombActivated_Init () {
    libCOMI_gt_CM_SoAGravitonBombActivated = TriggerCreate("libCOMI_gt_CM_SoAGravitonBombActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoAGravitonBombActivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "SOAGravitonBombActivate", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoAGravitonBombActivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "SOAGravitonBombActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAThermalLanceActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAThermalLanceActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "SOAThermalLanceActivate";
    libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAThermalLanceExecute", 0);
    libCOMI_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/SOAThermalLanceActivate";
    libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "SOAThermalLanceActivate";
    libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer] = "SOAThermalLanceTargetingModel";
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAThermalLanceTargetingDummy", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] = "SOAThermalLanceTargeter";
    libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 3;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_FA8A12D3");
    libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_B639B493");
    libCOMI_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAThermalLanceActivated_Init () {
    libCOMI_gt_CM_SoAThermalLanceActivated = TriggerCreate("libCOMI_gt_CM_SoAThermalLanceActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoAThermalLanceActivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[1]"), "SOAThermalLanceActivate", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoAThermalLanceActivated, UnitRefFromVariable("libCOMI_gv_cM_SoACasterUnit[2]"), "SOAThermalLanceActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATimeFreezeOnP1
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATimeFreezeOnP1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATimeFreezeApply(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATimeFreezeOnP1_Init () {
    libCOMI_gt_CM_SoATimeFreezeOnP1 = TriggerCreate("libCOMI_gt_CM_SoATimeFreezeOnP1_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATimeFreezeOnP1, 1, "SOATimeFreeze");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATimeFreezeOnP2
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATimeFreezeOnP2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATimeFreezeApply(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATimeFreezeOnP2_Init () {
    libCOMI_gt_CM_SoATimeFreezeOnP2 = TriggerCreate("libCOMI_gt_CM_SoATimeFreezeOnP2_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATimeFreezeOnP2, 2, "SOATimeFreeze");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATimeFreezeCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATimeFreezeCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOOC_gf_CC_TimeAITemporaryRestore();
    libCOOC_gf_CC_AchievementToggleTimeStop(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATimeFreezeCleanup_Init () {
    libCOMI_gt_CM_SoATimeFreezeCleanup = TriggerCreate("libCOMI_gt_CM_SoATimeFreezeCleanup_Func");
    TriggerEnable(libCOMI_gt_CM_SoATimeFreezeCleanup, false);
    TriggerAddEventTimer(libCOMI_gt_CM_SoATimeFreezeCleanup, libCOMI_gv_cM_SoATimeFreezeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingPurifierBeamOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PM_SoATargetingPurifierBeamOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StoreUnitSelection(EventPlayer(), libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[EventPlayer()] = "SOAPurifierBeam";
    libCOMI_gv_cM_SoATargetingOrder[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingExecuteCommand[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingCooldown[EventPlayer()] = "";
    libCOMI_gv_cM_SoATargetingBehavior[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingModel[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingUnitType[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingChargesTotal[EventPlayer()] = 1;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[EventPlayer()] = StringExternal("Param/Value/lib_COMI_43A2DF64");
    libCOMI_gf_CM_SoATargetingModeEnter(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PM_SoATargetingPurifierBeamOn_Init () {
    libCOMI_gt_PM_SoATargetingPurifierBeamOn = TriggerCreate("libCOMI_gt_PM_SoATargetingPurifierBeamOn_Func");
    TriggerAddEventTargetModeUpdate(libCOMI_gt_PM_SoATargetingPurifierBeamOn, c_playerAny, AbilityCommand("SOAPurifierBeam", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingPurifierBeamOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PM_SoATargetingPurifierBeamOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingModeExit(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PM_SoATargetingPurifierBeamOff_Init () {
    libCOMI_gt_PM_SoATargetingPurifierBeamOff = TriggerCreate("libCOMI_gt_PM_SoATargetingPurifierBeamOff_Func");
    TriggerAddEventTargetModeUpdate(libCOMI_gt_PM_SoATargetingPurifierBeamOff, c_playerAny, AbilityCommand("SOAPurifierBeam", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoAStrafeActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PM_SoAStrafeActivated_Func (bool testConds, bool runActions) {
    fixed auto76D8B0DB_ae;
    fixed auto76D8B0DB_ai;

    // Variable Declarations
    fixed lv_radius;
    fixed lv_radiusMinimum;
    fixed lv_radiusMaximum;
    int lv_i;
    fixed lv_r;
    int lv_casterPlayer;
    point lv_targetPoint;
    int lv_masteryCount;
    fixed lv_masteryBonusPerPoint;
    fixed lv_masteryBonusTotal;
    fixed lv_shotCount;

    // Variable Initialization
    lv_radiusMinimum = 2.0;
    lv_radiusMaximum = 10.0;
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_masteryBonusPerPoint = 0.02;
    lv_masteryBonusTotal = 1.0;
    lv_shotCount = 100.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "MasteryArtanisSolarBombardment", c_techCountQueuedOrBetter) >= 1)) {
        lv_masteryCount = TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "MasteryArtanisSolarBombardment", c_techCountQueuedOrBetter);
        lv_masteryBonusTotal += (lv_masteryCount * lv_masteryBonusPerPoint);
        lv_shotCount *= lv_masteryBonusTotal;
        lv_radiusMaximum *= lv_masteryBonusTotal;
    }

    auto76D8B0DB_ae = lv_shotCount;
    auto76D8B0DB_ai = 1.0;
    lv_r = 1.0;
    for ( ; ( (auto76D8B0DB_ai >= 0 && lv_r <= auto76D8B0DB_ae) || (auto76D8B0DB_ai <= 0 && lv_r >= auto76D8B0DB_ae) ) ; lv_r += auto76D8B0DB_ai ) {
        lv_radius = (((lv_r / lv_shotCount) * (lv_radiusMaximum - lv_radiusMinimum)) + lv_radiusMinimum);
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        if ((TechTreeUpgradeCount(EventPlayer(), "SOAStrafeAttackUpgrade", c_techCountQueuedOrBetter) >= 1)) {
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        }

        Wait(0.15, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PM_SoAStrafeActivated_Init () {
    libCOMI_gt_PM_SoAStrafeActivated = TriggerCreate("libCOMI_gt_PM_SoAStrafeActivated_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PM_SoAStrafeActivated, c_playerAny, "SOAStrafeAttackCreateTargeter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoASuperShieldsActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PM_SoASuperShieldsActivated_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDropLT1") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop1") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop2") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop3") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop4") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop5")) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOASuperShieldApply", UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 2, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDropLT1") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop1") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop2") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop3") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop4") && (UnitGetType(UnitGroupLoopCurrent()) != "KerriganVoidCoopEconDrop5")) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOASuperShieldApply", UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    Wait(StringToFixed(CatalogReferenceGet("Behavior,SOASuperShield,Duration", c_playerAny)), c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PM_SoASuperShieldsActivated_Init () {
    libCOMI_gt_PM_SoASuperShieldsActivated = TriggerCreate("libCOMI_gt_PM_SoASuperShieldsActivated_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PM_SoASuperShieldsActivated, c_playerAny, "SOASuperShieldDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoASuperChronoApply
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoASuperChronoApply_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gf_CC_AchievementToggleSuperChrono(true);
    TriggerEnable(libCOMI_gt_CM_SoASuperChronoCleanup, true);
    TimerStart(libCOMI_gv_cM_SoASuperChronoTimer, CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOAMapWideChrono", "Duration", c_playerAny), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoASuperChronoApply_Init () {
    libCOMI_gt_CM_SoASuperChronoApply = TriggerCreate("libCOMI_gt_CM_SoASuperChronoApply_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_SoASuperChronoApply, null, AbilityCommand("SOAMapWideChrono", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoASuperChronoCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoASuperChronoCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOOC_gf_CC_AchievementToggleSuperChrono(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoASuperChronoCleanup_Init () {
    libCOMI_gt_CM_SoASuperChronoCleanup = TriggerCreate("libCOMI_gt_CM_SoASuperChronoCleanup_Func");
    TriggerEnable(libCOMI_gt_CM_SoASuperChronoCleanup, false);
    TriggerAddEventTimer(libCOMI_gt_CM_SoASuperChronoCleanup, libCOMI_gv_cM_SoASuperChronoTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidACShard Modify Health
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoidACShardModifyHealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_unitLife;
    fixed lv_unitShields;
    fixed lv_totalDamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        lv_unitLife = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, c_unitPropCurrent);
        lv_unitShields = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShields, c_unitPropCurrent);
        lv_totalDamage = (lv_unitLife + lv_unitShields);
        lv_totalDamage *= 0.75;
        CatalogFieldValueSet(c_gameCatalogEffect, "VoidShardACDeathGripDamageDummy", "Amount", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), FixedToString(lv_totalDamage, 3));
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "VoidShardACDeathGripDamageDummy", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoidACShardModifyHealth_Init () {
    libCOMI_gt_VoidACShardModifyHealth = TriggerCreate("libCOMI_gt_VoidACShardModifyHealth_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_VoidACShardModifyHealth, c_playerAny, "VoidShardACModifyHealthDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ExpansionRocksChangeOwner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ExpansionRocksChangeOwner_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster), 3, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ExpansionRocksChangeOwner_Init () {
    libCOMI_gt_ExpansionRocksChangeOwner = TriggerCreate("libCOMI_gt_ExpansionRocksChangeOwner_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ExpansionRocksChangeOwner, c_playerAny, "ExpansionRockTriggerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abort Mission
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbortMission_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PerfTestStop();
    libCOMI_gv_cM_EndMissionResult[EventPlayer()] = c_gameOverDefeat;
    libCOOC_gf_CC_PlayerAwardMissionXP(c_gameOverDefeat, EventPlayer());
    libCOOC_gf_CC_SetPlayerDefeated(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbortMission_Init () {
    libCOMI_gt_CM_AbortMission = TriggerCreate("libCOMI_gt_CM_AbortMission_Func");
    TriggerAddEventAbortMission(libCOMI_gt_CM_AbortMission, c_playerAny);
    TriggerAddEventGameMenuItemSelected(libCOMI_gt_CM_AbortMission, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionScoreScreenExited
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionScoreScreenExited_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerScoreValueGetAsInt(libCOUI_gf_CU_ScoreTriggeringPlayer(), "MutatorIsWeeklyChallenge") == 999)) {
        GameOver(libCOUI_gf_CU_ScoreTriggeringPlayer(), c_gameOverVictory, false, false);
        return true;
    }

    GameOver(libCOUI_gf_CU_ScoreTriggeringPlayer(), libCOMI_gv_cM_EndMissionResult[libCOUI_gf_CU_ScoreTriggeringPlayer()], false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionScoreScreenExited_Init () {
    libCOMI_gt_CM_MissionScoreScreenExited = TriggerCreate("libCOMI_gt_CM_MissionScoreScreenExited_Func");
    libCOUI_gf_CU_ScoreClosed(libCOMI_gt_CM_MissionScoreScreenExited);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionHandlePlayerQuitGiveResources
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false)) {
        PlayerModifyPropertyInt(libCOOC_gf_CC_PlayerAlly(EventPlayer()), c_playerPropMinerals, c_playerPropOperAdd, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
        PlayerModifyPropertyInt(libCOOC_gf_CC_PlayerAlly(EventPlayer()), c_playerPropVespene, c_playerPropOperAdd, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
        TechTreeUpgradeAddLevel(libCOOC_gf_CC_PlayerAlly(EventPlayer()), "NydusNetworkCoopAllyLeft", 1);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources_Init () {
    libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources = TriggerCreate("libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionHandlePlayerQuitGameEnd
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Func (bool testConds, bool runActions) {
    playergroup auto4B8F39D4_g;
    int auto4B8F39D4_p;
    playergroup auto3501898E_g;
    int auto3501898E_p;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B8F39D4_g = libCOOC_gf_HumanPlayers(); 
    auto4B8F39D4_p = 1;
    for ( ; auto4B8F39D4_p <= PlayerGroupCount(auto4B8F39D4_g) ; auto4B8F39D4_p += BoolToInt(lv_player == PlayerGroupPlayer(auto4B8F39D4_g, auto4B8F39D4_p)) ) {
        lv_player = PlayerGroupPlayer(auto4B8F39D4_g, auto4B8F39D4_p);
        if ((PlayerStatus(lv_player) == c_playerStatusActive)) {
            return true;
        }

    }
    auto3501898E_g = libCOOC_gf_HumanPlayers(); 
    auto3501898E_p = 1;
    for ( ; auto3501898E_p <= PlayerGroupCount(auto3501898E_g) ; auto3501898E_p += BoolToInt(lv_player == PlayerGroupPlayer(auto3501898E_g, auto3501898E_p)) ) {
        lv_player = PlayerGroupPlayer(auto3501898E_g, auto3501898E_p);
        GameOver(lv_player, c_gameOverDefeat, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Init () {
    libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd = TriggerCreate("libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCheatEndMission
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionVictoryCheatEndMission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionVictoryCheatEndMission_Init () {
    libCOMI_gt_CM_MissionVictoryCheatEndMission = TriggerCreate("libCOMI_gt_CM_MissionVictoryCheatEndMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Init () {
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue = TriggerCreate("libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Hatchery Primary Search
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HatcheryPrimarySearch_Func (bool testConds, bool runActions) {
    playergroup auto59F15E5F_g;
    int auto59F15E5F_p;
    unitgroup auto1A7E7594_g;
    int auto1A7E7594_u;

    // Variable Declarations
    int lv_indexPlayer;
    fixed lv_distance;
    unitgroup lv_hatcheryGroup;
    unit lv_closestHatchery;
    unit lv_indexTownHall;

    // Variable Initialization
    lv_distance = 500.0;
    lv_hatcheryGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto59F15E5F_g = libCOOC_gf_HumanPlayers(); 
    auto59F15E5F_p = 1;
    for ( ; auto59F15E5F_p <= PlayerGroupCount(auto59F15E5F_g) ; auto59F15E5F_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto59F15E5F_g, auto59F15E5F_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto59F15E5F_g, auto59F15E5F_p);
        lv_closestHatchery = null;
        lv_distance = 500.0;
        if (((TechTreeBehaviorCount(lv_indexPlayer, "ZerglingRespawnPrimary", c_techCountCompleteOnly) == 0) || (libCOMI_gf_CM_PrimaryTownHall(lv_indexPlayer) == null))) {
            lv_hatcheryGroup = libCOMI_gf_CM_TownHallUnits(lv_indexPlayer);
            auto1A7E7594_g = lv_hatcheryGroup;
            auto1A7E7594_u = 1;
            for ( ; auto1A7E7594_u <= UnitGroupCount(auto1A7E7594_g, c_unitCountAll) ; auto1A7E7594_u += BoolToInt(lv_indexTownHall == UnitGroupUnit(auto1A7E7594_g, auto1A7E7594_u)) ) {
                lv_indexTownHall = UnitGroupUnit(auto1A7E7594_g, auto1A7E7594_u);
                if ((DistanceBetweenPoints(PlayerStartLocation(lv_indexPlayer), UnitGetPosition(lv_indexTownHall)) < lv_distance)) {
                    lv_distance = DistanceBetweenPoints(PlayerStartLocation(lv_indexPlayer), UnitGetPosition(lv_indexTownHall));
                    lv_closestHatchery = lv_indexTownHall;
                }

            }
            if ((lv_closestHatchery != null)) {
                libCOMI_gf_ZerglingRespawnSetPrimaryHatchery(lv_closestHatchery);
                libCOMI_gv_cM_PrimaryTownHall[lv_indexPlayer] = lv_closestHatchery;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HatcheryPrimarySearch_Init () {
    libCOMI_gt_CM_HatcheryPrimarySearch = TriggerCreate("libCOMI_gt_CM_HatcheryPrimarySearch_Func");
    TriggerEnable(libCOMI_gt_CM_HatcheryPrimarySearch, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_HatcheryPrimarySearch, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_StartingTech
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_StartingTech_Func (bool testConds, bool runActions) {
    playergroup autoC927CB98_g;
    int autoC927CB98_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetAlliance(1, c_allianceIdPower, 2, true);
    PlayerSetAlliance(2, c_allianceIdPower, 1, true);
    autoC927CB98_g = libCOOC_gf_HumanPlayers(); 
    autoC927CB98_p = 1;
    for ( ; autoC927CB98_p <= PlayerGroupCount(autoC927CB98_g) ; autoC927CB98_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoC927CB98_g, autoC927CB98_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoC927CB98_g, autoC927CB98_p);
        libCOMI_gf_CM_StartingTechForHumanPlayer(lv_indexPlayer);
        libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(lv_indexPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_StartingTech_Init () {
    libCOMI_gt_CM_StartingTech = TriggerCreate("libCOMI_gt_CM_StartingTech_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoicePackDebug
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoicePackDebug_Func (bool testConds, bool runActions) {
    int autoA7A5BD22_catalog;
    int autoA7A5BD22_i;
    int auto76AAF890_catalog;
    int auto76AAF890_i;

    // Variable Declarations
    string lv_itReward;
    string lv_appReward;
    string lv_rewardStringIDCombine;

    // Variable Initialization
    lv_rewardStringIDCombine = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7A5BD22_catalog = c_gameCatalogReward;
    autoA7A5BD22_i = 1;
    for ( ; autoA7A5BD22_i <= CatalogEntryCount(c_gameCatalogReward) ; autoA7A5BD22_i += 1 ) {
        lv_itReward = CatalogEntryGet(autoA7A5BD22_catalog, autoA7A5BD22_i);
        if (((CatalogEntryScope(c_gameCatalogReward, lv_itReward) == "CRewardVoicePack") && (StringContains((lv_itReward), ("_" + (libCOOC_gf_ActiveCommanderForPlayer(1))), c_stringAnywhere, c_stringCase) == false))) {
            if ((PlayerHasReward(1, lv_itReward) == true)) {
                lv_rewardStringIDCombine = (((lv_itReward) + "_" + (libCOOC_gf_ActiveCommanderForPlayer(1))));
                TextExpressionSetToken("Param/Expression/lib_COMI_E45A8AE0", "A", StringToText((lv_itReward)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_E45A8AE0"), true);
                TextExpressionSetToken("Param/Expression/lib_COMI_BA6DF236", "A", StringToText(lv_rewardStringIDCombine));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_BA6DF236"), true);
                auto76AAF890_catalog = c_gameCatalogReward;
                auto76AAF890_i = 1;
                for ( ; auto76AAF890_i <= CatalogEntryCount(c_gameCatalogReward) ; auto76AAF890_i += 1 ) {
                    lv_appReward = CatalogEntryGet(auto76AAF890_catalog, auto76AAF890_i);
                    if ((CatalogEntryScope(c_gameCatalogReward, lv_appReward) == "CRewardVoicePack")) {
                        if (((lv_appReward) == lv_rewardStringIDCombine)) {
                            PlayerAddReward(1, lv_rewardStringIDCombine);
                            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_BD9298EE"), true);
                        }

                    }

                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoicePackDebug_Init () {
    libCOMI_gt_VoicePackDebug = TriggerCreate("libCOMI_gt_VoicePackDebug_Func");
    TriggerAddEventChatMessage(libCOMI_gt_VoicePackDebug, c_playerAny, "voicepackdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Hatchery Egg Models
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HatcheryEggModels_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_PrimaryTownHall[0] != null) && (TechTreeUpgradeCount(1, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 0.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn1On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn1Off");
        }
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 2.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn2On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn2Off");
        }
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 4.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn3On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn3Off");
        }
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 7.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn4On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn4Off");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HatcheryEggModels_Init () {
    libCOMI_gt_CM_HatcheryEggModels = TriggerCreate("libCOMI_gt_CM_HatcheryEggModels_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_HatcheryEggModels, 1, "ZerglingRespawnEggCheck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Hatchery Egg Births
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HatcheryEggBirths_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_PrimaryTownHall[0] != null) && (TechTreeUpgradeCount(1, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn1Off");
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn2Off");
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn3Off");
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn4Off");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HatcheryEggBirths_Init () {
    libCOMI_gt_CM_HatcheryEggBirths = TriggerCreate("libCOMI_gt_CM_HatcheryEggBirths_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_HatcheryEggBirths, 1, "ZerglingRespawnEggBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroDied
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroDied_Func (bool testConds, bool runActions) {
    playergroup autoABF82C79_g;
    int autoABF82C79_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoABF82C79_g = libCOOC_gf_HumanPlayers(); 
    autoABF82C79_p = 1;
    for ( ; autoABF82C79_p <= PlayerGroupCount(autoABF82C79_g) ; autoABF82C79_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoABF82C79_g, autoABF82C79_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoABF82C79_g, autoABF82C79_p);
        if ((EventUnit() == libCOMI_gv_cM_HeroUnit[lv_indexPlayer])) {
            libCOMI_gf_CM_HeroHandleDeath(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroDied_Init () {
    libCOMI_gt_CM_HeroDied = TriggerCreate("libCOMI_gt_CM_HeroDied_Func");
    TriggerAddEventUnitDied(libCOMI_gt_CM_HeroDied, UnitRefFromVariable("libCOMI_gv_cM_HeroUnit[1]"));
    TriggerAddEventUnitDied(libCOMI_gt_CM_HeroDied, UnitRefFromVariable("libCOMI_gv_cM_HeroUnit[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaRespawnBuyBack
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaRespawnBuyBack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_HeroReviveTargetLocation[EventPlayer()] = EventUnitTargetPoint();
    libNtve_gf_PlayerRemoveCooldown(EventPlayer(), libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer())));
    TriggerEnable(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, false);
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libCOOC_gf_CC_CommanderPlayer("TerranNova"), "450");
    UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[EventPlayer()], "TargetedRevive", libCOMI_gv_cM_HeroUnit[EventPlayer()], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaRespawnBuyBack_Init () {
    libCOMI_gt_CM_NovaRespawnBuyBack = TriggerCreate("libCOMI_gt_CM_NovaRespawnBuyBack_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_NovaRespawnBuyBack, null, AbilityCommand("NovaReviveInstantBuyback", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaRespawnBuyBackCostAdjustment
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_reviveTimer;
    int lv_reviveCostPerSecond;
    fixed lv_totalBuybackCost;

    // Variable Initialization
    lv_reviveCostPerSecond = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reviveTimer = UnitBehaviorDuration(libCOMI_gv_cM_HeroReviver[libCOOC_gf_CC_CommanderPlayer("TerranNova")], "NovaReviveTimer");
    lv_totalBuybackCost = (Round(lv_reviveTimer) * lv_reviveCostPerSecond);
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libCOOC_gf_CC_CommanderPlayer("TerranNova"), FixedToString(lv_totalBuybackCost, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment_Init () {
    libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment = TriggerCreate("libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment_Func");
    TriggerEnable(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroSpawn_Func (bool testConds, bool runActions) {
    playergroup autoC7F97A67_g;
    int autoC7F97A67_p;

    // Variable Declarations
    int lv_indexPlayer;
    point lv_spawnPoint;
    point lv_mineralPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC7F97A67_g = libCOOC_gf_HumanPlayers(); 
    autoC7F97A67_p = 1;
    for ( ; autoC7F97A67_p <= PlayerGroupCount(autoC7F97A67_g) ; autoC7F97A67_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoC7F97A67_g, autoC7F97A67_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoC7F97A67_g, autoC7F97A67_p);
        if ((libCOOC_gf_CC_CommanderHeroUnitType(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) != null)) {
            lv_spawnPoint = UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lv_indexPlayer));
            libCOMI_gf_CM_HeroCreateForPlayer(lv_spawnPoint, lv_indexPlayer, 270.0, 0);
            libCOUI_gf_SetHeroPanelUnit(1, UnitLastCreated(), lv_indexPlayer);
            UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[lv_indexPlayer], "ZergGenericDeath", libCOMI_gv_cM_HeroUnit[lv_indexPlayer], 1);
            UnitSetPosition(libCOMI_gv_cM_HeroUnit[lv_indexPlayer], Point(0.0, 0.0), false);
            UnitKill(libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
        }

        if ((libCOOC_gf_CC_CommanderHeroStructureType(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) != null)) {
            lv_mineralPoint = UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lv_indexPlayer)), 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            if ((UnitGroupCount(UnitGroup("ACHeroSpawnPlacement", lv_indexPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_spawnPoint = UnitGetPosition(UnitGroupUnit(UnitGroup("ACHeroSpawnPlacement", lv_indexPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1));
            }
            else {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_D32F9D56"), false);
                lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_mineralPoint, 13.0, UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lv_indexPlayer)));
            }
            libCOMI_gf_CM_HeroStructureCreateForPlayer(lv_spawnPoint, lv_indexPlayer, 270.0, 0);
            if ((TechTreeUpgradeCount(lv_indexPlayer, "NovaCommander", c_techCountCompleteOnly) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "NovaCoopGhostAcademyLandingIntro", UnitLastCreated(), 1);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroSpawn_Init () {
    libCOMI_gt_CM_HeroSpawn = TriggerCreate("libCOMI_gt_CM_HeroSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GlobalCasterInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_GlobalCasterInit_Func (bool testConds, bool runActions) {
    playergroup autoB36D32D9_g;
    int autoB36D32D9_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB36D32D9_g = PlayerGroupAll(); 
    autoB36D32D9_p = 1;
    for ( ; autoB36D32D9_p <= PlayerGroupCount(autoB36D32D9_g) ; autoB36D32D9_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoB36D32D9_g, autoB36D32D9_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoB36D32D9_g, autoB36D32D9_p);
        if ((PlayerType(lv_indexPlayer) == c_playerTypeUser) && (libCOOC_gf_CC_CommanderGlobalCastUnitType(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) != null)) {
            libCOMI_gf_CM_GlobalCasterCreateUnit(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_GlobalCasterInit_Init () {
    libCOMI_gt_CM_GlobalCasterInit = TriggerCreate("libCOMI_gt_CM_GlobalCasterInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AutoRevealRegionController
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AutoRevealRegionController_Func (bool testConds, bool runActions) {
    int autoF67ED6CB_ae;
    int autoF67ED6CB_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        autoF67ED6CB_ae = (libLbty_gv_autoRevealers.lv_count - 1);
        autoF67ED6CB_ai = 1;
        lv_i = 0;
        for ( ; ( (autoF67ED6CB_ai >= 0 && lv_i <= autoF67ED6CB_ae) || (autoF67ED6CB_ai <= 0 && lv_i >= autoF67ED6CB_ae) ) ; lv_i += autoF67ED6CB_ai ) {
            if ((UnitGroupCount(UnitGroup(null, libLbty_gv_autoRevealers.lv_triggeringPlayers[lv_i], libLbty_gv_autoRevealers.lv_triggeringRegions[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0)) {
                libCOMI_gf_EnableDisableRevealerCoop(libLbty_gv_autoRevealers.lv_revealers[lv_i], true);
            }
            else {
                libCOMI_gf_EnableDisableRevealerCoop(libLbty_gv_autoRevealers.lv_revealers[lv_i], false);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AutoRevealRegionController_Init () {
    libCOMI_gt_CM_AutoRevealRegionController = TriggerCreate("libCOMI_gt_CM_AutoRevealRegionController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GPReminderAbilityUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_GPReminderAbilityUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_GPReminderAbilityUsed_Init () {
    libCOMI_gt_CM_GPReminderAbilityUsed = TriggerCreate("libCOMI_gt_CM_GPReminderAbilityUsed_Func");
    TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SoASuperShield", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOAOrbitalStrikeActivate", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("VoidSentryBlackHole", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOADarkPylon", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOAShadowGuardCalldown", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SpawnToxicNest", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignProbeHelperInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignProbeHelperInit_Func (bool testConds, bool runActions) {
    unitgroup autoEE39304C_g;
    int autoEE39304C_u;

    // Variable Declarations
    unit lv_indexUnit;
    unitgroup lv_group;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_group = UnitGroup("Nexus", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_group, UnitGroup("Assimilator", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    autoEE39304C_g = lv_group;
    autoEE39304C_u = 1;
    for ( ; autoEE39304C_u <= UnitGroupCount(autoEE39304C_g, c_unitCountAll) ; autoEE39304C_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoEE39304C_g, autoEE39304C_u)) ) {
        lv_indexUnit = UnitGroupUnit(autoEE39304C_g, autoEE39304C_u);
        libNtve_gf_SendActorMessageToUnit(lv_indexUnit, "SetStatusBarOn 1 Workers");
    }
    TriggerEnable(libCOMI_gt_CM_CampaignProbeHelperUpdateCreated, true);
    TriggerEnable(libCOMI_gt_CM_CampaignProbeHelperUpdateConstructionFinishes, true);
    TriggerEnable(libCOMI_gt_CM_CampaignDroneHelperUpdateChangedOwner, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignProbeHelperInit_Init () {
    libCOMI_gt_CM_CampaignProbeHelperInit = TriggerCreate("libCOMI_gt_CM_CampaignProbeHelperInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignProbeHelperUpdateCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignProbeHelperUpdateCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }

        if (!((UnitTestState(EventUnitCreatedUnit(), c_unitStateUnderConstruction) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "Nexus") || (UnitGetType(EventUnitCreatedUnit()) == "Assimilator")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "SetStatusBarOn 1 Workers");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignProbeHelperUpdateCreated_Init () {
    libCOMI_gt_CM_CampaignProbeHelperUpdateCreated = TriggerCreate("libCOMI_gt_CM_CampaignProbeHelperUpdateCreated_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignProbeHelperUpdateCreated, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_CampaignProbeHelperUpdateCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignProbeHelperUpdateConstructionFinishes
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignProbeHelperUpdateConstructionFinishes_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Nexus") || (UnitGetType(EventUnitProgressUnit()) == "Assimilator")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitProgressUnit(), "SetStatusBarOn 1 Workers");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignProbeHelperUpdateConstructionFinishes_Init () {
    libCOMI_gt_CM_CampaignProbeHelperUpdateConstructionFinishes = TriggerCreate("libCOMI_gt_CM_CampaignProbeHelperUpdateConstructionFinishes_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignProbeHelperUpdateConstructionFinishes, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_CampaignProbeHelperUpdateConstructionFinishes, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignDroneHelperUpdateChangedOwner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignDroneHelperUpdateChangedOwner_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Nexus") || (UnitGetType(EventUnit()) == "Assimilator")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 1)) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetStatusBarOn 1 Workers");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetStatusBarOn 0 Workers");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignDroneHelperUpdateChangedOwner_Init () {
    libCOMI_gt_CM_CampaignDroneHelperUpdateChangedOwner = TriggerCreate("libCOMI_gt_CM_CampaignDroneHelperUpdateChangedOwner_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignDroneHelperUpdateChangedOwner, false);
    TriggerAddEventUnitChangeOwner(libCOMI_gt_CM_CampaignDroneHelperUpdateChangedOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_PlayerNeedPylon
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_PlayerNeedPylon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_newTooltip;
    fixed lv_used;
    fixed lv_made;
    fixed lv_limit;
    bool lv_transmissionDelivered;

    // Variable Initialization
    lv_newTooltip = StringExternal("Param/Value/lib_COMI_075E5731");

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2, true);
    TriggerEnable(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood3, true);
    TriggerEnable(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood4, true);
    TriggerEnable(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6, true);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((libCOMI_gv_cM_NeedPylonEnabled == true) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (TechTreeUnitCount(1, "Nexus", c_techCountQueuedOrBetter) > 0)) {
            lv_made = PlayerGetPropertyFixed(1, c_playerPropSuppliesMade);
            lv_used = PlayerGetPropertyFixed(1, c_playerPropSuppliesUsed);
            lv_limit = PlayerGetPropertyFixed(1, c_playerPropSuppliesLimit);
            if (((lv_made + (TechTreeUnitCount(1, "Pylon", c_techCountInProgressOnly) * StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Pylon", "Food", 1)))) < lv_limit) && ((lv_made + (TechTreeUnitCount(1, "Pylon", c_techCountInProgressOnly) * StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "Pylon", "Food", 1)))) <= ((lv_used + libCOMI_gv_cM_NeedPylonFoodRequired) - 0.1))) {
                if ((libCOMI_gv_cM_NeedPylonAbilityHighlightOn == false)) {
                    if ((lv_transmissionDelivered == false)) {
                        lv_transmissionDelivered = true;
                        TriggerQueueEnter();
                        libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
                        libCOMI_gf_SendTransmissionCampaign(null, "Tutorial|Line00143", c_transmissionDurationAdd, 0.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                        libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
                        TriggerQueueExit();
                    }
                    else {
                        libCOMI_gv_cM_NeedPylonAbilityHighlightOn = true;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_COMI_1142C38C"));
                        UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("ProtossBuild", 1), true);
                        CatalogFieldValueSet(c_gameCatalogButton, "Pylon", "Tooltip", 1, "Param/Value/lib_VoiC_F569C4E3");
                        libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 212, 134, c_anchorTopRight, 11, -34);
                        libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
                    }
                }

            }
            else {
                if ((libCOMI_gv_cM_NeedPylonAbilityHighlightOn == true)) {
                    libCOMI_gv_cM_NeedPylonAbilityHighlightOn = false;
                    UIClearMessages(PlayerGroupSingle(1), c_messageAreaDirective);
                    UISetButtonHighlighted(PlayerGroupSingle(1), AbilityCommand("ProtossBuild", 1), false);
                    CatalogFieldValueSet(c_gameCatalogButton, "Pylon", "Tooltip", 1, "Button/Tooltip/Pylon");
                    libNtve_gf_StopPulsingScreenImage(1);
                    libNtve_gf_HideScreenImage(false, 1);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_PlayerNeedPylon_Init () {
    libCOMI_gt_CM_PlayerNeedPylon = TriggerCreate("libCOMI_gt_CM_PlayerNeedPylon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_PlayerNeedPylonButtonClicked (Food 2)
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_NeedPylonFoodRequired2Index += 1;
    lv_localIndex = libCOMI_gv_cM_NeedPylonFoodRequired2Index;
    libCOMI_gv_cM_NeedPylonFoodRequired = MaxI(libCOMI_gv_cM_NeedPylonFoodRequired, 2);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libCOMI_gv_cM_NeedPylonFoodRequired2Index) && (libCOMI_gv_cM_NeedPylonFoodRequired == 2)) {
        libCOMI_gv_cM_NeedPylonFoodRequired = 1;
        libCOMI_gv_cM_NeedPylonFoodRequired2Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2_Init () {
    libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2 = TriggerCreate("libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2_Func");
    TriggerEnable(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2, false);
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2, 1, "Zealot");
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2, 1, "Sentry");
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2, 1, "Stalker");
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2, 1, "HighTemplar");
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2, 1, "DarkTemplar");
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2, 1, "WarpPrism");
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2, 1, "Phoenix");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_PlayerNeedPylonButtonClicked (Food 3)
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_NeedPylonFoodRequired3Index += 1;
    lv_localIndex = libCOMI_gv_cM_NeedPylonFoodRequired3Index;
    libCOMI_gv_cM_NeedPylonFoodRequired = MaxI(libCOMI_gv_cM_NeedPylonFoodRequired, 3);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libCOMI_gv_cM_NeedPylonFoodRequired3Index) && (libCOMI_gv_cM_NeedPylonFoodRequired == 3)) {
        libCOMI_gv_cM_NeedPylonFoodRequired = 1;
        libCOMI_gv_cM_NeedPylonFoodRequired3Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood3_Init () {
    libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood3 = TriggerCreate("libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood3_Func");
    TriggerEnable(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood3, false);
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood3, 1, "VoidRay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_PlayerNeedPylonButtonClicked (Food 4)
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_NeedPylonFoodRequired4Index += 1;
    lv_localIndex = libCOMI_gv_cM_NeedPylonFoodRequired4Index;
    libCOMI_gv_cM_NeedPylonFoodRequired = MaxI(libCOMI_gv_cM_NeedPylonFoodRequired, 4);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libCOMI_gv_cM_NeedPylonFoodRequired4Index) && (libCOMI_gv_cM_NeedPylonFoodRequired == 4)) {
        libCOMI_gv_cM_NeedPylonFoodRequired = 1;
        libCOMI_gv_cM_NeedPylonFoodRequired4Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood4_Init () {
    libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood4 = TriggerCreate("libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood4_Func");
    TriggerEnable(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood4, false);
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood4, 1, "Immortal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_PlayerNeedPylonButtonClicked (Food 6)
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_NeedPylonFoodRequired6Index += 1;
    lv_localIndex = libCOMI_gv_cM_NeedPylonFoodRequired6Index;
    libCOMI_gv_cM_NeedPylonFoodRequired = MaxI(libCOMI_gv_cM_NeedPylonFoodRequired, 6);
    Wait(15.0, c_timeGame);
    if ((lv_localIndex == libCOMI_gv_cM_NeedPylonFoodRequired6Index) && (libCOMI_gv_cM_NeedPylonFoodRequired == 6)) {
        libCOMI_gv_cM_NeedPylonFoodRequired = 1;
        libCOMI_gv_cM_NeedPylonFoodRequired6Index = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6_Init () {
    libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6 = TriggerCreate("libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6_Func");
    TriggerEnable(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6, false);
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6, 1, "Colossus");
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6, 1, "Tempest");
    TriggerAddEventButtonPressed(libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6, 1, "Carrier");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionRaynorHyperion
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionRaynorHyperion_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("RaynorCommander_Hyperion", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionRaynorHyperion_Init () {
    libCOMI_gt_CM_AbilityTransmissionRaynorHyperion = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionRaynorHyperion_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionRaynorHyperion, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionRaynorHyperion, null, AbilityCommand("VoidCoopSummonHyperion", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionRaynorBansheesUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("RaynorCommander_Banshee", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed_Init () {
    libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed, null, AbilityCommand("BansheeAirstrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionSwannDrone
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionSwannDrone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("SwannCommander_Drone", -1), PlayerGroupAll());
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), EventPlayer(), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(EventPlayer())), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionSwannDrone_Init () {
    libCOMI_gt_CM_AbilityTransmissionSwannDrone = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionSwannDrone_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannDrone, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionSwannDrone, null, AbilityCommand("VespeneDroneCast", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionSwannLaserDrill
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("SwannCommander_LaserDrill", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill_Init () {
    libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill, null, AbilityCommand("ConstructDrakkenLaserDrillCoop", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionSwannCombatDropUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("SwannCommander_Delivery", -1), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed_Init () {
    libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed, null, AbilityCommand("SpecialDelivery", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKerriganCrushingGrip
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("KerriganCommander_CrushingGrip", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip_Init () {
    libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip, null, AbilityCommand("KerriganVoidCoopCrushingGripWave", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKerriganAssimilation
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("KerriganCommander_Assimilation", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation_Init () {
    libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation, null, AbilityCommand("KerriganVoidCoopEconDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionZagaraRoachDrop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("ZagaraCommander_Roach", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop_Init () {
    libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop, null, AbilityCommand("ZagaraVoidCoopMassRoachDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionArtanisSuperShields
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(EventPlayer());
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("ArtanisCommander_Shield", -1), PlayerGroupAll());
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), EventPlayer(), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(EventPlayer())), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields_Init () {
    libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields, null, AbilityCommand("SoASuperShield", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionVorazunTimeStop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(EventPlayer());
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("VorazunCommander_TimeStop", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop_Init () {
    libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop, null, AbilityCommand("SOATimeFreeze", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKaraxPassiveChronoBoost
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((((TechTreeUpgradeCount(1, "CommanderLevel", c_techCountQueuedOrBetter) > 1) && (TechTreeUpgradeCount(1, "KaraxCommander", c_techCountQueuedOrBetter) >= 1)) || ((TechTreeUpgradeCount(2, "CommanderLevel", c_techCountQueuedOrBetter) > 1) && (TechTreeUpgradeCount(2, "KaraxCommander", c_techCountQueuedOrBetter) >= 1))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 35.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(libCOOC_gf_CC_CommanderPlayer("ProtossKarax")), SoundLink("KaraxCommander_ChronoPassive", -1), PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Init () {
    libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKaraxChronoMap
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("KaraxCommander_Chrono", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap_Init () {
    libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap, null, AbilityCommand("SOAMapWideChrono", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAbathurMend
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAbathurMend_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AbathurCommander_Mend", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAbathurMend_Init () {
    libCOMI_gt_CM_AbilityTransmissionAbathurMend = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAbathurMend_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAbathurMend, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionAbathurMend, null, AbilityCommand("AbathurMend", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAbathurNestReminder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAbathurNestReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_abathurPlayer;
    bool lv_belowStandardCap;
    bool lv_belowFinalCap;
    const fixed lv_c_StandardCapAmount = 5.0;

    // Variable Initialization
    lv_belowStandardCap = true;
    lv_belowFinalCap = true;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathurPlayer = libCOOC_gf_CC_CommanderPlayer("ZergAbathur");
    while (true) {
        Wait(5.0, c_timeGame);
        if ((UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
                lv_belowStandardCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_abathurPlayer, lv_abathurPlayer, SoundLink("AbathurCommander_ToxicNest", -1), PlayerGroupSingle(lv_abathurPlayer));
                continue;
            }

        }
        else if ((UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax) <= (lv_c_StandardCapAmount+2.0))) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) < UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
            lv_belowFinalCap = true;
            continue;
        }
        else if ((lv_belowFinalCap == true) && (UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gf_CM_GlobalCasterUnitForCommander("ZergAbathur"), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
                lv_belowFinalCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_abathurPlayer, lv_abathurPlayer, SoundLink("AbathurCommander_ToxicNest", -1), PlayerGroupSingle(lv_abathurPlayer));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAbathurNestReminder_Init () {
    libCOMI_gt_CM_AbilityTransmissionAbathurNestReminder = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAbathurNestReminder_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAbathurNestReminder, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakEmpower
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAlarakEmpower_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_EmpowerMe", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAlarakEmpower_Init () {
    libCOMI_gt_CM_AbilityTransmissionAlarakEmpower = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAlarakEmpower_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakEmpower, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionAlarakEmpower, null, AbilityCommand("AlarakEmpower", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakDeathFleet
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_DeathFleet", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet_Init () {
    libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet, null, AbilityCommand("AlarakACSummonDeathfleetTarget", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakOvercharge
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitTargetUnit() != null) && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit()))) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_StructureOverchargeAlly", -1), PlayerGroupAll());
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_StructureOvercharge", -1), PlayerGroupAll());
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge_Init () {
    libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge, null, AbilityCommand("AlarakStructureOvercharge", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakSacrifice
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), EventPlayer(), SoundLink("AlarakCommander_Sacrifice", -1), PlayerGroupSingle(EventPlayer()));
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice_Init () {
    libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice, 1, "AlarakTheStrongestSurviveSearchImpact");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice, 2, "AlarakTheStrongestSurviveSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaBombingRun
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionNovaBombingRun_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_GriffinAirstrike", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionNovaBombingRun_Init () {
    libCOMI_gt_CM_AbilityTransmissionNovaBombingRun = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionNovaBombingRun_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaBombingRun, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionNovaBombingRun, null, AbilityCommand("NovaGriffinBombingRunExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaTransport
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionNovaTransport_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_GriffinAirlift", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionNovaTransport_Init () {
    libCOMI_gt_CM_AbilityTransmissionNovaTransport = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionNovaTransport_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaTransport, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionNovaTransport, null, AbilityCommand("NovaGriffinTransportLoadUnits", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaDMatrix
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionNovaDMatrix_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_DefensiveMatrix", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionNovaDMatrix_Init () {
    libCOMI_gt_CM_AbilityTransmissionNovaDMatrix = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionNovaDMatrix_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaDMatrix, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionNovaDMatrix, null, AbilityCommand("NovaDefensiveMatrixDrone", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaNukeReady
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionNovaNukeReady_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_novaPlayer;

    // Variable Initialization
    lv_novaPlayer = libCOOC_gf_CC_CommanderPlayer("TerranNova");

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOOC_gf_CC_PerkStateCheck("NovaUnlockUltimates", libCOOC_ge_CC_PerkState_Active, "TerranNova", lv_novaPlayer) == false)) {
        return true;
    }

    while (true) {
        while (!((UnitAbilityChargeInfo(libCOMI_gv_cM_HeroUnit[lv_novaPlayer], AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityChargeInfo(libCOMI_gv_cM_HeroUnit[lv_novaPlayer], AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft) >= 1.0))) {
            Wait(1.0, c_timeGame);
        }
        if (((libCOMI_gv_cM_HeroUnit[lv_novaPlayer] == null) || (UnitIsAlive(libCOMI_gv_cM_HeroUnit[lv_novaPlayer]) == true))) {
            libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(lv_novaPlayer), SoundLink("NovaCommander_NukeReady", -1), PlayerGroupSingle(lv_novaPlayer));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionNovaNukeReady_Init () {
    libCOMI_gt_CM_AbilityTransmissionNovaNukeReady = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionNovaNukeReady_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaNukeReady, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovAleksander
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionStukovAleksander_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_Aleksander", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionStukovAleksander_Init () {
    libCOMI_gt_CM_AbilityTransmissionStukovAleksander = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionStukovAleksander_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovAleksander, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionStukovAleksander, null, AbilityCommand("StukovSummonAleksander", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovApocalisk
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionStukovApocalisk_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_Apocalisk", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionStukovApocalisk_Init () {
    libCOMI_gt_CM_AbilityTransmissionStukovApocalisk = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionStukovApocalisk_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovApocalisk, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionStukovApocalisk, null, AbilityCommand("StukovSummonApocalisk", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovInfestStructure
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitTargetUnit() != null) && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit()))) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_InfestStructure", -1), PlayerGroupAll());
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_InfestStructureSelf", -1), PlayerGroupAll());
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure_Init () {
    libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure, null, AbilityCommand("SIStukovInfestStructure", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure, null, AbilityCommand("SIStukovInfestStructureUpgraded", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateTalis
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_AdeptChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis, null, AbilityCommand("FenixTalisAdeptMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateKaldalis
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis, null, AbilityCommand("FenixKaldalisZealotMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateTaldarin
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ImmortalChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin, null, AbilityCommand("FenixTaldarinImmortalMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateWarbringer
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ColossusChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer, null, AbilityCommand("FenixWarbringerColossusMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateMojo
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ScoutChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo, null, AbilityCommand("FenixMojoScoutMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateClolarion
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_CarrierChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion, null, AbilityCommand("FenixClolarionCarrierMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixZealotSuit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] == false) && (TechTreeUpgradeCount(EventPlayer(), "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_E1D5A0CD"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCOMI_gv_cM_FenixVOTransmissionFirstPlay[1] == true) || (RandomInt(1, 100) <= libCOMI_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCOMI_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCOMI_gv_cM_FenixVOTransmissionFirstPlay[1] = false;
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotSuit", -1), PlayerGroupAll());
        TimerStart(libCOMI_gv_cM_FenixVOTransmissionTimer, libCOMI_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit, null, AbilityCommand("SOASummonFenix", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixDragoonSuit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] == false) && (TechTreeUpgradeCount(EventPlayer(), "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_F5F41020"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCOMI_gv_cM_FenixVOTransmissionFirstPlay[2] == true) || (RandomInt(1, 100) <= libCOMI_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCOMI_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCOMI_gv_cM_FenixVOTransmissionFirstPlay[2] = false;
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_DragoonSuit", -1), PlayerGroupAll());
        TimerStart(libCOMI_gv_cM_FenixVOTransmissionTimer, libCOMI_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit, null, AbilityCommand("SOASummonFenixDragoon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixArbiterSuit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] == false) && (TechTreeUpgradeCount(EventPlayer(), "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(libCOOC_gf_CC_CommanderPlayer("ProtossFenix")), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_33A1F80A"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCOMI_gv_cM_FenixVOTransmissionFirstPlay[3] == true) || (RandomInt(1, 100) <= libCOMI_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCOMI_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCOMI_gv_cM_FenixVOTransmissionFirstPlay[3] = false;
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ArbiterSuit", -1), PlayerGroupAll());
        TimerStart(libCOMI_gv_cM_FenixVOTransmissionTimer, libCOMI_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit, null, AbilityCommand("SOASummonFenixArbiter", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixMassRecall
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixMassRecall_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_MassRecall", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixMassRecall_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixMassRecall = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixMassRecall_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixMassRecall, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixMassRecall, null, AbilityCommand("ArbiterMPRecall", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixHeroDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroTransmissionFenixHeroDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() != EventUnit()))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMI_gv_cM_Fenix_HeroGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "FenixCoop")) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    if ((UnitGetType(EventUnit()) == "FenixDragoon")) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_DragoonSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    if ((UnitGetType(EventUnit()) == "FenixArbiter")) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ArbiterSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroTransmissionFenixHeroDies_Init () {
    libCOMI_gt_CM_HeroTransmissionFenixHeroDies = TriggerCreate("libCOMI_gt_CM_HeroTransmissionFenixHeroDies_Func");
    TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixHeroDies, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_HeroTransmissionFenixHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixHeroRepaired
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired_Func (bool testConds, bool runActions) {
    string auto895F5F62_val;

    // Conditions
    if (testConds) {
        if (!(((EventUnitBehavior() == "SOASummonFenixCooldownDummy") || (EventUnitBehavior() == "SOASummonFenixDragoonCooldownDummy") || (EventUnitBehavior() == "SOASummonFenixArbiterCooldownDummy")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto895F5F62_val = UnitGetType(EventUnit());
    if (auto895F5F62_val == UnitGetType(libCOMI_gv_cM_Fenix_Suits[1])) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotSuitReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    else if (auto895F5F62_val == UnitGetType(libCOMI_gv_cM_Fenix_Suits[2])) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_DragoonSuitReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    else if (auto895F5F62_val == UnitGetType(libCOMI_gv_cM_Fenix_Suits[3])) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ArbiterSuitReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired_Init () {
    libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired = TriggerCreate("libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired_Func");
    TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired, null, null, c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixNameChange
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroTransmissionFenixNameChange_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroTransmissionFenixNameChange_Init () {
    libCOMI_gt_CM_HeroTransmissionFenixNameChange = TriggerCreate("libCOMI_gt_CM_HeroTransmissionFenixNameChange_Func");
    TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixNameChange, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_HeroTransmissionFenixNameChange, null, AbilityCommand("ForgeResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceSent
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOResourceSent_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceTradeAmount(c_resourceTypeMinerals) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOVespeneSent), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if ((EventResourceTradeAmount(c_resourceTypeVespene) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOMineralsSent), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if (true) {
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOResourcesSent), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), EventPlayer(), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(EventPlayer())), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOResourceSent_Init () {
    libCOMI_gt_CM_VOResourceSent = TriggerCreate("libCOMI_gt_CM_VOResourceSent_Func");
    TriggerEnable(libCOMI_gt_CM_VOResourceSent, false);
    TriggerAddEventResourceTrade(libCOMI_gt_CM_VOResourceSent, c_playerAny, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceRequest
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOResourceRequest_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceRequestAmount(c_resourceTypeMinerals) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOVespeneRequested), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if ((EventResourceRequestAmount(c_resourceTypeVespene) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOMineralsRequested), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if (true) {
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOResourcesRequested), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOResourceRequest_Init () {
    libCOMI_gt_CM_VOResourceRequest = TriggerCreate("libCOMI_gt_CM_VOResourceRequest_Func");
    TriggerEnable(libCOMI_gt_CM_VOResourceRequest, false);
    TriggerAddEventResourceRequest(libCOMI_gt_CM_VOResourceRequest, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemySpotted
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOEnemySpotted_Func (bool testConds, bool runActions) {
    string auto14B6B300_val;

    // Variable Declarations
    int lv_enemyPlayer;
    int lv_userPlayer;
    unit lv_enemyUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventUnitTarget())) == true)) {
        lv_userPlayer = UnitGetOwner(EventUnitTarget());
    }
    else if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
        lv_enemyPlayer = UnitGetOwner(EventUnitTarget());
        lv_enemyUnit = EventUnitTarget();
    }
    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true)) {
        lv_userPlayer = EventPlayer();
    }
    else if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
        lv_enemyPlayer = EventPlayer();
        lv_enemyUnit = EventUnit();
    }
    if (((lv_enemyPlayer == 0) || (lv_userPlayer == 0))) {
        return true;
    }

    if (((lv_enemyUnit == null) || (PlayerRace(3) != libCOMI_gf_GetUnitRace(lv_enemyUnit)))) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto14B6B300_val = PlayerRace(lv_enemyPlayer);
    if (auto14B6B300_val == "Prot") {
        libCOMI_gf_CM_CommanderVOSend(lv_userPlayer, libCOOC_gf_CC_PlayerAlly(lv_userPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsProtoss), PlayerGroupAll());
    }
    else if (auto14B6B300_val == "Terr") {
        libCOMI_gf_CM_CommanderVOSend(0, libCOOC_gf_CC_PlayerAlly(lv_userPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsTerran), PlayerGroupAll());
    }
    else if (auto14B6B300_val == "Zerg") {
        libCOMI_gf_CM_CommanderVOSend(0, libCOOC_gf_CC_PlayerAlly(lv_userPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsZerg), PlayerGroupAll());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOEnemySpotted_Init () {
    libCOMI_gt_CM_VOEnemySpotted = TriggerCreate("libCOMI_gt_CM_VOEnemySpotted_Func");
    TriggerEnable(libCOMI_gt_CM_VOEnemySpotted, false);
    TriggerAddEventUnitAttacked2(libCOMI_gt_CM_VOEnemySpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOUnitsLostCheck
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOUnitsLostCheck_Func (bool testConds, bool runActions) {
    playergroup auto6F85AF09_g;
    int auto6F85AF09_p;
    playergroup autoBA9689F6_g;
    int autoBA9689F6_p;
    unitgroup auto7D09EFD3_g;
    int auto7D09EFD3_u;

    // Variable Declarations
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_lastKnownArmySize;
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_highestArmySize;
    fixed lv_currentArmySize;
    int lv_indexPlayer;
    unit lv_indexUnit;
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_percentThreshold;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F85AF09_g = libCOOC_gf_HumanPlayers(); 
    auto6F85AF09_p = 1;
    for ( ; auto6F85AF09_p <= PlayerGroupCount(auto6F85AF09_g) ; auto6F85AF09_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto6F85AF09_g, auto6F85AF09_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto6F85AF09_g, auto6F85AF09_p);
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "ZergZagara")) {
            lv_percentThreshold[lv_indexPlayer] = 0.2;
        }
        else {
            lv_percentThreshold[lv_indexPlayer] = 0.4;
        }
    }
    while (true) {
        Wait(10.0, c_timeGame);
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        autoBA9689F6_g = libCOOC_gf_HumanPlayers(); 
        autoBA9689F6_p = 1;
        for ( ; autoBA9689F6_p <= PlayerGroupCount(autoBA9689F6_g) ; autoBA9689F6_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoBA9689F6_g, autoBA9689F6_p)) ) {
            lv_indexPlayer = PlayerGroupPlayer(autoBA9689F6_g, autoBA9689F6_p);
            lv_currentArmySize = 0;
            auto7D09EFD3_g = UnitGroup(null, lv_indexPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            auto7D09EFD3_u = 1;
            for ( ; auto7D09EFD3_u <= UnitGroupCount(auto7D09EFD3_g, c_unitCountAll) ; auto7D09EFD3_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto7D09EFD3_g, auto7D09EFD3_u)) ) {
                lv_indexUnit = UnitGroupUnit(auto7D09EFD3_g, auto7D09EFD3_u);
                if (((UnitTestState(lv_indexUnit, c_unitStateUsingSupply) == false) || ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true) && (libNtve_gf_UnitIsInsideTransport(lv_indexUnit) == false)))) {
                    continue;
                }

                lv_currentArmySize += UnitGetPropertyFixed(lv_indexUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
            }
            if ((lv_currentArmySize > lv_highestArmySize[lv_indexPlayer])) {
                lv_highestArmySize[lv_indexPlayer] = lv_currentArmySize;
                continue;
            }

            if (((lv_lastKnownArmySize[lv_indexPlayer] - lv_currentArmySize) >= 10.0) && ((lv_currentArmySize / lv_highestArmySize[lv_indexPlayer]) <= lv_percentThreshold[lv_indexPlayer]) && ((lv_highestArmySize[lv_indexPlayer] - lv_currentArmySize) >= 20.0)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, libCOOC_gf_CC_PlayerAlly(lv_indexPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOArmyLost), PlayerGroupAll());
                Wait(60.0, c_timeGame);
                TriggerExecute(libCOMI_gt_CM_VOUnitsLostCheck, true, false);
                return true;
            }

            lv_lastKnownArmySize[lv_indexPlayer] = lv_currentArmySize;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOUnitsLostCheck_Init () {
    libCOMI_gt_CM_VOUnitsLostCheck = TriggerCreate("libCOMI_gt_CM_VOUnitsLostCheck_Func");
    TriggerEnable(libCOMI_gt_CM_VOUnitsLostCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemyCloakedSpotted
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOEnemyCloakedSpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_userPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitFilterMatch(EventUnitTarget(), EventPlayer(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventUnitTarget())) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false) || (TriggerQueueIsEmpty() == false))) {
        return true;
    }

    lv_userPlayer = EventPlayer();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconDetectPing", UnitGetPosition(EventUnitTarget()), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 10.0, 270.0);
    libCOMI_gf_SendMissionTransmission("CloakedUnitsSpotted", true, lv_userPlayer);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOEnemyCloakedSpotted_Init () {
    libCOMI_gt_CM_VOEnemyCloakedSpotted = TriggerCreate("libCOMI_gt_CM_VOEnemyCloakedSpotted_Func");
    TriggerEnable(libCOMI_gt_CM_VOEnemyCloakedSpotted, false);
    TriggerAddEventUnitAttacked2(libCOMI_gt_CM_VOEnemyCloakedSpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TransmissionSend
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TransmissionSend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 1);
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), libCOMI_gv_cM_TransmissionSource) == true)) {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", libCOOC_gf_CC_CommanderGender(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(libCOMI_gv_cM_TransmissionSource))));
        }

        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 1);
    }
    else {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", c_genderDefault);
        }

    }
    libCOMI_gf_CM_TransmissionUpdateConvoPlayers(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1));
    ConversationDataRun(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1), libCOOC_gf_NondefeatedPlayers(), c_conversationSkipNone, true);
    while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((RandomInt(1, 100) <= UserDataGetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "ResponseChance", 1))) {
        ConversationDataRun("acResponses", PlayerGroupAll(), c_conversationSkipNone, true);
        while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
            Wait(0.0625, c_timeGame);
        }
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 0);
    libCOMI_gv_cM_TransmissionCurrentType = null;
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), libCOMI_gv_cM_TransmissionSource) == true)) {
        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 0);
    }

    libCOMI_gv_cM_TransmissionCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TransmissionSend_Init () {
    libCOMI_gt_CM_TransmissionSend = TriggerCreate("libCOMI_gt_CM_TransmissionSend_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SendTransmissionCampaignTick
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SendTransmissionCampaignTick_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignIndex == 0) && (libCOMI_gv_cM_SendTransmissionCampaignPlayingTick > 0)) {
            libCOMI_gv_cM_SendTransmissionCampaignPlayingTick -= 1;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SendTransmissionCampaignTick_Init () {
    libCOMI_gt_CM_SendTransmissionCampaignTick = TriggerCreate("libCOMI_gt_CM_SendTransmissionCampaignTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DropPod_Zerg_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DropPod_Zerg_DontWait_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_DropPod_Zerg_Wait(libCOMI_gv_cM_DropPod_TP_Location, libCOMI_gv_cM_DropPod_TP_Units, libCOMI_gv_cM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DropPod_Zerg_DontWait_Init () {
    libCOMI_gt_CM_DropPod_Zerg_DontWait = TriggerCreate("libCOMI_gt_CM_DropPod_Zerg_DontWait_Func");
    TriggerEnable(libCOMI_gt_CM_DropPod_Zerg_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DropPod_Terran_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DropPod_Terran_DontWait_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_DropPod_Terran_Wait(libCOMI_gv_cM_DropPod_TP_Location, libCOMI_gv_cM_DropPod_TP_Units, libCOMI_gv_cM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DropPod_Terran_DontWait_Init () {
    libCOMI_gt_CM_DropPod_Terran_DontWait = TriggerCreate("libCOMI_gt_CM_DropPod_Terran_DontWait_Func");
    TriggerEnable(libCOMI_gt_CM_DropPod_Terran_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitTeaching
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitTeaching_Func (bool testConds, bool runActions) {
    unitgroup autoD03D3C7E_g;
    int autoD03D3C7E_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD03D3C7E_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD03D3C7E_u = 1;
    for ( ; autoD03D3C7E_u <= UnitGroupCount(autoD03D3C7E_g, c_unitCountAll) ; autoD03D3C7E_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoD03D3C7E_g, autoD03D3C7E_u)) ) {
        lv_indexUnit = UnitGroupUnit(autoD03D3C7E_g, autoD03D3C7E_u);
        if (((UnitGetOwner(lv_indexUnit) == 1) || (UnitGetOwner(lv_indexUnit) == 2))) {
            libCOMI_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
            libCOMI_gf_CM_ApplyCampaignTeachingToUnit(lv_indexUnit);
        }

        if (((UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) || (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            libCOMI_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
        }

    }
    TriggerEnable(libCOMI_gt_CM_CampaignUnitCreated, true);
    TriggerEnable(libCOMI_gt_CM_CampaignUnitChangeOwner, true);
    TriggerEnable(libCOMI_gt_CM_CampaignUnitInfoUnitMorphes, true);
    TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillCreated, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitTeaching_Init () {
    libCOMI_gt_CM_CampaignUnitTeaching = TriggerCreate("libCOMI_gt_CM_CampaignUnitTeaching_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitCreated_Init () {
    libCOMI_gt_CM_CampaignUnitCreated = TriggerCreate("libCOMI_gt_CM_CampaignUnitCreated_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitCreated, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_CampaignUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignCyberneticsSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignCyberneticsSelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CyberneticsCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCOMI_gt_CM_CampaignCyberneticsDestroyed, false);
    libCOOC_gv_pCX_UpgradesTaught = true;
    libNtve_gf_KillModel(libCOMI_gv_cM_UpgradeReticle);
    TextTagDestroy(libCOMI_gv_cM_UpgradeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignCyberneticsSelected_Init () {
    libCOMI_gt_CM_CampaignCyberneticsSelected = TriggerCreate("libCOMI_gt_CM_CampaignCyberneticsSelected_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignCyberneticsSelected, false);
    TriggerAddEventUnitSelected(libCOMI_gt_CM_CampaignCyberneticsSelected, null, 1, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignCybCoreBuilding
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignCybCoreBuilding_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CyberneticsCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCOMI_gv_cM_CybCoreTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignCybCoreBuilding_Init () {
    libCOMI_gt_CM_CampaignCybCoreBuilding = TriggerCreate("libCOMI_gt_CM_CampaignCybCoreBuilding_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignCybCoreBuilding, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignCybCoreBuilding, null, AbilityCommand("CyberneticsCoreResearch", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignCyberneticsDestroyed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignCyberneticsDestroyed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCOMI_gt_CM_CampaignCyberneticsSelected, false);
    libNtve_gf_KillModel(libCOMI_gv_cM_UpgradeReticle);
    TextTagDestroy(libCOMI_gv_cM_UpgradeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignCyberneticsDestroyed_Init () {
    libCOMI_gt_CM_CampaignCyberneticsDestroyed = TriggerCreate("libCOMI_gt_CM_CampaignCyberneticsDestroyed_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignCyberneticsDestroyed, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_CampaignCyberneticsDestroyed, UnitRefFromVariable("libCOMI_gv_cM_UpgradeUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignLaserDrillCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignLaserDrillCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeGame);
    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignLaserDrillCreated_Init () {
    libCOMI_gt_CM_CampaignLaserDrillCreated = TriggerCreate("libCOMI_gt_CM_CampaignLaserDrillCreated_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillCreated, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignLaserDrillCreated, null, AbilityCommand("ConstructDrakkenLaserDrillCoop", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignLaserDrillSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignLaserDrillSelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCOMI_gv_cM_DrillTextTagCreated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignLaserDrillSelected_Init () {
    libCOMI_gt_CM_CampaignLaserDrillSelected = TriggerCreate("libCOMI_gt_CM_CampaignLaserDrillSelected_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillSelected, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignLaserDrillSelected, null, AbilityCommand("DrakkenLaserDrillResearch", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignLaserDrillDamaged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignLaserDrillDamaged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DamagedDrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCOMI_gv_cM_DrillTextTagCreated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignLaserDrillDamaged_Init () {
    libCOMI_gt_CM_CampaignLaserDrillDamaged = TriggerCreate("libCOMI_gt_CM_CampaignLaserDrillDamaged_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillDamaged, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignLaserDrillDamaged, null, AbilityCommand("BrokenDrakkenLaserDrill", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignSolarForgeSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignSolarForgeSelected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SolarForge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCOMI_gv_cM_SolarForgeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignSolarForgeSelected_Init () {
    libCOMI_gt_CM_CampaignSolarForgeSelected = TriggerCreate("libCOMI_gt_CM_CampaignSolarForgeSelected_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignSolarForgeSelected, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignSolarForgeSelected, null, AbilityCommand("SolarForgeResearch", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitChangeOwner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitChangeOwner_Init () {
    libCOMI_gt_CM_CampaignUnitChangeOwner = TriggerCreate("libCOMI_gt_CM_CampaignUnitChangeOwner_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(libCOMI_gt_CM_CampaignUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitInfoUnitMorphes
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Init () {
    libCOMI_gt_CM_CampaignUnitInfoUnitMorphes = TriggerCreate("libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitInfoUnitMorphes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionPerfLog
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionPerfLog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeReal);
        PerfTestGetFPS();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionPerfLog_Init () {
    libCOMI_gt_CM_CampaignMissionPerfLog = TriggerCreate("libCOMI_gt_CM_CampaignMissionPerfLog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionInitialize
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionInitialize_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerExecute(libCOMI_gt_CM_CoopAI_InitAIDebugging, true, false);
        TriggerExecute(libCOMI_gt_CM_DebugGiveOfflineControl, true, false);
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_9E760929"), false);
    libCOMI_gf_CM_CampaignMissionInit();
    libCOOC_gf_CC_StatRecordMapStart();
    TriggerExecute(libCOMI_gv_cM_CampaignMissionStartTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionInitialize_Init () {
    libCOMI_gt_CM_CampaignMissionInitialize = TriggerCreate("libCOMI_gt_CM_CampaignMissionInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionPerfTestEnable
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionPerfTestEnable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_680811E4"), true);
    libCOMI_gv_cM_CampaignMissionPerfTest = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionPerfTestEnable_Init () {
    libCOMI_gt_CM_CampaignMissionPerfTestEnable = TriggerCreate("libCOMI_gt_CM_CampaignMissionPerfTestEnable_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_CampaignMissionPerfTestEnable, c_playerAny, "logperf", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionIntroZoomIn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionIntroZoomIn_Func (bool testConds, bool runActions) {
    playergroup auto3DF840ED_g;
    int auto3DF840ED_p;

    // Variable Declarations
    fixed lv_originalDistance;
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    auto3DF840ED_g = libCOOC_gf_HumanPlayers(); 
    auto3DF840ED_p = 1;
    for ( ; auto3DF840ED_p <= PlayerGroupCount(auto3DF840ED_g) ; auto3DF840ED_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto3DF840ED_g, auto3DF840ED_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto3DF840ED_g, auto3DF840ED_p);
        lv_originalDistance = CameraGetDistance(lv_indexPlayer);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, (lv_originalDistance+8.0), 0.0, -1, 10.0);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, lv_originalDistance, 1.5, -1, 10.0);
    }
    Wait(1.5, c_timeGame);
    libCOMI_gf_CinematicModeCampaign(false, 1.0, false);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionIntroZoomIn_Init () {
    libCOMI_gt_CM_CampaignMissionIntroZoomIn = TriggerCreate("libCOMI_gt_CM_CampaignMissionIntroZoomIn_Func");
}

void libCOMI_InitTriggers () {
    libCOMI_gt_VoidPingSound_Init();
    libCOMI_gt_CM_DebugAbathurBiomassReport_Init();
    libCOMI_gt_CM_DebugAIPersonalityChange_Init();
    libCOMI_gt_CM_DebugHeroReviveInstant_Init();
    libCOMI_gt_CM_DebugCommanderCooldowns_Init();
    libCOMI_gt_CM_DebugApplySkin_Init();
    libCOMI_gt_CM_CinematicModeOn_Init();
    libCOMI_gt_CM_CinematicModeOff_Init();
    libCOMI_gt_CM_CoopAI_AIManager_Init();
    libCOMI_gt_CM_CoopAI_AttackWaveSetup_Init();
    libCOMI_gt_CM_CoopAI_AIDetectionManager_Init();
    libCOMI_gt_CM_CoopAI_AttackWavePingManager_Init();
    libCOMI_gt_CM_CoopAI_InitAIDebugging_Init();
    libCOMI_gt_ToggleAIDebugMessages_Init();
    libCOMI_gt_ConjoinedVitalRegenOnOff_Init();
    libCOMI_gt_ChronoAnimSpeedOn_Init();
    libCOMI_gt_ChronoAnimSpeedOff_Init();
    libCOMI_gt_SamePlaceRevive_Init();
    libCOMI_gt_MU_CandyBowlMassBuy_Init();
    libCOMI_gt_CM_InstantRevive_Init();
    libCOMI_gt_SupplicantWarpTrain_Init();
    libCOMI_gt_SupplicantActualTrain_Init();
    libCOMI_gt_SupplicantWarpFinish_Init();
    libCOMI_gt_SupplicantWarpCancel_Init();
    libCOMI_gt_StukovSnareBehaviorOn2_Init();
    libCOMI_gt_CM_CargoDeath_Init();
    libCOMI_gt_RoachDropScale_Init();
    libCOMI_gt_CM_MasteryVorazunDarkPylonRadius_Init();
    libCOMI_gt_CM_AchievementRaynorBansheesUsed_Init();
    libCOMI_gt_CM_AchievementSwannCombatDropUsed_Init();
    libCOMI_gt_CM_AchievementVorazunBlackHoleUsed_Init();
    libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed_Init();
    libCOMI_gt_CM_AchievementKaraxSolarLanceUsed_Init();
    libCOMI_gt_CM_AchievementFenixChampionAllExist_Init();
    libCOMI_gt_CreepTumorBuild_Init();
    libCOMI_gt_CM_DebugVictoryS_Init();
    libCOMI_gt_CM_DebugGiveOfflineControl_Init();
    libCOMI_gt_MindControlSupplyOn_Init();
    libCOMI_gt_MindControlSupplyOff_Init();
    libCOMI_gt_CM_Abathur_TriggersInit_Init();
    libCOMI_gt_CM_Abathur_BiomassDrop_Init();
    libCOMI_gt_CM_Abathur_BiomassPickup_Init();
    libCOMI_gt_CM_Abathur_BiomassRefund_Init();
    libCOMI_gt_CM_DebugAbathurBiomassLost_Init();
    libCOMI_gt_CM_Abathur_BiomassTrain_Init();
    libCOMI_gt_CM_Abathur_BiomassManualUpdate_Init();
    libCOMI_gt_CM_Abathur_BiomassScaler_Init();
    libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts_Init();
    libCOMI_gt_CM_Abathur_ToxicNest_Init();
    libCOMI_gt_CM_Alarak_Sacrific_Scale_Init();
    libCOMI_gt_CM_AlarakLightningStrikes_FlashOn_Init();
    libCOMI_gt_CM_AlarakLightningStrikes_FlashOff_Init();
    libCOMI_gt_CM_AlarakLightningStrikes_Sacriface_Init();
    libCOMI_gt_CM_Alarak_SoulAbsorption_Impact_Init();
    libCOMI_gt_CM_Alarak_SoulAbsorption_Launch_Init();
    libCOMI_gt_CM_Alarak_EmpowerAdd_Init();
    libCOMI_gt_CM_Alarak_EmpowerRemove_Init();
    libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd_Init();
    libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove_Init();
    libCOMI_gt_CM_Alarak_EmpowerUpdate_Init();
    libCOMI_gt_CM_Fenix_AchievementCarrierAmount_Init();
    libCOMI_gt_CM_Fenix_AchievementCarrierResearched_Init();
    libCOMI_gt_CM_Fenix_SentryNullShield_Init();
    libCOMI_gt_CM_Fenix_TaldarinDetonationStore_Init();
    libCOMI_gt_CM_Fenix_TaldarinDetonationRelease_Init();
    libCOMI_gt_CM_Fenix_InitialDummySpawn_Init();
    libCOMI_gt_CM_Fenix_HeroSpawn_Init();
    libCOMI_gt_CM_Fenix_HeroSpawnCleanup_Init();
    libCOMI_gt_CM_Fenix_HeroKilled_Init();
    libCOMI_gt_CM_Fenix_SuicideUpdateVital_Init();
    libCOMI_gt_CM_Fenix_ResearchRemoveSuicide_Init();
    libCOMI_gt_CM_Fenix_ChampionInitialSetup_Init();
    libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Init();
    libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt_Init();
    libCOMI_gt_CM_Fenix_ChampionUpgradeResearched_Init();
    libCOMI_gt_CM_Fenix_ChampionTimers_Init();
    libCOMI_gt_CM_Fenix_ChampionMorphed_Init();
    libCOMI_gt_CM_Fenix_ChampionDies_Init();
    libCOMI_gt_CM_Fenix_NetworkedUnitDies_Init();
    libCOMI_gt_CM_Fenix_ProbiusSwap_Init();
    libCOMI_gt_CM_Fenix_ConclaiveTrainStart_Init();
    libCOMI_gt_CM_Fenix_ConclaiveTrainStop_Init();
    libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Init();
    libCOMI_gt_ChargedBusterOnCost_Init();
    libCOMI_gt_ChargedBusterOffCost_Init();
    libCOMI_gt_CM_Fenix_TriggersInit_Init();
    libCOMI_gt_CM_KaraxUnitReviveBarrier_Init();
    libCOMI_gt_CM_KaraxSolarForgeSOAEnergy_Init();
    libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown_Init();
    libCOMI_gt_KerriganPsiStrike_Init();
    libCOMI_gt_KerriganEconDrop_Init();
    libCOMI_gt_CM_LaserDrillBFGActivate_Init();
    libCOMI_gt_CM_LaserDrillNukeActivate_Init();
    libCOMI_gt_CM_LaserDrillBFG_Init();
    libCOMI_gt_LaserDrillBeamSoundRegionClear_Init();
    libCOMI_gt_LaserDrillBeamSoundFiring_Init();
    libCOMI_gt_LaserDrillBFGBeamSoundFiring_Init();
    libCOMI_gt_LaserDrillNukeBeamSoundFiring_Init();
    libCOMI_gt_LaserDrillNukeBeamSoundRegionClear_Init();
    libCOMI_gt_NovaUnitNames_GenerateNameList_Init();
    libCOMI_gt_NovaUnitNames_Assign_Init();
    libCOMI_gt_NovaUnitNames_KillCountUpdate_Init();
    libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret_Init();
    libCOMI_gt_CM_NovaGriffinTransportActived_Init();
    libCOMI_gt_CM_NovaGriffinTransportStop_Init();
    libCOMI_gt_CM_NovaGriffinTransportTimeOut_Init();
    libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied_Init();
    libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Init();
    libCOMI_gt_CM_NovaGriffinTransportTeleportUnload_Init();
    libCOMI_gt_CM_NovaGriffinBombingRunActivated_Init();
    libCOMI_gt_CM_NovaGriffinBombingRunFinish_Init();
    libCOMI_gt_CM_Nova_TriggersInit_Init();
    libCOMI_gt_NovaSiegeModeProgressiveRangeIncreaseApply_Init();
    libCOMI_gt_NovaPsiStrike_Init();
    libCOMI_gt_BuildingCompletedTrigger_Init();
    libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Init();
    libCOMI_gt_AdvancedConstructionAutoUser_Init();
    libCOMI_gt_AdvancedConstructionAutoAutoCast_Init();
    libCOMI_gt_SwannVespeneDroneTrigger_Init();
    libCOMI_gt_SwannSiegeTankRebuildController_Init();
    libCOMI_gt_SwannThorRebuildController_Init();
    libCOMI_gt_FullSupplyCheat_Init();
    libCOMI_gt_StukovAutoCreepTumor_Init();
    libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn_Init();
    libCOMI_gt_CM_Stukov_InfestedStructureRebuilt_Init();
    libCOMI_gt_CM_Stukov_HordeWaveSpawner_Init();
    libCOMI_gt_CM_Stukov_HordeWaveCreated_Init();
    libCOMI_gt_CM_Stukov_HordeWaveExploderCreated_Init();
    libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Init();
    libCOMI_gt_CM_Stukov_RallyPlaced_Init();
    libCOMI_gt_CM_Stukov_RallyToUnitDies_Init();
    libCOMI_gt_CM_Stukov_TriggersInit_Init();
    libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad_Init();
    libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Init();
    libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Init();
    libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally_Init();
    libCOMI_gt_CM_Stukov_InfestedBunkerRegister_Init();
    libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn_Init();
    libCOMI_gt_UnitCostRefund_Init();
    libCOMI_gt_PickupMinerals50_Init();
    libCOMI_gt_PickupMinerals100_Init();
    libCOMI_gt_PickupMinerals250_Init();
    libCOMI_gt_PickupMinerals500_Init();
    libCOMI_gt_PickupGas50_Init();
    libCOMI_gt_PickupGas100_Init();
    libCOMI_gt_PickupGas200_Init();
    libCOMI_gt_PickupGas500_Init();
    libCOMI_gt_CM_SoATargetingForceOff_Init();
    libCOMI_gt_CM_SoATargetingDeactivated_Init();
    libCOMI_gt_CM_SoATargetingPointChosen_Init();
    libCOMI_gt_CM_SoATargetingDirectionChosen_Init();
    libCOMI_gt_CM_SoATargetingEffectFired_Init();
    libCOMI_gt_CM_SoATargetingCancel_Init();
    libCOMI_gt_CM_SoATargetingCancelFromUI_Init();
    libCOMI_gt_CM_SoATargetingCameraShake_Init();
    libCOMI_gt_CM_SoAOrbitalStrikeActivated_Init();
    libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax_Init();
    libCOMI_gt_CM_SoAGravitonBombActivated_Init();
    libCOMI_gt_CM_SoAThermalLanceActivated_Init();
    libCOMI_gt_CM_SoATimeFreezeOnP1_Init();
    libCOMI_gt_CM_SoATimeFreezeOnP2_Init();
    libCOMI_gt_CM_SoATimeFreezeCleanup_Init();
    libCOMI_gt_PM_SoATargetingPurifierBeamOn_Init();
    libCOMI_gt_PM_SoATargetingPurifierBeamOff_Init();
    libCOMI_gt_PM_SoAStrafeActivated_Init();
    libCOMI_gt_PM_SoASuperShieldsActivated_Init();
    libCOMI_gt_CM_SoASuperChronoApply_Init();
    libCOMI_gt_CM_SoASuperChronoCleanup_Init();
    libCOMI_gt_VoidACShardModifyHealth_Init();
    libCOMI_gt_ExpansionRocksChangeOwner_Init();
    libCOMI_gt_CM_AbortMission_Init();
    libCOMI_gt_CM_MissionScoreScreenExited_Init();
    libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources_Init();
    libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Init();
    libCOMI_gt_CM_MissionVictoryCheatEndMission_Init();
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Init();
    libCOMI_gt_CM_HatcheryPrimarySearch_Init();
    libCOMI_gt_CM_StartingTech_Init();
    libCOMI_gt_VoicePackDebug_Init();
    libCOMI_gt_CM_HatcheryEggModels_Init();
    libCOMI_gt_CM_HatcheryEggBirths_Init();
    libCOMI_gt_CM_HeroDied_Init();
    libCOMI_gt_CM_NovaRespawnBuyBack_Init();
    libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment_Init();
    libCOMI_gt_CM_HeroSpawn_Init();
    libCOMI_gt_CM_GlobalCasterInit_Init();
    libCOMI_gt_CM_AutoRevealRegionController_Init();
    libCOMI_gt_CM_GPReminderAbilityUsed_Init();
    libCOMI_gt_CM_CampaignProbeHelperInit_Init();
    libCOMI_gt_CM_CampaignProbeHelperUpdateCreated_Init();
    libCOMI_gt_CM_CampaignProbeHelperUpdateConstructionFinishes_Init();
    libCOMI_gt_CM_CampaignDroneHelperUpdateChangedOwner_Init();
    libCOMI_gt_CM_PlayerNeedPylon_Init();
    libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood2_Init();
    libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood3_Init();
    libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood4_Init();
    libCOMI_gt_CM_PlayerNeedPylonButtonClickedFood6_Init();
    libCOMI_gt_CM_AbilityTransmissionRaynorHyperion_Init();
    libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed_Init();
    libCOMI_gt_CM_AbilityTransmissionSwannDrone_Init();
    libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill_Init();
    libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed_Init();
    libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip_Init();
    libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation_Init();
    libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop_Init();
    libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields_Init();
    libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop_Init();
    libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Init();
    libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap_Init();
    libCOMI_gt_CM_AbilityTransmissionAbathurMend_Init();
    libCOMI_gt_CM_AbilityTransmissionAbathurNestReminder_Init();
    libCOMI_gt_CM_AbilityTransmissionAlarakEmpower_Init();
    libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet_Init();
    libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge_Init();
    libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice_Init();
    libCOMI_gt_CM_AbilityTransmissionNovaBombingRun_Init();
    libCOMI_gt_CM_AbilityTransmissionNovaTransport_Init();
    libCOMI_gt_CM_AbilityTransmissionNovaDMatrix_Init();
    libCOMI_gt_CM_AbilityTransmissionNovaNukeReady_Init();
    libCOMI_gt_CM_AbilityTransmissionStukovAleksander_Init();
    libCOMI_gt_CM_AbilityTransmissionStukovApocalisk_Init();
    libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixMassRecall_Init();
    libCOMI_gt_CM_HeroTransmissionFenixHeroDies_Init();
    libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired_Init();
    libCOMI_gt_CM_HeroTransmissionFenixNameChange_Init();
    libCOMI_gt_CM_VOResourceSent_Init();
    libCOMI_gt_CM_VOResourceRequest_Init();
    libCOMI_gt_CM_VOEnemySpotted_Init();
    libCOMI_gt_CM_VOUnitsLostCheck_Init();
    libCOMI_gt_CM_VOEnemyCloakedSpotted_Init();
    libCOMI_gt_CM_TransmissionSend_Init();
    libCOMI_gt_CM_SendTransmissionCampaignTick_Init();
    libCOMI_gt_CM_DropPod_Zerg_DontWait_Init();
    libCOMI_gt_CM_DropPod_Terran_DontWait_Init();
    libCOMI_gt_CM_CampaignUnitTeaching_Init();
    libCOMI_gt_CM_CampaignUnitCreated_Init();
    libCOMI_gt_CM_CampaignCyberneticsSelected_Init();
    libCOMI_gt_CM_CampaignCybCoreBuilding_Init();
    libCOMI_gt_CM_CampaignCyberneticsDestroyed_Init();
    libCOMI_gt_CM_CampaignLaserDrillCreated_Init();
    libCOMI_gt_CM_CampaignLaserDrillSelected_Init();
    libCOMI_gt_CM_CampaignLaserDrillDamaged_Init();
    libCOMI_gt_CM_CampaignSolarForgeSelected_Init();
    libCOMI_gt_CM_CampaignUnitChangeOwner_Init();
    libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Init();
    libCOMI_gt_CM_CampaignMissionPerfLog_Init();
    libCOMI_gt_CM_CampaignMissionInitialize_Init();
    libCOMI_gt_CM_CampaignMissionPerfTestEnable_Init();
    libCOMI_gt_CM_CampaignMissionIntroZoomIn_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCOMI_InitLib_completed = false;

void libCOMI_InitLib () {
    if (libCOMI_InitLib_completed) {
        return;
    }

    libCOMI_InitLib_completed = true;

    libCOMI_InitLibraries();
    libCOMI_InitVariables();
    libCOMI_InitCustomScript();
    libCOMI_InitTriggers();
}

include "LibCOOC"
include "LibCOUI"
include "LibCOMU"

